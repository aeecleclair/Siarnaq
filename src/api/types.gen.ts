// This file is auto-generated by @hey-api/openapi-ts

export type AccessToken = {
  access_token: string;
  token_type: string;
};

/**
 * Various account types that can be created in Hyperion.
 * These values should match GroupType's. They are the lower level groups in Hyperion
 */
export type AccountType =
  | "39691052-2ae5-4e12-99d0-7a9f5f2b0136"
  | "ab4c7503-41b3-11ee-8177-089798f1a4a5"
  | "703056c4-be9d-475c-aa51-b7fc62a96aaa"
  | "29751438-103c-42f2-b09b-33fbb20758a7"
  | "b1cd979e-ecc1-4bd0-bc2b-4dad2ba8cded"
  | "ae4d1866-e7d9-4d7f-bee7-e0dda24d8dd8";

export type AdvertBase = {
  title: string;
  content: string;
  advertiser_id: string;
  tags?: string | null;
};

export type AdvertReturnComplete = {
  title: string;
  content: string;
  advertiser_id: string;
  tags?: string | null;
  id: string;
  advertiser: AdvertiserComplete;
  date?: string | null;
};

export type AdvertUpdate = {
  title?: string | null;
  content?: string | null;
  tags?: string | null;
};

export type AdvertiserBase = {
  name: string;
  /**
   * The group manager id should be a group identifier
   */
  group_manager_id: string;
};

export type AdvertiserComplete = {
  name: string;
  /**
   * The group manager id should be a group identifier
   */
  group_manager_id: string;
  id: string;
};

export type AdvertiserUpdate = {
  name?: string | null;
  group_manager_id?: string | null;
};

export type AmapSlotType = "midi" | "soir";

export type Applicant = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  email: string;
  promo?: number | null;
  phone?: string | null;
};

export type AssociationBase = {
  name: string;
  kind: Kinds;
  mandate_year: number;
  description?: string | null;
};

export type AssociationComplete = {
  name: string;
  kind: Kinds;
  mandate_year: number;
  description?: string | null;
  id: string;
};

export type AssociationEdit = {
  name?: string | null;
  kind?: Kinds | null;
  description?: string | null;
  mandate_year?: number | null;
};

export type AvailableAssociationMembership = "AEECL" | "USEECL";

/**
 * Return a dictionary of {key: error message} indicating which element of failed.
 */
export type BatchResult = {
  failed: {
    [key: string]: string;
  };
};

export type Body_authorize_validation_auth_authorization_flow_authorize_validation_post =
  {
    client_id: string;
    redirect_uri?: string | null;
    response_type: string;
    scope?: string | null;
    state?: string | null;
    nonce?: string | null;
    code_challenge?: string | null;
    code_challenge_method?: string | null;
    email: string;
    password: string;
  };

export type Body_create_advert_image_advert_adverts__advert_id__picture_post = {
  image: Blob | File;
};

export type Body_create_association_logo_phonebook_associations__association_id__picture_post =
  {
    image: Blob | File;
  };

export type Body_create_campaigns_logo_campaign_lists__list_id__logo_post = {
  image: Blob | File;
};

export type Body_create_campaigns_logo_cinema_sessions__session_id__poster_post =
  {
    image: Blob | File;
  };

export type Body_create_current_raffle_logo_tombola_raffles__raffle_id__logo_post =
  {
    image: Blob | File;
  };

export type Body_create_current_user_profile_picture_users_me_profile_picture_post =
  {
    image: Blob | File;
  };

export type Body_create_paper_pdf_and_cover_ph__paper_id__pdf_post = {
  pdf: Blob | File;
};

export type Body_create_prize_picture_tombola_prizes__prize_id__picture_post = {
  image: Blob | File;
};

export type Body_create_recommendation_image_recommendation_recommendations__recommendation_id__picture_post =
  {
    image: Blob | File;
  };

export type Body_introspect_auth_introspect_post = {
  token: string;
  token_type_hint?: string | null;
  client_id?: string | null;
  client_secret?: string | null;
};

export type Body_login_for_access_token_auth_simple_token_post = {
  grant_type?: string | null;
  username: string;
  password: string;
  scope?: string;
  client_id?: string | null;
  client_secret?: string | null;
};

export type Body_post_authorize_page_auth_authorize_post = {
  response_type: string;
  client_id: string;
  redirect_uri: string;
  scope?: string | null;
  state?: string | null;
  nonce?: string | null;
  code_challenge?: string | null;
  code_challenge_method?: string | null;
};

export type Body_recover_user_users_recover_post = {
  email: string;
};

export type Body_register_firebase_device_notification_devices_post = {
  firebase_token: string;
};

export type Body_token_auth_token_post = {
  refresh_token?: string | null;
  grant_type: string;
  code?: string | null;
  redirect_uri?: string | null;
  client_id?: string | null;
  client_secret?: string | null;
  code_verifier?: string | null;
};

export type BookingBase = {
  reason: string;
  start: string;
  end: string;
  creation: string;
  note?: string | null;
  room_id: string;
  key: boolean;
  recurrence_rule?: string | null;
  entity?: string | null;
};

export type BookingEdit = {
  reason?: string | null;
  start?: string | null;
  end?: string | null;
  note?: string | null;
  room_id?: string | null;
  key?: boolean | null;
  recurrence_rule?: string | null;
  entity?: string | null;
};

export type BookingReturn = {
  reason: string;
  start: string;
  end: string;
  creation: string;
  note?: string | null;
  room_id: string;
  key: boolean;
  recurrence_rule?: string | null;
  entity?: string | null;
  id: string;
  decision: Decision;
  applicant_id: string;
  room: RoomComplete;
};

export type BookingReturnApplicant = {
  reason: string;
  start: string;
  end: string;
  creation: string;
  note?: string | null;
  room_id: string;
  key: boolean;
  recurrence_rule?: string | null;
  entity?: string | null;
  id: string;
  decision: Decision;
  applicant_id: string;
  room: RoomComplete;
  applicant: Applicant;
};

export type BookingReturnSimpleApplicant = {
  reason: string;
  start: string;
  end: string;
  creation: string;
  note?: string | null;
  room_id: string;
  key: boolean;
  recurrence_rule?: string | null;
  entity?: string | null;
  id: string;
  decision: Decision;
  applicant_id: string;
  room: RoomComplete;
  applicant: CoreUserSimple;
};

export type CalendarEventType =
  | "Event AE"
  | "Event USE"
  | "Asso ind√©"
  | "HH"
  | "Strass"
  | "Rewass"
  | "Autre";

export type CashComplete = {
  balance: number;
  user_id: string;
  user: CoreUserSimple;
};

export type CashEdit = {
  balance: number;
};

export type CdrStatus = "pending" | "online" | "onsite" | "closed";

export type CdrUser = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  curriculum?: CurriculumComplete | null;
};

export type ChangePasswordRequest = {
  email: string;
  old_password: string;
  new_password: string;
};

export type CineSessionBase = {
  start: string;
  duration: number;
  name: string;
  overview: string;
  genre?: string | null;
  tagline?: string | null;
};

export type CineSessionComplete = {
  start: string;
  duration: number;
  name: string;
  overview: string;
  genre?: string | null;
  tagline?: string | null;
  id: string;
};

export type CineSessionUpdate = {
  name?: string | null;
  start?: string | null;
  duration?: number | null;
  overview?: string | null;
  genre?: string | null;
  tagline?: string | null;
};

/**
 * Schema for batch membership deletion
 */
export type CoreBatchDeleteMembership = {
  group_id: string;
};

/**
 * Schema for batch membership creation
 */
export type CoreBatchMembership = {
  user_emails: Array<string>;
  group_id: string;
  description?: string | null;
};

/**
 * The schema is used for batch account creation requests. An account type should be provided
 */
export type CoreBatchUserCreateRequest = {
  email: string;
  account_type: AccountType;
  external?: boolean;
};

/**
 * Schema for group's model similar to core_group table in database
 */
export type CoreGroup = {
  name: string;
  description?: string | null;
  id: string;
  members?: Array<CoreUserSimple>;
};

/**
 * Model for group creation schema
 */
export type CoreGroupCreate = {
  name: string;
  description?: string | null;
};

/**
 * Simplified schema for group's model, used when getting all groups
 */
export type CoreGroupSimple = {
  name: string;
  description?: string | null;
  id: string;
};

/**
 * Schema for group update
 */
export type CoreGroupUpdate = {
  name?: string | null;
  description?: string | null;
};

/**
 * Information about Hyperion
 */
export type CoreInformation = {
  ready: boolean;
  version: string;
  minimal_titan_version_code: number;
};

/**
 * Schema for membership creation (allows adding a user to a group)
 */
export type CoreMembership = {
  user_id: string;
  group_id: string;
  description?: string | null;
};

export type CoreMembershipDelete = {
  user_id: string;
  group_id: string;
};

/**
 * Schema for user's model similar to core_user table in database
 */
export type CoreUser = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  email: string;
  birthday?: string | null;
  promo?: number | null;
  floor?: FloorsType | null;
  phone?: string | null;
  created_on?: string | null;
  groups?: Array<CoreGroupSimple>;
};

export type CoreUserActivateRequest = {
  name: string;
  firstname: string;
  nickname?: string | null;
  activation_token: string;
  password: string;
  birthday?: string | null;
  phone?: string | null;
  floor?: FloorsType | null;
  /**
   * Promotion of the student, an integer like 21
   */
  promo?: number | null;
};

/**
 * The schema is used to send an account creation request.
 */
export type CoreUserCreateRequest = {
  email: string;
  /**
   * Allow Hyperion to create an external user. Without this, Hyperion will only allow non external students to be created. The email address will be used to determine if the user should be external or not. An external user may not have an ECL email address, he won't be able to access most features.
   */
  accept_external?: boolean;
};

/**
 * Simplified schema for user's model, used when getting all users
 */
export type CoreUserSimple = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
};

/**
 * Schema for user update
 */
export type CoreUserUpdate = {
  nickname?: string | null;
  birthday?: string | null;
  phone?: string | null;
  floor?: FloorsType | null;
};

export type CoreUserUpdateAdmin = {
  name?: string | null;
  firstname?: string | null;
  promo?: number | null;
  nickname?: string | null;
  birthday?: string | null;
  phone?: string | null;
  floor?: FloorsType | null;
  external?: boolean | null;
};

export type CurriculumBase = {
  name: string;
};

export type CurriculumComplete = {
  name: string;
  id: string;
};

export type Decision = "approved" | "declined" | "pending";

/**
 * Base schema for AMAP deliveries
 */
export type DeliveryBase = {
  delivery_date: string;
  products_ids?: Array<string>;
};

export type DeliveryProductsUpdate = {
  products_ids: Array<string>;
};

export type DeliveryReturn = {
  delivery_date: string;
  products?: Array<app__modules__amap__schemas_amap__ProductComplete>;
  id: string;
  status: DeliveryStatusType;
};

export type DeliveryStatusType =
  | "creation"
  | "orderable"
  | "locked"
  | "delivered"
  | "archived";

export type DeliveryUpdate = {
  delivery_date?: string | null;
};

export type DocumentBase = {
  name: string;
};

export type DocumentComplete = {
  name: string;
  id: string;
  seller_id: string;
};

export type DocumentModel = {
  id?: number | null;
  fileName?: string | null;
  publicUrl?: string | null;
};

export type DocumentSignatureType = "material" | "numeric";

export type EventApplicant = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  email: string;
  promo?: number | null;
  phone?: string | null;
};

export type EventBase = {
  name: string;
  organizer: string;
  start: string;
  end: string;
  all_day: boolean;
  location: string;
  type: CalendarEventType;
  description: string;
  recurrence_rule?: string | null;
};

export type EventComplete = {
  name: string;
  organizer: string;
  start: string;
  end: string;
  all_day: boolean;
  location: string;
  type: CalendarEventType;
  description: string;
  recurrence_rule?: string | null;
  id: string;
  decision: Decision;
  applicant_id: string;
};

export type EventEdit = {
  name?: string | null;
  organizer?: string | null;
  start?: string | null;
  end?: string | null;
  all_day?: boolean | null;
  location?: string | null;
  type?: CalendarEventType | null;
  description?: string | null;
  recurrence_rule?: string | null;
};

export type EventReturn = {
  name: string;
  organizer: string;
  start: string;
  end: string;
  all_day: boolean;
  location: string;
  type: CalendarEventType;
  description: string;
  recurrence_rule?: string | null;
  id: string;
  decision: Decision;
  applicant_id: string;
  applicant: EventApplicant;
};

export type FieldType =
  | "Date"
  | "TextInput"
  | "FreeText"
  | "ChoiceList"
  | "File"
  | "YesNo"
  | "Phone"
  | "Zipcode"
  | "Number";

export type FirebaseDevice = {
  /**
   * The Hyperion user id
   */
  user_id: string;
  firebase_device_token?: string;
};

export type FlappyBirdScoreBase = {
  value: number;
};

/**
 * A score with its position in the best players leaderboard
 */
export type FlappyBirdScoreCompleteFeedBack = {
  value: number;
  user: CoreUserSimple;
  creation_time: string;
  position: number;
};

export type FlappyBirdScoreInDB = {
  value: number;
  user: CoreUserSimple;
  creation_time: string;
  id: string;
  user_id: string;
};

export type FloorsType =
  | "Autre"
  | "Adoma"
  | "Exte"
  | "T1"
  | "T2"
  | "T3"
  | "T4"
  | "T56"
  | "U1"
  | "U2"
  | "U3"
  | "U4"
  | "U56"
  | "V1"
  | "V2"
  | "V3"
  | "V45"
  | "V6"
  | "X1"
  | "X2"
  | "X3"
  | "X4"
  | "X5"
  | "X6";

export type FormNotificationResultContent = {
  eventType: "Form";
  data: FormPublicModel;
  metadata?: {
    [key: string]: unknown;
  } | null;
};

export type eventType = "Form";

export type FormPublicModel = {
  organizationLogo?: string | null;
  organizationName?: string | null;
  tiers?: Array<TierPublicModel> | null;
  activityType?: string | null;
  activityTypeId?: number | null;
  place?: PlaceModel | null;
  saleEndDate?: string | null;
  saleStartDate?: string | null;
  validityType?: MembershipValidityType | null;
  banner?: DocumentModel | null;
  currency?: string | null;
  description?: string | null;
  startDate?: string | null;
  endDate?: string | null;
  logo?: DocumentModel | null;
  meta?: MetaModel | null;
  state?: FormState | null;
  title?: string | null;
  privateTitle?: string | null;
  widgetButtonUrl?: string | null;
  widgetFullUrl?: string | null;
  widgetVignetteHorizontalUrl?: string | null;
  widgetVignetteVerticalUrl?: string | null;
  widgetCounterUrl?: string | null;
  formSlug?: string | null;
  formType?: FormType | null;
  url?: string | null;
  organizationSlug?: string | null;
};

export type FormState = "Public" | "Private" | "Draft" | "Disabled";

export type FormType =
  | "CrowdFunding"
  | "Membership"
  | "Event"
  | "Donation"
  | "PaymentForm"
  | "Checkout"
  | "Shop";

export type GeoLocation = {
  latitude?: number | null;
  longitude?: number | null;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type Information = {
  manager: string;
  link: string;
  description: string;
};

export type InformationEdit = {
  manager?: string | null;
  link?: string | null;
  description?: string | null;
};

export type IntrospectTokenResponse = {
  active: boolean;
};

export type Item = {
  name: string;
  suggested_caution: number;
  total_quantity: number;
  /**
   * duration in seconds
   */
  suggested_lending_duration: number;
  id: string;
  loaner_id: string;
  loaned_quantity: number;
};

/**
 * Base schema for item's model
 */
export type ItemBase = {
  name: string;
  suggested_caution: number;
  total_quantity: number;
  /**
   * duration in seconds
   */
  suggested_lending_duration: number;
};

/**
 * A schema used to represent Item in a loan with its quantity in a request by the client
 */
export type ItemBorrowed = {
  item_id: string;
  quantity: number;
};

export type ItemCustomField = {
  id?: number | null;
  name?: string | null;
  type?: FieldType | null;
  answer?: string | null;
};

export type ItemDiscount = {
  code?: string | null;
  amount?: number | null;
};

export type ItemOption = {
  name?: string | null;
  amount?: number | null;
  priceCategory?: PriceCategory | null;
  isRequired?: boolean | null;
  customFields?: Array<ItemCustomField> | null;
  optionId?: number | null;
};

/**
 * A schema used to represent Item in a loan with its quantity in a response to the client
 */
export type ItemQuantity = {
  quantity: number;
  itemSimple: ItemSimple;
};

export type ItemSimple = {
  id: string;
  name: string;
  loaner_id: string;
};

export type ItemState = "Processed" | "Registered" | "Unknown" | "Canceled";

export type ItemUpdate = {
  name?: string | null;
  suggested_caution?: number | null;
  total_quantity?: number | null;
  /**
   * duration in seconds
   */
  suggested_lending_duration?: number | null;
};

export type Kinds =
  | "Comit√©"
  | "Section AE"
  | "Club AE"
  | "Section USE"
  | "Club USE"
  | "Asso ind√©";

export type KindsReturn = {
  kinds: Array<Kinds>;
};

/**
 * Base schema for a list.
 */
export type ListBase = {
  name: string;
  description: string;
  type: ListType;
  section_id: string;
  members: Array<ListMemberBase>;
  program?: string | null;
};

export type ListEdit = {
  name?: string | null;
  description?: string | null;
  type?: ListType | null;
  members?: Array<ListMemberBase> | null;
  program?: string | null;
};

export type ListMemberBase = {
  user_id: string;
  role: string;
};

export type ListMemberComplete = {
  user_id: string;
  role: string;
  user: CoreUserSimple;
};

export type ListReturn = {
  id: string;
  name: string;
  description: string;
  type: ListType;
  section: SectionComplete;
  members: Array<ListMemberComplete>;
  program?: string | null;
};

/**
 * A list can be "Serios" or "Pipo". There will also be one "Blank" list by section that will be automatically added when the vote is open.
 */
export type ListType = "Serio" | "Pipo" | "Blank";

/**
 * A complete representation of a Loan which can be sent by the API
 */
export type Loan = {
  borrower_id: string;
  loaner_id: string;
  start: string;
  end: string;
  notes?: string | null;
  caution?: string | null;
  id: string;
  returned: boolean;
  returned_date: string | null;
  items_qty: Array<ItemQuantity>;
  borrower: CoreUserSimple;
  loaner: Loaner;
};

/**
 * A schema used to create a new loan
 */
export type LoanCreation = {
  borrower_id: string;
  loaner_id: string;
  start: string;
  end: string;
  notes?: string | null;
  caution?: string | null;
  items_borrowed: Array<ItemBorrowed>;
};

export type LoanExtend = {
  /**
   * A new return date for the Loan
   */
  end?: string | null;
  /**
   * The duration by which the loan should be extended in seconds
   */
  duration?: number | null;
};

/**
 * When the client asks to update the Loan with a PATCH request, they should be able to change the loan items.
 */
export type LoanUpdate = {
  borrower_id?: string | null;
  start?: string | null;
  end?: string | null;
  notes?: string | null;
  caution?: string | null;
  returned?: boolean | null;
  items_borrowed?: Array<ItemBorrowed> | null;
};

export type Loaner = {
  name: string;
  /**
   * The group manager id should by a group identifier
   */
  group_manager_id: string;
  id: string;
};

export type LoanerBase = {
  name: string;
  /**
   * The group manager id should by a group identifier
   */
  group_manager_id: string;
};

export type LoanerUpdate = {
  name?: string | null;
  group_manager_id?: string | null;
};

export type MailMigrationRequest = {
  new_email: string;
};

export type Manager = {
  name: string;
  group_id: string;
  id: string;
};

export type ManagerBase = {
  name: string;
  group_id: string;
};

export type ManagerUpdate = {
  name?: string | null;
  group_id?: string | null;
};

export type MemberComplete = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  email: string;
  phone?: string | null;
  promo?: number | null;
  memberships: Array<app__modules__phonebook__schemas_phonebook__MembershipComplete>;
};

export type MembershipEdit = {
  role_name?: string | null;
  role_tags?: string | null;
};

export type MembershipValidityType = "MovingYear" | "Custom" | "Illimited";

export type Message = {
  /**
   * A context represents a topic. There can only by one notification per context.
   */
  context: string;
  /**
   * A message can be visible or not, if it is not visible, it should only trigger an action
   */
  is_visible: boolean;
  title?: string | null;
  content?: string | null;
  /**
   * An identifier for the module that should be triggered when the notification is clicked
   */
  action_module?: string | null;
  action_table?: string | null;
  /**
   * The date the notification should be shown
   */
  delivery_datetime?: string | null;
  expire_on: string;
};

export type MetaModel = {
  createdAt?: string | null;
  updatedAt?: string | null;
};

export type ModuleVisibility = {
  root: string;
  allowed_group_ids: Array<string>;
};

export type ModuleVisibilityCreate = {
  root: string;
  allowed_group_id: string;
};

export type OperationState =
  | "UNKNOWN"
  | "INIT"
  | "PROCESSING"
  | "PROCESSED"
  | "ERROR"
  | "INTERNAL_ERROR";

export type OrderAmountModel = {
  total?: number | null;
  vat?: number | null;
  discount?: number | null;
};

export type OrderBase = {
  user_id: string;
  delivery_id: string;
  products_ids: Array<string>;
  collection_slot: AmapSlotType;
  products_quantity: Array<number>;
};

export type OrderDetail = {
  payer?: Payer | null;
  items?: Array<OrderItem> | null;
  payments?: Array<OrderPayment> | null;
  amount?: OrderAmountModel | null;
  id?: number | null;
  date?: string | null;
  formSlug?: string | null;
  formType?: FormType | null;
  organizationName?: string | null;
  organizationSlug?: string | null;
  organizationType?: OrganizationType | null;
  organizationIsUnderColucheLaw?: boolean | null;
  checkoutIntentId?: number | null;
  meta?: MetaModel | null;
};

export type OrderEdit = {
  products_ids?: Array<string> | null;
  collection_slot?: AmapSlotType | null;
  products_quantity?: Array<number> | null;
};

export type OrderItem = {
  payments?: Array<SharePayment> | null;
  name?: string | null;
  user?: User | null;
  priceCategory?: PriceCategory | null;
  minAmount?: number | null;
  discount?: ItemDiscount | null;
  customFields?: Array<ItemCustomField> | null;
  options?: Array<ItemOption> | null;
  ticketUrl?: string | null;
  qrCode?: string | null;
  membershipCardUrl?: string | null;
  dayOfLevy?: number | null;
  tierDescription?: string | null;
  tierId?: number | null;
  comment?: string | null;
  id?: number | null;
  amount?: number | null;
  type?: TierType | null;
  initialAmount?: number | null;
  state?: ItemState | null;
};

export type OrderLight = {
  id?: number | null;
  date?: string | null;
  formSlug?: string | null;
  formType?: FormType | null;
  organizationName?: string | null;
  organizationSlug?: string | null;
  organizationType?: OrganizationType | null;
  organizationIsUnderColucheLaw?: boolean | null;
  checkoutIntentId?: number | null;
  meta?: MetaModel | null;
};

/**
 * metadata should contain the metadata sent while creating the checkout intent in `InitCheckoutBody`
 */
export type OrderNotificationResultContent = {
  eventType: "Order";
  data: OrderDetail;
  metadata?: {
    [key: string]: unknown;
  } | null;
};

export type eventType2 = "Order";

export type OrderPayment = {
  items?: Array<ShareItem> | null;
  cashOutDate?: string | null;
  cashOutState?: PaymentCashOutState | null;
  paymentReceiptUrl?: string | null;
  fiscalReceiptUrl?: string | null;
  id?: number | null;
  amount?: number | null;
  amountTip?: number | null;
  date?: string | null;
  paymentMeans?: PaymentMeans | null;
  installmentNumber?: number | null;
  state?: PaymentState | null;
  type?: helloasso_api_wrapper__models__enums__PaymentType | null;
  meta?: MetaModel | null;
  paymentOffLineMean?: PaymentMeans | null;
  refundOperations?: Array<RefundOperationLightModel> | null;
};

export type OrderReturn = {
  user: CoreUserSimple;
  delivery_id: string;
  productsdetail: Array<ProductQuantity>;
  collection_slot: AmapSlotType;
  order_id: string;
  amount: number;
  ordering_date: string;
  delivery_date: string;
};

export type OrganizationNotificationResultContent = {
  eventType: "Organization";
  data: OrganizationNotificationResultData;
  metadata?: null;
};

export type eventType3 = "Organization";

export type OrganizationNotificationResultData = {
  old_slug_organization: string;
  new_slug_organization: string;
};

export type OrganizationType =
  | "Association1901Rig"
  | "Association1901Rup"
  | "Association1901"
  | "FondationRup"
  | "FondDotation"
  | "FondationSousEgide"
  | "FondationScientifique"
  | "FondationPartenariale"
  | "FondationUniversitaire"
  | "FondationHospitaliere"
  | "Association1905"
  | "Association1905Rup"
  | "Entreprise"
  | "Cooperative"
  | "Etablissement"
  | "Association1908"
  | "Association1908Rig"
  | "Association1908Rup";

export type PackTicketBase = {
  price: number;
  pack_size: number;
  raffle_id: string;
};

export type PackTicketEdit = {
  raffle_id?: string | null;
  price?: number | null;
  pack_size?: number | null;
};

export type PackTicketSimple = {
  price: number;
  pack_size: number;
  raffle_id: string;
  id: string;
};

/**
 * Base schema for paper's model
 */
export type PaperBase = {
  name: string;
  release_date: string;
};

export type PaperComplete = {
  name: string;
  release_date: string;
  id: string;
};

export type PaperUpdate = {
  name?: string | null;
  release_date?: string | null;
};

/**
 * metadata should contain the metadata sent while creating the checkout intent in `InitCheckoutBody`
 */
export type PayementNotificationResultContent = {
  eventType: "Payment";
  data: PaymentDetail;
  metadata?: {
    [key: string]: unknown;
  } | null;
};

export type eventType4 = "Payment";

export type Payer = {
  email?: string | null;
  address?: string | null;
  city?: string | null;
  zipCode?: string | null;
  country?: string | null;
  company?: string | null;
  dateOfBirth?: string | null;
  firstName?: string | null;
  lastName?: string | null;
};

export type PaymentBase = {
  total: number;
  payment_type: app__modules__cdr__types_cdr__PaymentType;
};

export type PaymentCashOutState =
  | "MoneyIn"
  | "CantTransferReceiverFull"
  | "Transfered"
  | "Refunded"
  | "Refunding"
  | "WaitingForCashOutConfirmation"
  | "CashedOut"
  | "Unknown"
  | "Contested"
  | "TransferInProgress";

export type PaymentComplete = {
  total: number;
  payment_type: PaymentType_Output;
  id: string;
  user_id: string;
};

export type PaymentDetail = {
  order?: OrderLight | null;
  payer?: Payer | null;
  items?: Array<PaymentItem> | null;
  cashOutDate?: string | null;
  cashOutState?: PaymentCashOutState | null;
  paymentReceiptUrl?: string | null;
  fiscalReceiptUrl?: string | null;
  id: number;
  amount: number;
  amountTip?: number | null;
  date?: string | null;
  paymentMeans?: PaymentMeans | null;
  installmentNumber?: number | null;
  state?: PaymentState | null;
  type?: helloasso_api_wrapper__models__enums__PaymentType | null;
  meta?: MetaModel | null;
  paymentOffLineMean?: PaymentMeans | null;
  refundOperations?: Array<RefundOperationLightModel> | null;
};

export type PaymentFrequencyType = "Single" | "Installment" | "Monthly";

export type PaymentItem = {
  shareAmount?: number | null;
  shareItemAmount?: number | null;
  shareOptionsAmount?: number | null;
  id?: number | null;
  amount?: number | null;
  type?: TierType | null;
  initialAmount?: number | null;
  state?: ItemState | null;
  name?: string | null;
};

export type PaymentMeans =
  | "None"
  | "Card"
  | "Check"
  | "Cash"
  | "BankTransfer"
  | "Other";

export type PaymentState =
  | "Pending"
  | "Authorized"
  | "Refused"
  | "Unknown"
  | "Registered"
  | "Refunded"
  | "Refunding"
  | "Contested";

export type PaymentType_Output =
  | "cash"
  | "check"
  | "HelloAsso"
  | "card"
  | "archived";

export type PaymentUrl = {
  url: string;
};

export type PlaceModel = {
  address?: string | null;
  name?: string | null;
  city?: string | null;
  zipCode?: string | null;
  country?: string | null;
  geoLocation?: GeoLocation | null;
};

export type PriceCategory = "Fixed" | "Pwyw" | "Free";

export type PrizeBase = {
  name: string;
  description: string;
  raffle_id: string;
  quantity: number;
};

export type PrizeEdit = {
  raffle_id?: string | null;
  description?: string | null;
  name?: string | null;
  quantity?: number | null;
};

export type PrizeSimple = {
  name: string;
  description: string;
  raffle_id: string;
  quantity: number;
  id: string;
};

export type ProductBase = {
  name_fr: string;
  name_en: string;
  description_fr?: string | null;
  description_en?: string | null;
  available_online: boolean;
  related_membership?: AvailableAssociationMembership | null;
  generate_ticket: boolean;
  ticket_max_use?: number | null;
  ticket_expiration?: string | null;
  product_constraints: Array<string>;
  document_constraints: Array<string>;
};

export type ProductCompleteNoConstraint = {
  name_fr: string;
  name_en: string;
  description_fr?: string | null;
  description_en?: string | null;
  available_online: boolean;
  id: string;
  seller_id: string;
  variants?: Array<ProductVariantComplete>;
  related_membership?: AvailableAssociationMembership | null;
  generate_ticket: boolean;
  ticket_max_use?: number | null;
  ticket_expiration?: string | null;
};

export type ProductQuantity = {
  quantity: number;
  product: app__modules__amap__schemas_amap__ProductComplete;
};

export type ProductSimple = {
  name: string;
  price: number;
  category: string;
};

export type ProductVariantBase = {
  name_fr: string;
  name_en: string;
  description_fr?: string | null;
  description_en?: string | null;
  price: number;
  enabled: boolean;
  unique: boolean;
  allowed_curriculum: Array<string>;
  related_membership_added_duration?: string | null;
};

export type ProductVariantComplete = {
  id: string;
  product_id: string;
  name_fr: string;
  name_en: string;
  description_fr?: string | null;
  description_en?: string | null;
  price: number;
  enabled: boolean;
  unique: boolean;
  allowed_curriculum?: Array<CurriculumComplete>;
  related_membership_added_duration?: string | null;
};

export type ProductVariantEdit = {
  name_fr?: string | null;
  name_en?: string | null;
  description_fr?: string | null;
  description_en?: string | null;
  price?: number | null;
  enabled?: boolean | null;
  unique?: boolean | null;
  allowed_curriculum?: Array<string> | null;
  related_membership_added_duration?: string | null;
};

export type PurchaseBase = {
  quantity: number;
};

export type PurchaseComplete = {
  quantity: number;
  user_id: string;
  product_variant_id: string;
  validated: boolean;
  purchased_on: string;
};

export type PurchaseReturn = {
  quantity: number;
  user_id: string;
  product_variant_id: string;
  validated: boolean;
  purchased_on: string;
  price: number;
  product: ProductCompleteNoConstraint;
  seller: SellerComplete;
};

/**
 * Base schema for raffles
 */
export type RaffleBase = {
  name: string;
  status?: RaffleStatusType | null;
  description?: string | null;
  group_id: string;
};

export type RaffleComplete = {
  name: string;
  status?: RaffleStatusType | null;
  description?: string | null;
  group_id: string;
  id: string;
};

export type RaffleEdit = {
  name?: string | null;
  description?: string | null;
};

export type RaffleStats = {
  tickets_sold: number;
  amount_raised: number;
};

export type RaffleStatusType = "creation" | "open" | "lock";

export type Recommendation = {
  title: string;
  code?: string | null;
  summary: string;
  description: string;
  id: string;
  creation: string;
};

export type RecommendationBase = {
  title: string;
  code?: string | null;
  summary: string;
  description: string;
};

export type RecommendationEdit = {
  title?: string | null;
  code?: string | null;
  summary?: string | null;
  description?: string | null;
};

export type RefundOperationLightModel = {
  id?: number | null;
  amount?: number | null;
  amountTip?: number | null;
  status?: OperationState | null;
  meta?: MetaModel | null;
};

export type ResetPasswordRequest = {
  reset_token: string;
  new_password: string;
};

export type RoleTagsReturn = {
  tags: Array<string>;
};

export type RoomBase = {
  name: string;
  manager_id: string;
};

export type RoomComplete = {
  name: string;
  manager_id: string;
  id: string;
};

/**
 * Base schema for a section.
 */
export type SectionBase = {
  name: string;
  description: string;
};

export type SectionComplete = {
  name: string;
  description: string;
  id: string;
};

export type SellerBase = {
  name: string;
  group_id: string;
  order: number;
};

export type SellerComplete = {
  name: string;
  group_id: string;
  order: number;
  id: string;
};

export type SellerEdit = {
  name?: string | null;
  group_id?: string | null;
  order?: number | null;
};

export type ShareItem = {
  id?: number | null;
  shareAmount?: number | null;
  shareItemAmount?: number | null;
  shareOptionsAmount?: number | null;
};

export type SharePayment = {
  id?: number | null;
  shareAmount?: number | null;
};

export type SignatureBase = {
  signature_type: DocumentSignatureType;
  numeric_signature_id?: string | null;
};

export type SignatureComplete = {
  signature_type: DocumentSignatureType;
  numeric_signature_id?: string | null;
  user_id: string;
  document_id: string;
};

export type Status = {
  status?: CdrStatus;
};

/**
 * Status of the voting
 */
export type StatusType =
  | "waiting"
  | "open"
  | "closed"
  | "counting"
  | "published";

export type TermModel = {
  date?: string | null;
  amount?: number | null;
};

export type TheMovieDB = {
  genres: Array<{
    [key: string]: number | string;
  }>;
  overview: string;
  poster_path: string;
  title: string;
  runtime: number;
  tagline: string;
};

export type Ticket = {
  id: string;
  product_variant: ProductVariantComplete;
  user: UserTicket;
  scan: number;
  tags: string;
  expiration: string;
};

export type TicketComplete = {
  pack_id: string;
  user_id: string;
  winning_prize?: string | null;
  id: string;
  prize?: PrizeSimple | null;
  pack_ticket: PackTicketSimple;
  user: CoreUserSimple;
};

export type TicketScan = {
  tag: string;
};

export type TicketSecret = {
  qr_code_secret: string;
};

export type TicketSimple = {
  pack_id: string;
  user_id: string;
  winning_prize?: string | null;
  id: string;
};

export type TierPublicModel = {
  id?: number | null;
  label?: string | null;
  description?: string | null;
  tierType?: TierType | null;
  price?: number | null;
  vatRate?: number | null;
  minAmount?: number | null;
  paymentFrequency?: PaymentFrequencyType | null;
  maxPerUser?: number | null;
  meta?: MetaModel | null;
  saleStartDate?: string | null;
  saleEndDate?: string | null;
  isEligibleTaxReceipt?: boolean | null;
  terms?: Array<TermModel> | null;
  picture?: DocumentModel | null;
};

export type TierType =
  | "Donation"
  | "Payment"
  | "Registration"
  | "Membership"
  | "MonthlyDonation"
  | "MonthlyPayment"
  | "OfflineDonation"
  | "Contribution"
  | "Bonus"
  | "Product";

export type TokenResponse = {
  access_token: string;
  token_type?: string;
  expires_in?: number;
  scope?: string;
  refresh_token: string;
  id_token?: string | null;
};

/**
 * A list of topics. An user can suscribe to a topic to receive notifications about it.
 */
export type Topic =
  | "cinema"
  | "advert"
  | "amap"
  | "booking"
  | "event"
  | "loan"
  | "raffle"
  | "vote"
  | "ph";

export type User = {
  firstName?: string | null;
  lastName?: string | null;
};

export type UserTicket = {
  name: string;
  firstname: string;
  nickname?: string | null;
  id: string;
  promo?: number | null;
  floor?: FloorsType | null;
  created_on?: string | null;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

/**
 * Base schema for a vote.
 */
export type VoteBase = {
  list_id: string;
};

export type VoteStats = {
  section_id: string;
  count: number;
};

export type VoteStatus = {
  status: StatusType;
};

/**
 * Base schema for voters (groups allowed to vote).
 */
export type VoterGroup = {
  group_id: string;
};

export type app__core__standard_responses__Result = {
  success?: boolean;
};

export type app__modules__amap__schemas_amap__ProductComplete = {
  name: string;
  price: number;
  category: string;
  id: string;
};

export type app__modules__amap__schemas_amap__ProductEdit = {
  category?: string | null;
  name?: string | null;
  price?: number | null;
};

export type app__modules__campaign__schemas_campaign__Result = {
  list_id: string;
  count: number;
};

export type app__modules__cdr__schemas_cdr__MembershipBase = {
  membership: AvailableAssociationMembership;
  start_date: string;
  end_date: string;
};

export type app__modules__cdr__schemas_cdr__MembershipComplete = {
  membership: AvailableAssociationMembership;
  start_date: string;
  end_date: string;
  id: string;
  user_id: string;
};

export type app__modules__cdr__schemas_cdr__ProductComplete = {
  name_fr: string;
  name_en: string;
  description_fr?: string | null;
  description_en?: string | null;
  available_online: boolean;
  id: string;
  seller_id: string;
  variants?: Array<ProductVariantComplete>;
  related_membership?: AvailableAssociationMembership | null;
  generate_ticket: boolean;
  ticket_max_use?: number | null;
  ticket_expiration?: string | null;
  product_constraints?: Array<ProductCompleteNoConstraint>;
  document_constraints?: Array<DocumentComplete>;
};

export type app__modules__cdr__schemas_cdr__ProductEdit = {
  name_fr?: string | null;
  name_en?: string | null;
  description_fr?: string | null;
  description_en?: string | null;
  description?: string | null;
  available_online?: boolean | null;
  related_membership?: AvailableAssociationMembership | null;
  generate_ticket?: boolean | null;
  ticket_max_use?: number | null;
  ticket_expiration?: string | null;
  product_constraints?: Array<string> | null;
  document_constraints?: Array<string> | null;
};

export type app__modules__cdr__types_cdr__PaymentType =
  | "cash"
  | "check"
  | "HelloAsso"
  | "card"
  | "archived";

export type app__modules__phonebook__schemas_phonebook__MembershipBase = {
  user_id: string;
  association_id: string;
  mandate_year: number;
  role_name: string;
  role_tags?: string | null;
};

export type app__modules__phonebook__schemas_phonebook__MembershipComplete = {
  user_id: string;
  association_id: string;
  mandate_year: number;
  role_name: string;
  role_tags?: string | null;
  id: string;
};

export type helloasso_api_wrapper__models__enums__PaymentType =
  | "Offline"
  | "Credit"
  | "Debit";

export type PostAuthSimpleTokenData = unknown;

export type PostAuthSimpleTokenResponse = AccessToken;

export type PostAuthSimpleTokenError = unknown;

export type GetAuthAuthorizeData = {
  query: {
    client_id: string;
    code_challenge?: string | null;
    code_challenge_method?: string | null;
    nonce?: string | null;
    redirect_uri?: string | null;
    response_type: string;
    scope?: string | null;
    state?: string | null;
  };
};

export type GetAuthAuthorizeResponse = string;

export type GetAuthAuthorizeError = unknown;

export type PostAuthAuthorizeData = unknown;

export type PostAuthAuthorizeResponse = string;

export type PostAuthAuthorizeError = unknown;

export type PostAuthAuthorizationFlowAuthorizeValidationData = unknown;

export type PostAuthTokenData = {
  headers?: {
    authorization?: string | null;
  };
};

export type PostAuthTokenResponse = TokenResponse;

export type PostAuthTokenError = unknown;

export type PostAuthIntrospectData = {
  headers?: {
    authorization?: string | null;
  };
};

export type PostAuthIntrospectResponse = IntrospectTokenResponse;

export type PostAuthIntrospectError = unknown;

export type GetAuthUserinfoResponse = unknown;

export type GetAuthUserinfoError = unknown;

export type GetOidcAuthorizationFlowJwksUriResponse = unknown;

export type GetOidcAuthorizationFlowJwksUriError = unknown;

export type GetWellKnownOauthAuthorizationServerResponse = unknown;

export type GetWellKnownOauthAuthorizationServerError = unknown;

export type GetWellKnownOpenidConfigurationResponse = unknown;

export type GetWellKnownOpenidConfigurationError = unknown;

export type GetInformationResponse = CoreInformation;

export type GetInformationError = unknown;

export type GetPrivacyResponse = unknown;

export type GetPrivacyError = unknown;

export type GetTermsAndConditionsResponse = unknown;

export type GetTermsAndConditionsError = unknown;

export type GetSupportResponse = unknown;

export type GetSupportError = unknown;

export type GetSecurityTxtResponse = unknown;

export type GetSecurityTxtError = unknown;

export type GetWellKnownSecurityTxtResponse = unknown;

export type GetWellKnownSecurityTxtError = unknown;

export type GetRobotsTxtResponse = unknown;

export type GetRobotsTxtError = unknown;

export type GetStyleFileCssData = {
  path: {
    file: string;
  };
};

export type GetStyleFileCssResponse = unknown;

export type GetStyleFileCssError = unknown;

export type GetFaviconIcoResponse = unknown;

export type GetFaviconIcoError = unknown;

export type GetModuleVisibilityResponse = Array<ModuleVisibility>;

export type GetModuleVisibilityError = unknown;

export type PostModuleVisibilityData = {
  body: ModuleVisibilityCreate;
};

export type PostModuleVisibilityResponse = ModuleVisibilityCreate;

export type PostModuleVisibilityError = unknown;

export type GetModuleVisibilityMeResponse = Array<string>;

export type GetModuleVisibilityMeError = unknown;

export type DeleteModuleVisibilityRootGroupIdData = {
  path: {
    group_id: string;
    root: string;
  };
};

export type DeleteModuleVisibilityRootGroupIdResponse = void;

export type DeleteModuleVisibilityRootGroupIdError = unknown;

export type GetGroupsResponse = Array<CoreGroupSimple>;

export type GetGroupsError = unknown;

export type PostGroupsData = {
  body: CoreGroupCreate;
};

export type PostGroupsResponse = CoreGroupSimple;

export type PostGroupsError = unknown;

export type GetGroupsGroupIdData = {
  path: {
    group_id: string;
  };
};

export type GetGroupsGroupIdResponse = CoreGroup;

export type GetGroupsGroupIdError = unknown;

export type PatchGroupsGroupIdData = {
  body: CoreGroupUpdate;
  path: {
    group_id: string;
  };
};

export type PatchGroupsGroupIdResponse = void;

export type PatchGroupsGroupIdError = unknown;

export type DeleteGroupsGroupIdData = {
  path: {
    group_id: string;
  };
};

export type DeleteGroupsGroupIdResponse = void;

export type DeleteGroupsGroupIdError = unknown;

export type PostGroupsMembershipData = {
  body: CoreMembership;
};

export type PostGroupsMembershipResponse = CoreGroup;

export type PostGroupsMembershipError = unknown;

export type DeleteGroupsMembershipData = {
  body: CoreMembershipDelete;
};

export type DeleteGroupsMembershipResponse = void;

export type DeleteGroupsMembershipError = unknown;

export type PostGroupsBatchMembershipData = {
  body: CoreBatchMembership;
};

export type PostGroupsBatchMembershipResponse = void;

export type PostGroupsBatchMembershipError = unknown;

export type DeleteGroupsBatchMembershipData = {
  body: CoreBatchDeleteMembership;
};

export type DeleteGroupsBatchMembershipResponse = void;

export type DeleteGroupsBatchMembershipError = unknown;

export type GetNotificationDevicesResponse = Array<FirebaseDevice>;

export type GetNotificationDevicesError = unknown;

export type PostNotificationDevicesData = {
  body: Body_register_firebase_device_notification_devices_post;
};

export type PostNotificationDevicesResponse = void;

export type PostNotificationDevicesError = unknown;

export type DeleteNotificationDevicesFirebaseTokenData = {
  path: {
    firebase_token: string;
  };
};

export type DeleteNotificationDevicesFirebaseTokenResponse = void;

export type DeleteNotificationDevicesFirebaseTokenError = unknown;

export type GetNotificationMessagesFirebaseTokenData = {
  path: {
    firebase_token: string;
  };
};

export type GetNotificationMessagesFirebaseTokenResponse = Array<Message>;

export type GetNotificationMessagesFirebaseTokenError = unknown;

export type PostNotificationTopicsTopicStrSubscribeData = {
  path: {
    /**
     * The topic to subscribe to. The Topic may be followed by an additional identifier (ex: cinema_4c029b5f-2bf7-4b70-85d4-340a4bd28653)
     */
    topic_str: string;
  };
};

export type PostNotificationTopicsTopicStrSubscribeResponse = void;

export type PostNotificationTopicsTopicStrSubscribeError = unknown;

export type PostNotificationTopicsTopicStrUnsubscribeData = {
  path: {
    topic_str: string;
  };
};

export type PostNotificationTopicsTopicStrUnsubscribeResponse = void;

export type PostNotificationTopicsTopicStrUnsubscribeError = unknown;

export type GetNotificationTopicsResponse = Array<string>;

export type GetNotificationTopicsError = unknown;

export type GetNotificationTopicsTopicData = {
  path: {
    topic: Topic;
  };
};

export type GetNotificationTopicsTopicResponse = Array<string>;

export type GetNotificationTopicsTopicError = unknown;

export type PostNotificationSendResponse = unknown;

export type PostNotificationSendError = unknown;

export type PostNotificationSendFutureResponse = unknown;

export type PostNotificationSendFutureError = unknown;

export type PostPaymentHelloassoWebhookData = {
  body:
    | OrganizationNotificationResultContent
    | OrderNotificationResultContent
    | PayementNotificationResultContent
    | FormNotificationResultContent;
};

export type PostPaymentHelloassoWebhookResponse = void;

export type PostPaymentHelloassoWebhookError = unknown;

export type GetUsersResponse = Array<CoreUserSimple>;

export type GetUsersError = unknown;

export type GetUsersCountResponse = number;

export type GetUsersCountError = unknown;

export type GetUsersSearchData = {
  query: {
    excludedGroups?: Array<string>;
    includedGroups?: Array<string>;
    query: string;
  };
};

export type GetUsersSearchResponse = Array<CoreUserSimple>;

export type GetUsersSearchError = unknown;

export type GetUsersMeResponse = CoreUser;

export type GetUsersMeError = unknown;

export type PatchUsersMeData = {
  body: CoreUserUpdate;
};

export type PatchUsersMeResponse = void;

export type PatchUsersMeError = unknown;

export type PostUsersCreateData = {
  body: CoreUserCreateRequest;
};

export type PostUsersCreateResponse = app__core__standard_responses__Result;

export type PostUsersCreateError = unknown;

export type PostUsersBatchCreationData = {
  body: Array<CoreBatchUserCreateRequest>;
};

export type PostUsersBatchCreationResponse = BatchResult;

export type PostUsersBatchCreationError = unknown;

export type PostUsersActivateData = {
  body: CoreUserActivateRequest;
};

export type PostUsersActivateResponse = app__core__standard_responses__Result;

export type PostUsersActivateError = unknown;

export type PostUsersMakeAdminResponse = app__core__standard_responses__Result;

export type PostUsersMakeAdminError = unknown;

export type PostUsersRecoverData = {
  body: Body_recover_user_users_recover_post;
};

export type PostUsersRecoverResponse = app__core__standard_responses__Result;

export type PostUsersRecoverError = unknown;

export type PostUsersResetPasswordData = {
  body: ResetPasswordRequest;
};

export type PostUsersResetPasswordResponse =
  app__core__standard_responses__Result;

export type PostUsersResetPasswordError = unknown;

export type PostUsersMigrateMailData = {
  body: MailMigrationRequest;
};

export type PostUsersMigrateMailResponse = void;

export type PostUsersMigrateMailError = unknown;

export type GetUsersMigrateMailConfirmData = {
  query: {
    token: string;
  };
};

export type GetUsersMigrateMailConfirmResponse = unknown;

export type GetUsersMigrateMailConfirmError = unknown;

export type PostUsersChangePasswordData = {
  body: ChangePasswordRequest;
};

export type PostUsersChangePasswordResponse =
  app__core__standard_responses__Result;

export type PostUsersChangePasswordError = unknown;

export type GetUsersUserIdData = {
  path: {
    user_id: string;
  };
};

export type GetUsersUserIdResponse = CoreUser;

export type GetUsersUserIdError = unknown;

export type PatchUsersUserIdData = {
  body: CoreUserUpdateAdmin;
  path: {
    user_id: string;
  };
};

export type PatchUsersUserIdResponse = void;

export type PatchUsersUserIdError = unknown;

export type PostUsersMeAskDeletionResponse = void;

export type PostUsersMeAskDeletionError = unknown;

export type GetUsersMeProfilePictureResponse = unknown;

export type GetUsersMeProfilePictureError = unknown;

export type PostUsersMeProfilePictureData = unknown;

export type PostUsersMeProfilePictureResponse =
  app__core__standard_responses__Result;

export type PostUsersMeProfilePictureError = unknown;

export type GetUsersUserIdProfilePictureData = {
  path: {
    user_id: string;
  };
};

export type GetUsersUserIdProfilePictureResponse = unknown;

export type GetUsersUserIdProfilePictureError = unknown;

export type GetAdvertAdvertisersResponse = Array<AdvertiserComplete>;

export type GetAdvertAdvertisersError = unknown;

export type PostAdvertAdvertisersData = {
  body: AdvertiserBase;
};

export type PostAdvertAdvertisersResponse = AdvertiserComplete;

export type PostAdvertAdvertisersError = unknown;

export type DeleteAdvertAdvertisersAdvertiserIdData = {
  path: {
    advertiser_id: string;
  };
};

export type DeleteAdvertAdvertisersAdvertiserIdResponse = void;

export type DeleteAdvertAdvertisersAdvertiserIdError = unknown;

export type PatchAdvertAdvertisersAdvertiserIdData = {
  body: AdvertiserUpdate;
  path: {
    advertiser_id: string;
  };
};

export type PatchAdvertAdvertisersAdvertiserIdResponse = void;

export type PatchAdvertAdvertisersAdvertiserIdError = unknown;

export type GetAdvertMeAdvertisersResponse = Array<AdvertiserComplete>;

export type GetAdvertMeAdvertisersError = unknown;

export type GetAdvertAdvertsData = {
  query?: {
    advertisers?: Array<string>;
  };
};

export type GetAdvertAdvertsResponse = Array<AdvertReturnComplete>;

export type GetAdvertAdvertsError = unknown;

export type PostAdvertAdvertsData = {
  body: AdvertBase;
};

export type PostAdvertAdvertsResponse = AdvertReturnComplete;

export type PostAdvertAdvertsError = unknown;

export type GetAdvertAdvertsAdvertIdData = {
  path: {
    advert_id: string;
  };
};

export type GetAdvertAdvertsAdvertIdResponse = AdvertReturnComplete;

export type GetAdvertAdvertsAdvertIdError = unknown;

export type PatchAdvertAdvertsAdvertIdData = {
  body: AdvertUpdate;
  path: {
    advert_id: string;
  };
};

export type PatchAdvertAdvertsAdvertIdResponse = void;

export type PatchAdvertAdvertsAdvertIdError = unknown;

export type DeleteAdvertAdvertsAdvertIdData = {
  path: {
    advert_id: string;
  };
};

export type DeleteAdvertAdvertsAdvertIdResponse = void;

export type DeleteAdvertAdvertsAdvertIdError = unknown;

export type GetAdvertAdvertsAdvertIdPictureData = {
  path: {
    advert_id: string;
  };
};

export type GetAdvertAdvertsAdvertIdPictureResponse = unknown;

export type GetAdvertAdvertsAdvertIdPictureError = unknown;

export type PostAdvertAdvertsAdvertIdPictureData = {
  path: {
    advert_id: string;
  };
};

export type PostAdvertAdvertsAdvertIdPictureResponse =
  app__core__standard_responses__Result;

export type PostAdvertAdvertsAdvertIdPictureError = unknown;

export type GetAmapProductsResponse =
  Array<app__modules__amap__schemas_amap__ProductComplete>;

export type GetAmapProductsError = unknown;

export type PostAmapProductsData = {
  body: ProductSimple;
};

export type PostAmapProductsResponse =
  app__modules__amap__schemas_amap__ProductComplete;

export type PostAmapProductsError = unknown;

export type GetAmapProductsProductIdData = {
  path: {
    product_id: string;
  };
};

export type GetAmapProductsProductIdResponse =
  app__modules__amap__schemas_amap__ProductComplete;

export type GetAmapProductsProductIdError = unknown;

export type PatchAmapProductsProductIdData = {
  body: app__modules__amap__schemas_amap__ProductEdit;
  path: {
    product_id: string;
  };
};

export type PatchAmapProductsProductIdResponse = void;

export type PatchAmapProductsProductIdError = unknown;

export type DeleteAmapProductsProductIdData = {
  path: {
    product_id: string;
  };
};

export type DeleteAmapProductsProductIdResponse = void;

export type DeleteAmapProductsProductIdError = unknown;

export type GetAmapDeliveriesResponse = Array<DeliveryReturn>;

export type GetAmapDeliveriesError = unknown;

export type PostAmapDeliveriesData = {
  body: DeliveryBase;
};

export type PostAmapDeliveriesResponse = DeliveryReturn;

export type PostAmapDeliveriesError = unknown;

export type DeleteAmapDeliveriesDeliveryIdData = {
  path: {
    delivery_id: string;
  };
};

export type DeleteAmapDeliveriesDeliveryIdResponse = void;

export type DeleteAmapDeliveriesDeliveryIdError = unknown;

export type PatchAmapDeliveriesDeliveryIdData = {
  body: DeliveryUpdate;
  path: {
    delivery_id: string;
  };
};

export type PatchAmapDeliveriesDeliveryIdResponse = void;

export type PatchAmapDeliveriesDeliveryIdError = unknown;

export type PostAmapDeliveriesDeliveryIdProductsData = {
  body: DeliveryProductsUpdate;
  path: {
    delivery_id: string;
  };
};

export type PostAmapDeliveriesDeliveryIdProductsResponse = unknown;

export type PostAmapDeliveriesDeliveryIdProductsError = unknown;

export type DeleteAmapDeliveriesDeliveryIdProductsData = {
  body: DeliveryProductsUpdate;
  path: {
    delivery_id: string;
  };
};

export type DeleteAmapDeliveriesDeliveryIdProductsResponse = void;

export type DeleteAmapDeliveriesDeliveryIdProductsError = unknown;

export type GetAmapDeliveriesDeliveryIdOrdersData = {
  path: {
    delivery_id: string;
  };
};

export type GetAmapDeliveriesDeliveryIdOrdersResponse = Array<OrderReturn>;

export type GetAmapDeliveriesDeliveryIdOrdersError = unknown;

export type GetAmapOrdersOrderIdData = {
  path: {
    order_id: string;
  };
};

export type GetAmapOrdersOrderIdResponse = OrderReturn;

export type GetAmapOrdersOrderIdError = unknown;

export type PatchAmapOrdersOrderIdData = {
  body: OrderEdit;
  path: {
    order_id: string;
  };
};

export type PatchAmapOrdersOrderIdResponse = void;

export type PatchAmapOrdersOrderIdError = unknown;

export type DeleteAmapOrdersOrderIdData = {
  path: {
    order_id: string;
  };
};

export type DeleteAmapOrdersOrderIdResponse = void;

export type DeleteAmapOrdersOrderIdError = unknown;

export type PostAmapOrdersData = {
  body: OrderBase;
};

export type PostAmapOrdersResponse = OrderReturn;

export type PostAmapOrdersError = unknown;

export type PostAmapDeliveriesDeliveryIdOpenorderingData = {
  path: {
    delivery_id: string;
  };
};

export type PostAmapDeliveriesDeliveryIdOpenorderingResponse = void;

export type PostAmapDeliveriesDeliveryIdOpenorderingError = unknown;

export type PostAmapDeliveriesDeliveryIdLockData = {
  path: {
    delivery_id: string;
  };
};

export type PostAmapDeliveriesDeliveryIdLockResponse = void;

export type PostAmapDeliveriesDeliveryIdLockError = unknown;

export type PostAmapDeliveriesDeliveryIdDeliveredData = {
  path: {
    delivery_id: string;
  };
};

export type PostAmapDeliveriesDeliveryIdDeliveredResponse = void;

export type PostAmapDeliveriesDeliveryIdDeliveredError = unknown;

export type PostAmapDeliveriesDeliveryIdArchiveData = {
  path: {
    delivery_id: string;
  };
};

export type PostAmapDeliveriesDeliveryIdArchiveResponse = void;

export type PostAmapDeliveriesDeliveryIdArchiveError = unknown;

export type GetAmapUsersCashResponse = Array<CashComplete>;

export type GetAmapUsersCashError = unknown;

export type GetAmapUsersUserIdCashData = {
  path: {
    user_id: string;
  };
};

export type GetAmapUsersUserIdCashResponse = CashComplete;

export type GetAmapUsersUserIdCashError = unknown;

export type PostAmapUsersUserIdCashData = {
  body: CashEdit;
  path: {
    user_id: string;
  };
};

export type PostAmapUsersUserIdCashResponse = CashComplete;

export type PostAmapUsersUserIdCashError = unknown;

export type PatchAmapUsersUserIdCashData = {
  body: CashEdit;
  path: {
    user_id: string;
  };
};

export type PatchAmapUsersUserIdCashResponse = void;

export type PatchAmapUsersUserIdCashError = unknown;

export type GetAmapUsersUserIdOrdersData = {
  path: {
    user_id: string;
  };
};

export type GetAmapUsersUserIdOrdersResponse = Array<OrderReturn>;

export type GetAmapUsersUserIdOrdersError = unknown;

export type GetAmapInformationResponse = Information;

export type GetAmapInformationError = unknown;

export type PatchAmapInformationData = {
  body: InformationEdit;
};

export type PatchAmapInformationResponse = void;

export type PatchAmapInformationError = unknown;

export type GetBookingManagersResponse = Array<Manager>;

export type GetBookingManagersError = unknown;

export type PostBookingManagersData = {
  body: ManagerBase;
};

export type PostBookingManagersResponse = Manager;

export type PostBookingManagersError = unknown;

export type PatchBookingManagersManagerIdData = {
  body: ManagerUpdate;
  path: {
    manager_id: string;
  };
};

export type PatchBookingManagersManagerIdResponse = void;

export type PatchBookingManagersManagerIdError = unknown;

export type DeleteBookingManagersManagerIdData = {
  path: {
    manager_id: string;
  };
};

export type DeleteBookingManagersManagerIdResponse = void;

export type DeleteBookingManagersManagerIdError = unknown;

export type GetBookingManagersUsersMeResponse = Array<Manager>;

export type GetBookingManagersUsersMeError = unknown;

export type GetBookingBookingsUsersMeManageResponse =
  Array<BookingReturnApplicant>;

export type GetBookingBookingsUsersMeManageError = unknown;

export type GetBookingBookingsConfirmedUsersMeManageResponse =
  Array<BookingReturnApplicant>;

export type GetBookingBookingsConfirmedUsersMeManageError = unknown;

export type GetBookingBookingsConfirmedResponse =
  Array<BookingReturnSimpleApplicant>;

export type GetBookingBookingsConfirmedError = unknown;

export type GetBookingBookingsUsersMeResponse = Array<BookingReturn>;

export type GetBookingBookingsUsersMeError = unknown;

export type PostBookingBookingsData = {
  body: BookingBase;
};

export type PostBookingBookingsResponse = BookingReturn;

export type PostBookingBookingsError = unknown;

export type PatchBookingBookingsBookingIdData = {
  body: BookingEdit;
  path: {
    booking_id: string;
  };
};

export type PatchBookingBookingsBookingIdResponse = void;

export type PatchBookingBookingsBookingIdError = unknown;

export type DeleteBookingBookingsBookingIdData = {
  path: {
    booking_id: string;
  };
};

export type DeleteBookingBookingsBookingIdResponse = void;

export type DeleteBookingBookingsBookingIdError = unknown;

export type PatchBookingBookingsBookingIdReplyDecisionData = {
  path: {
    booking_id: string;
    decision: Decision;
  };
};

export type PatchBookingBookingsBookingIdReplyDecisionResponse = void;

export type PatchBookingBookingsBookingIdReplyDecisionError = unknown;

export type GetBookingRoomsResponse = Array<RoomComplete>;

export type GetBookingRoomsError = unknown;

export type PostBookingRoomsData = {
  body: RoomBase;
};

export type PostBookingRoomsResponse = RoomComplete;

export type PostBookingRoomsError = unknown;

export type PatchBookingRoomsRoomIdData = {
  body: RoomBase;
  path: {
    room_id: string;
  };
};

export type PatchBookingRoomsRoomIdResponse = void;

export type PatchBookingRoomsRoomIdError = unknown;

export type DeleteBookingRoomsRoomIdData = {
  path: {
    room_id: string;
  };
};

export type DeleteBookingRoomsRoomIdResponse = void;

export type DeleteBookingRoomsRoomIdError = unknown;

export type GetCalendarEventsResponse = Array<EventReturn>;

export type GetCalendarEventsError = unknown;

export type PostCalendarEventsData = {
  body: EventBase;
};

export type PostCalendarEventsResponse = EventReturn;

export type PostCalendarEventsError = unknown;

export type GetCalendarEventsConfirmedResponse = Array<EventComplete>;

export type GetCalendarEventsConfirmedError = unknown;

export type GetCalendarEventsUserApplicantIdData = {
  path: {
    applicant_id: string;
  };
};

export type GetCalendarEventsUserApplicantIdResponse = Array<EventReturn>;

export type GetCalendarEventsUserApplicantIdError = unknown;

export type GetCalendarEventsEventIdData = {
  path: {
    event_id: string;
  };
};

export type GetCalendarEventsEventIdResponse = EventComplete;

export type GetCalendarEventsEventIdError = unknown;

export type PatchCalendarEventsEventIdData = {
  body: EventEdit;
  path: {
    event_id: string;
  };
};

export type PatchCalendarEventsEventIdResponse = void;

export type PatchCalendarEventsEventIdError = unknown;

export type DeleteCalendarEventsEventIdData = {
  path: {
    event_id: unknown;
  };
};

export type DeleteCalendarEventsEventIdResponse = void;

export type DeleteCalendarEventsEventIdError = unknown;

export type GetCalendarEventsEventIdApplicantData = {
  path: {
    event_id: string;
  };
};

export type GetCalendarEventsEventIdApplicantResponse = EventApplicant;

export type GetCalendarEventsEventIdApplicantError = unknown;

export type PatchCalendarEventsEventIdReplyDecisionData = {
  path: {
    decision: Decision;
    event_id: string;
  };
};

export type PatchCalendarEventsEventIdReplyDecisionResponse = void;

export type PatchCalendarEventsEventIdReplyDecisionError = unknown;

export type PostCalendarIcalCreateResponse = void;

export type PostCalendarIcalCreateError = unknown;

export type GetCalendarIcalResponse = unknown;

export type GetCalendarIcalError = unknown;

export type GetCampaignSectionsResponse = Array<SectionComplete>;

export type GetCampaignSectionsError = unknown;

export type PostCampaignSectionsData = {
  body: SectionBase;
};

export type PostCampaignSectionsResponse = SectionComplete;

export type PostCampaignSectionsError = unknown;

export type DeleteCampaignSectionsSectionIdData = {
  path: {
    section_id: string;
  };
};

export type DeleteCampaignSectionsSectionIdResponse = void;

export type DeleteCampaignSectionsSectionIdError = unknown;

export type GetCampaignListsResponse = Array<ListReturn>;

export type GetCampaignListsError = unknown;

export type PostCampaignListsData = {
  body: ListBase;
};

export type PostCampaignListsResponse = ListReturn;

export type PostCampaignListsError = unknown;

export type DeleteCampaignListsListIdData = {
  path: {
    list_id: string;
  };
};

export type DeleteCampaignListsListIdResponse = void;

export type DeleteCampaignListsListIdError = unknown;

export type PatchCampaignListsListIdData = {
  body: ListEdit;
  path: {
    list_id: string;
  };
};

export type PatchCampaignListsListIdResponse = void;

export type PatchCampaignListsListIdError = unknown;

export type DeleteCampaignListsData = {
  query?: {
    list_type?: ListType | null;
  };
};

export type DeleteCampaignListsResponse = void;

export type DeleteCampaignListsError = unknown;

export type GetCampaignVotersResponse = Array<VoterGroup>;

export type GetCampaignVotersError = unknown;

export type PostCampaignVotersData = {
  body: VoterGroup;
};

export type PostCampaignVotersResponse = VoterGroup;

export type PostCampaignVotersError = unknown;

export type DeleteCampaignVotersResponse = void;

export type DeleteCampaignVotersError = unknown;

export type DeleteCampaignVotersGroupIdData = {
  path: {
    group_id: string;
  };
};

export type DeleteCampaignVotersGroupIdResponse = void;

export type DeleteCampaignVotersGroupIdError = unknown;

export type PostCampaignStatusOpenResponse = void;

export type PostCampaignStatusOpenError = unknown;

export type PostCampaignStatusCloseResponse = void;

export type PostCampaignStatusCloseError = unknown;

export type PostCampaignStatusCountingResponse = void;

export type PostCampaignStatusCountingError = unknown;

export type PostCampaignStatusPublishedResponse = void;

export type PostCampaignStatusPublishedError = unknown;

export type PostCampaignStatusResetResponse = void;

export type PostCampaignStatusResetError = unknown;

export type GetCampaignVotesResponse = Array<string>;

export type GetCampaignVotesError = unknown;

export type PostCampaignVotesData = {
  body: VoteBase;
};

export type PostCampaignVotesResponse = void;

export type PostCampaignVotesError = unknown;

export type GetCampaignResultsResponse =
  Array<app__modules__campaign__schemas_campaign__Result>;

export type GetCampaignResultsError = unknown;

export type GetCampaignStatusResponse = VoteStatus;

export type GetCampaignStatusError = unknown;

export type GetCampaignStatsSectionIdData = {
  path: {
    section_id: string;
  };
};

export type GetCampaignStatsSectionIdResponse = VoteStats;

export type GetCampaignStatsSectionIdError = unknown;

export type PostCampaignListsListIdLogoData = {
  path: {
    list_id: string;
  };
};

export type PostCampaignListsListIdLogoResponse =
  app__core__standard_responses__Result;

export type PostCampaignListsListIdLogoError = unknown;

export type GetCampaignListsListIdLogoData = {
  path: {
    list_id: string;
  };
};

export type GetCampaignListsListIdLogoResponse = unknown;

export type GetCampaignListsListIdLogoError = unknown;

export type GetCdrUsersResponse = Array<CdrUser>;

export type GetCdrUsersError = unknown;

export type GetCdrUsersUserIdData = {
  path: {
    user_id: string;
  };
};

export type GetCdrUsersUserIdResponse = CdrUser;

export type GetCdrUsersUserIdError = unknown;

export type GetCdrSellersResponse = Array<SellerComplete>;

export type GetCdrSellersError = unknown;

export type PostCdrSellersData = {
  body: SellerBase;
};

export type PostCdrSellersResponse = SellerComplete;

export type PostCdrSellersError = unknown;

export type GetCdrUsersMeSellersResponse = Array<SellerComplete>;

export type GetCdrUsersMeSellersError = unknown;

export type GetCdrOnlineSellersResponse = Array<SellerComplete>;

export type GetCdrOnlineSellersError = unknown;

export type GetCdrOnlineProductsResponse =
  Array<app__modules__cdr__schemas_cdr__ProductComplete>;

export type GetCdrOnlineProductsError = unknown;

export type GetCdrProductsResponse =
  Array<app__modules__cdr__schemas_cdr__ProductComplete>;

export type GetCdrProductsError = unknown;

export type PatchCdrSellersSellerIdData = {
  body: SellerEdit;
  path: {
    seller_id: string;
  };
};

export type PatchCdrSellersSellerIdResponse = void;

export type PatchCdrSellersSellerIdError = unknown;

export type DeleteCdrSellersSellerIdData = {
  path: {
    seller_id: string;
  };
};

export type DeleteCdrSellersSellerIdResponse = void;

export type DeleteCdrSellersSellerIdError = unknown;

export type GetCdrSellersSellerIdProductsData = {
  path: {
    seller_id: string;
  };
};

export type GetCdrSellersSellerIdProductsResponse =
  Array<app__modules__cdr__schemas_cdr__ProductComplete>;

export type GetCdrSellersSellerIdProductsError = unknown;

export type PostCdrSellersSellerIdProductsData = {
  body: ProductBase;
  path: {
    seller_id: string;
  };
};

export type PostCdrSellersSellerIdProductsResponse =
  app__modules__cdr__schemas_cdr__ProductComplete;

export type PostCdrSellersSellerIdProductsError = unknown;

export type GetCdrOnlineSellersSellerIdProductsData = {
  path: {
    seller_id: string;
  };
};

export type GetCdrOnlineSellersSellerIdProductsResponse =
  Array<app__modules__cdr__schemas_cdr__ProductComplete>;

export type GetCdrOnlineSellersSellerIdProductsError = unknown;

export type PatchCdrSellersSellerIdProductsProductIdData = {
  body: app__modules__cdr__schemas_cdr__ProductEdit;
  path: {
    product_id: string;
    seller_id: string;
  };
};

export type PatchCdrSellersSellerIdProductsProductIdResponse = void;

export type PatchCdrSellersSellerIdProductsProductIdError = unknown;

export type DeleteCdrSellersSellerIdProductsProductIdData = {
  path: {
    product_id: string;
    seller_id: string;
  };
};

export type DeleteCdrSellersSellerIdProductsProductIdResponse = void;

export type DeleteCdrSellersSellerIdProductsProductIdError = unknown;

export type PostCdrSellersSellerIdProductsProductIdVariantsData = {
  body: ProductVariantBase;
  path: {
    product_id: string;
    seller_id: string;
  };
};

export type PostCdrSellersSellerIdProductsProductIdVariantsResponse =
  ProductVariantComplete;

export type PostCdrSellersSellerIdProductsProductIdVariantsError = unknown;

export type PatchCdrSellersSellerIdProductsProductIdVariantsVariantIdData = {
  body: ProductVariantEdit;
  path: {
    product_id: string;
    seller_id: string;
    variant_id: string;
  };
};

export type PatchCdrSellersSellerIdProductsProductIdVariantsVariantIdResponse =
  void;

export type PatchCdrSellersSellerIdProductsProductIdVariantsVariantIdError =
  unknown;

export type DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdData = {
  path: {
    product_id: string;
    seller_id: string;
    variant_id: string;
  };
};

export type DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdResponse =
  void;

export type DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdError =
  unknown;

export type GetCdrSellersSellerIdDocumentsData = {
  path: {
    seller_id: string;
  };
};

export type GetCdrSellersSellerIdDocumentsResponse = Array<DocumentComplete>;

export type GetCdrSellersSellerIdDocumentsError = unknown;

export type PostCdrSellersSellerIdDocumentsData = {
  body: DocumentBase;
  path: {
    seller_id: string;
  };
};

export type PostCdrSellersSellerIdDocumentsResponse = DocumentComplete;

export type PostCdrSellersSellerIdDocumentsError = unknown;

export type DeleteCdrSellersSellerIdDocumentsDocumentIdData = {
  path: {
    document_id: string;
    seller_id: string;
  };
};

export type DeleteCdrSellersSellerIdDocumentsDocumentIdResponse = void;

export type DeleteCdrSellersSellerIdDocumentsDocumentIdError = unknown;

export type GetCdrUsersUserIdPurchasesData = {
  path: {
    user_id: string;
  };
};

export type GetCdrUsersUserIdPurchasesResponse = Array<PurchaseReturn>;

export type GetCdrUsersUserIdPurchasesError = unknown;

export type GetCdrMePurchasesResponse = Array<PurchaseReturn>;

export type GetCdrMePurchasesError = unknown;

export type GetCdrSellersSellerIdUsersUserIdPurchasesData = {
  path: {
    seller_id: string;
    user_id: string;
  };
};

export type GetCdrSellersSellerIdUsersUserIdPurchasesResponse =
  Array<PurchaseReturn>;

export type GetCdrSellersSellerIdUsersUserIdPurchasesError = unknown;

export type PostCdrUsersUserIdPurchasesProductVariantIdData = {
  body: PurchaseBase;
  path: {
    product_variant_id: string;
    user_id: string;
  };
};

export type PostCdrUsersUserIdPurchasesProductVariantIdResponse =
  PurchaseComplete;

export type PostCdrUsersUserIdPurchasesProductVariantIdError = unknown;

export type DeleteCdrUsersUserIdPurchasesProductVariantIdData = {
  path: {
    product_variant_id: string;
    user_id: string;
  };
};

export type DeleteCdrUsersUserIdPurchasesProductVariantIdResponse = void;

export type DeleteCdrUsersUserIdPurchasesProductVariantIdError = unknown;

export type PatchCdrUsersUserIdPurchasesProductVariantIdValidatedData = {
  path: {
    product_variant_id: string;
    user_id: string;
  };
  query: {
    validated: boolean;
  };
};

export type PatchCdrUsersUserIdPurchasesProductVariantIdValidatedResponse =
  void;

export type PatchCdrUsersUserIdPurchasesProductVariantIdValidatedError =
  unknown;

export type GetCdrUsersUserIdSignaturesData = {
  path: {
    user_id: string;
  };
};

export type GetCdrUsersUserIdSignaturesResponse = Array<SignatureComplete>;

export type GetCdrUsersUserIdSignaturesError = unknown;

export type GetCdrSellersSellerIdUsersUserIdSignaturesData = {
  path: {
    seller_id: string;
    user_id: string;
  };
};

export type GetCdrSellersSellerIdUsersUserIdSignaturesResponse =
  Array<SignatureComplete>;

export type GetCdrSellersSellerIdUsersUserIdSignaturesError = unknown;

export type PostCdrUsersUserIdSignaturesDocumentIdData = {
  body: SignatureBase;
  path: {
    document_id: string;
    user_id: string;
  };
};

export type PostCdrUsersUserIdSignaturesDocumentIdResponse = SignatureComplete;

export type PostCdrUsersUserIdSignaturesDocumentIdError = unknown;

export type DeleteCdrUsersUserIdSignaturesDocumentIdData = {
  path: {
    document_id: string;
    user_id: string;
  };
};

export type DeleteCdrUsersUserIdSignaturesDocumentIdResponse = void;

export type DeleteCdrUsersUserIdSignaturesDocumentIdError = unknown;

export type GetCdrCurriculumsResponse = Array<CurriculumComplete>;

export type GetCdrCurriculumsError = unknown;

export type PostCdrCurriculumsData = {
  body: CurriculumBase;
};

export type PostCdrCurriculumsResponse = CurriculumComplete;

export type PostCdrCurriculumsError = unknown;

export type DeleteCdrCurriculumsCurriculumIdData = {
  path: {
    curriculum_id: string;
  };
};

export type DeleteCdrCurriculumsCurriculumIdResponse = void;

export type DeleteCdrCurriculumsCurriculumIdError = unknown;

export type PostCdrUsersUserIdCurriculumsCurriculumIdData = {
  path: {
    curriculum_id: string;
    user_id: string;
  };
};

export type PostCdrUsersUserIdCurriculumsCurriculumIdResponse = unknown;

export type PostCdrUsersUserIdCurriculumsCurriculumIdError = unknown;

export type PatchCdrUsersUserIdCurriculumsCurriculumIdData = {
  path: {
    curriculum_id: string;
    user_id: string;
  };
};

export type PatchCdrUsersUserIdCurriculumsCurriculumIdResponse = void;

export type PatchCdrUsersUserIdCurriculumsCurriculumIdError = unknown;

export type DeleteCdrUsersUserIdCurriculumsCurriculumIdData = {
  path: {
    curriculum_id: string;
    user_id: string;
  };
};

export type DeleteCdrUsersUserIdCurriculumsCurriculumIdResponse = void;

export type DeleteCdrUsersUserIdCurriculumsCurriculumIdError = unknown;

export type GetCdrUsersUserIdPaymentsData = {
  path: {
    user_id: string;
  };
};

export type GetCdrUsersUserIdPaymentsResponse = Array<PaymentComplete>;

export type GetCdrUsersUserIdPaymentsError = unknown;

export type PostCdrUsersUserIdPaymentsData = {
  body: PaymentBase;
  path: {
    user_id: string;
  };
};

export type PostCdrUsersUserIdPaymentsResponse = PaymentComplete;

export type PostCdrUsersUserIdPaymentsError = unknown;

export type DeleteCdrUsersUserIdPaymentsPaymentIdData = {
  path: {
    payment_id: string;
    user_id: string;
  };
};

export type DeleteCdrUsersUserIdPaymentsPaymentIdResponse = void;

export type DeleteCdrUsersUserIdPaymentsPaymentIdError = unknown;

export type GetCdrPayAmountData = {
  path: {
    amount: number;
  };
};

export type GetCdrPayAmountResponse = PaymentUrl;

export type GetCdrPayAmountError = unknown;

export type GetCdrUsersUserIdMembershipsData = {
  path: {
    user_id: string;
  };
};

export type GetCdrUsersUserIdMembershipsResponse =
  Array<app__modules__cdr__schemas_cdr__MembershipComplete>;

export type GetCdrUsersUserIdMembershipsError = unknown;

export type PostCdrUsersUserIdMembershipsData = {
  body: app__modules__cdr__schemas_cdr__MembershipBase;
  path: {
    user_id: string;
  };
};

export type PostCdrUsersUserIdMembershipsResponse =
  app__modules__cdr__schemas_cdr__MembershipComplete;

export type PostCdrUsersUserIdMembershipsError = unknown;

export type DeleteCdrUsersUserIdMembershipsMembershipIdData = {
  path: {
    membership_id: string;
    user_id: string;
  };
};

export type DeleteCdrUsersUserIdMembershipsMembershipIdResponse = void;

export type DeleteCdrUsersUserIdMembershipsMembershipIdError = unknown;

export type GetCdrStatusResponse = Status;

export type GetCdrStatusError = unknown;

export type PatchCdrStatusData = {
  body: Status;
};

export type PatchCdrStatusResponse = void;

export type PatchCdrStatusError = unknown;

export type GetCdrUsersUserIdTicketsData = {
  path: {
    user_id: string;
  };
};

export type GetCdrUsersUserIdTicketsResponse = Array<Ticket>;

export type GetCdrUsersUserIdTicketsError = unknown;

export type GetCdrUsersMeTicketsTicketIdSecretData = {
  path: {
    ticket_id: string;
  };
};

export type GetCdrUsersMeTicketsTicketIdSecretResponse = TicketSecret;

export type GetCdrUsersMeTicketsTicketIdSecretError = unknown;

export type GetCdrProductsProductIdTicketsSecretData = {
  path: {
    product_id: string;
    secret: string;
  };
};

export type GetCdrProductsProductIdTicketsSecretResponse = Array<Ticket>;

export type GetCdrProductsProductIdTicketsSecretError = unknown;

export type PatchCdrProductsProductIdTicketsSecretData = {
  body: TicketScan;
  path: {
    product_id: string;
    secret: string;
  };
};

export type PatchCdrProductsProductIdTicketsSecretResponse = void;

export type PatchCdrProductsProductIdTicketsSecretError = unknown;

export type GetCdrWsSendResponse = unknown;

export type GetCdrWsSendError = unknown;

export type GetCinemaThemoviedbThemoviedbIdData = {
  path: {
    themoviedb_id: string;
  };
};

export type GetCinemaThemoviedbThemoviedbIdResponse = TheMovieDB;

export type GetCinemaThemoviedbThemoviedbIdError = unknown;

export type GetCinemaSessionsResponse = Array<CineSessionComplete>;

export type GetCinemaSessionsError = unknown;

export type PostCinemaSessionsData = {
  body: CineSessionBase;
};

export type PostCinemaSessionsResponse = CineSessionComplete;

export type PostCinemaSessionsError = unknown;

export type PatchCinemaSessionsSessionIdData = {
  body: CineSessionUpdate;
  path: {
    session_id: string;
  };
};

export type PatchCinemaSessionsSessionIdResponse = unknown;

export type PatchCinemaSessionsSessionIdError = unknown;

export type DeleteCinemaSessionsSessionIdData = {
  path: {
    session_id: string;
  };
};

export type DeleteCinemaSessionsSessionIdResponse = void;

export type DeleteCinemaSessionsSessionIdError = unknown;

export type PostCinemaSessionsSessionIdPosterData = {
  path: {
    session_id: string;
  };
};

export type PostCinemaSessionsSessionIdPosterResponse =
  app__core__standard_responses__Result;

export type PostCinemaSessionsSessionIdPosterError = unknown;

export type GetCinemaSessionsSessionIdPosterData = {
  path: {
    session_id: string;
  };
};

export type GetCinemaSessionsSessionIdPosterResponse = unknown;

export type GetCinemaSessionsSessionIdPosterError = unknown;

export type GetFlappybirdScoresResponse = Array<FlappyBirdScoreInDB>;

export type GetFlappybirdScoresError = unknown;

export type PostFlappybirdScoresData = {
  body: FlappyBirdScoreBase;
};

export type PostFlappybirdScoresResponse = FlappyBirdScoreBase;

export type PostFlappybirdScoresError = unknown;

export type GetFlappybirdScoresMeResponse = FlappyBirdScoreCompleteFeedBack;

export type GetFlappybirdScoresMeError = unknown;

export type GetLoansLoanersResponse = Array<Loaner>;

export type GetLoansLoanersError = unknown;

export type PostLoansLoanersData = {
  body: LoanerBase;
};

export type PostLoansLoanersResponse = Loaner;

export type PostLoansLoanersError = unknown;

export type DeleteLoansLoanersLoanerIdData = {
  path: {
    loaner_id: string;
  };
};

export type DeleteLoansLoanersLoanerIdResponse = void;

export type DeleteLoansLoanersLoanerIdError = unknown;

export type PatchLoansLoanersLoanerIdData = {
  body: LoanerUpdate;
  path: {
    loaner_id: string;
  };
};

export type PatchLoansLoanersLoanerIdResponse = void;

export type PatchLoansLoanersLoanerIdError = unknown;

export type GetLoansLoanersLoanerIdLoansData = {
  path: {
    loaner_id: string;
  };
  query?: {
    returned?: boolean | null;
  };
};

export type GetLoansLoanersLoanerIdLoansResponse = Array<Loan>;

export type GetLoansLoanersLoanerIdLoansError = unknown;

export type GetLoansLoanersLoanerIdItemsData = {
  path: {
    loaner_id: string;
  };
};

export type GetLoansLoanersLoanerIdItemsResponse = Array<Item>;

export type GetLoansLoanersLoanerIdItemsError = unknown;

export type PostLoansLoanersLoanerIdItemsData = {
  body: ItemBase;
  path: {
    loaner_id: string;
  };
};

export type PostLoansLoanersLoanerIdItemsResponse = Item;

export type PostLoansLoanersLoanerIdItemsError = unknown;

export type PatchLoansLoanersLoanerIdItemsItemIdData = {
  body: ItemUpdate;
  path: {
    item_id: string;
    loaner_id: string;
  };
};

export type PatchLoansLoanersLoanerIdItemsItemIdResponse = void;

export type PatchLoansLoanersLoanerIdItemsItemIdError = unknown;

export type DeleteLoansLoanersLoanerIdItemsItemIdData = {
  path: {
    item_id: string;
    loaner_id: string;
  };
};

export type DeleteLoansLoanersLoanerIdItemsItemIdResponse = void;

export type DeleteLoansLoanersLoanerIdItemsItemIdError = unknown;

export type GetLoansUsersMeData = {
  query?: {
    returned?: boolean | null;
  };
};

export type GetLoansUsersMeResponse = Array<Loan>;

export type GetLoansUsersMeError = unknown;

export type GetLoansUsersMeLoanersResponse = Array<Loaner>;

export type GetLoansUsersMeLoanersError = unknown;

export type PostLoansData = {
  body: LoanCreation;
};

export type PostLoansResponse = Loan;

export type PostLoansError = unknown;

export type PatchLoansLoanIdData = {
  body: LoanUpdate;
  path: {
    loan_id: string;
  };
};

export type PatchLoansLoanIdResponse = void;

export type PatchLoansLoanIdError = unknown;

export type DeleteLoansLoanIdData = {
  path: {
    loan_id: string;
  };
};

export type DeleteLoansLoanIdResponse = void;

export type DeleteLoansLoanIdError = unknown;

export type PostLoansLoanIdReturnData = {
  path: {
    loan_id: string;
  };
};

export type PostLoansLoanIdReturnResponse = void;

export type PostLoansLoanIdReturnError = unknown;

export type PostLoansLoanIdExtendData = {
  body: LoanExtend;
  path: {
    loan_id: string;
  };
};

export type PostLoansLoanIdExtendResponse = void;

export type PostLoansLoanIdExtendError = unknown;

export type GetPhPaperIdPdfData = {
  path: {
    paper_id: string;
  };
};

export type GetPhPaperIdPdfResponse = unknown;

export type GetPhPaperIdPdfError = unknown;

export type PostPhPaperIdPdfData = {
  path: {
    paper_id: string;
  };
};

export type PostPhPaperIdPdfResponse = unknown;

export type PostPhPaperIdPdfError = unknown;

export type GetPhResponse = Array<PaperComplete>;

export type GetPhError = unknown;

export type PostPhData = {
  body: PaperBase;
};

export type PostPhResponse = PaperComplete;

export type PostPhError = unknown;

export type GetPhAdminResponse = Array<PaperComplete>;

export type GetPhAdminError = unknown;

export type GetPhPaperIdCoverData = {
  path: {
    paper_id: string;
  };
};

export type GetPhPaperIdCoverResponse = unknown;

export type GetPhPaperIdCoverError = unknown;

export type PatchPhPaperIdData = {
  body: PaperUpdate;
  path: {
    paper_id: string;
  };
};

export type PatchPhPaperIdResponse = void;

export type PatchPhPaperIdError = unknown;

export type DeletePhPaperIdData = {
  path: {
    paper_id: string;
  };
};

export type DeletePhPaperIdResponse = void;

export type DeletePhPaperIdError = unknown;

export type GetPhonebookAssociationsResponse = Array<AssociationComplete>;

export type GetPhonebookAssociationsError = unknown;

export type PostPhonebookAssociationsData = {
  body: AssociationBase;
};

export type PostPhonebookAssociationsResponse = AssociationComplete;

export type PostPhonebookAssociationsError = unknown;

export type GetPhonebookRoletagsResponse = RoleTagsReturn;

export type GetPhonebookRoletagsError = unknown;

export type GetPhonebookAssociationsKindsResponse = KindsReturn;

export type GetPhonebookAssociationsKindsError = unknown;

export type PatchPhonebookAssociationsAssociationIdData = {
  body: AssociationEdit;
  path: {
    association_id: string;
  };
};

export type PatchPhonebookAssociationsAssociationIdResponse = void;

export type PatchPhonebookAssociationsAssociationIdError = unknown;

export type DeletePhonebookAssociationsAssociationIdData = {
  path: {
    association_id: string;
  };
};

export type DeletePhonebookAssociationsAssociationIdResponse = void;

export type DeletePhonebookAssociationsAssociationIdError = unknown;

export type GetPhonebookAssociationsAssociationIdMembersData = {
  path: {
    association_id: string;
  };
};

export type GetPhonebookAssociationsAssociationIdMembersResponse =
  Array<MemberComplete>;

export type GetPhonebookAssociationsAssociationIdMembersError = unknown;

export type GetPhonebookAssociationsAssociationIdMembersMandateYearData = {
  path: {
    association_id: string;
    mandate_year: number;
  };
};

export type GetPhonebookAssociationsAssociationIdMembersMandateYearResponse =
  Array<MemberComplete>;

export type GetPhonebookAssociationsAssociationIdMembersMandateYearError =
  unknown;

export type GetPhonebookMemberUserIdData = {
  path: {
    user_id: string;
  };
};

export type GetPhonebookMemberUserIdResponse = MemberComplete;

export type GetPhonebookMemberUserIdError = unknown;

export type PostPhonebookAssociationsMembershipsData = {
  body: app__modules__phonebook__schemas_phonebook__MembershipBase;
};

export type PostPhonebookAssociationsMembershipsResponse =
  app__modules__phonebook__schemas_phonebook__MembershipComplete;

export type PostPhonebookAssociationsMembershipsError = unknown;

export type PatchPhonebookAssociationsMembershipsMembershipIdData = {
  body: MembershipEdit;
  path: {
    membership_id: string;
  };
};

export type PatchPhonebookAssociationsMembershipsMembershipIdResponse = void;

export type PatchPhonebookAssociationsMembershipsMembershipIdError = unknown;

export type DeletePhonebookAssociationsMembershipsMembershipIdData = {
  path: {
    membership_id: string;
  };
};

export type DeletePhonebookAssociationsMembershipsMembershipIdResponse = void;

export type DeletePhonebookAssociationsMembershipsMembershipIdError = unknown;

export type PostPhonebookAssociationsAssociationIdPictureData = {
  path: {
    association_id: string;
  };
};

export type PostPhonebookAssociationsAssociationIdPictureResponse =
  app__core__standard_responses__Result;

export type PostPhonebookAssociationsAssociationIdPictureError = unknown;

export type GetPhonebookAssociationsAssociationIdPictureData = {
  path: {
    association_id: string;
  };
};

export type GetPhonebookAssociationsAssociationIdPictureResponse = unknown;

export type GetPhonebookAssociationsAssociationIdPictureError = unknown;

export type GetTombolaRafflesResponse = Array<RaffleComplete>;

export type GetTombolaRafflesError = unknown;

export type PostTombolaRafflesData = {
  body: RaffleBase;
};

export type PostTombolaRafflesResponse = RaffleComplete;

export type PostTombolaRafflesError = unknown;

export type PatchTombolaRafflesRaffleIdData = {
  body: RaffleEdit;
  path: {
    raffle_id: string;
  };
};

export type PatchTombolaRafflesRaffleIdResponse = void;

export type PatchTombolaRafflesRaffleIdError = unknown;

export type DeleteTombolaRafflesRaffleIdData = {
  path: {
    raffle_id: string;
  };
};

export type DeleteTombolaRafflesRaffleIdResponse = void;

export type DeleteTombolaRafflesRaffleIdError = unknown;

export type GetTombolaGroupGroupIdRafflesData = {
  path: {
    group_id: string;
  };
};

export type GetTombolaGroupGroupIdRafflesResponse = Array<RaffleComplete>;

export type GetTombolaGroupGroupIdRafflesError = unknown;

export type GetTombolaRafflesRaffleIdStatsData = {
  path: {
    raffle_id: string;
  };
};

export type GetTombolaRafflesRaffleIdStatsResponse = RaffleStats;

export type GetTombolaRafflesRaffleIdStatsError = unknown;

export type PostTombolaRafflesRaffleIdLogoData = {
  path: {
    raffle_id: string;
  };
};

export type PostTombolaRafflesRaffleIdLogoResponse =
  app__core__standard_responses__Result;

export type PostTombolaRafflesRaffleIdLogoError = unknown;

export type GetTombolaRafflesRaffleIdLogoData = {
  path: {
    raffle_id: string;
  };
};

export type GetTombolaRafflesRaffleIdLogoResponse = unknown;

export type GetTombolaRafflesRaffleIdLogoError = unknown;

export type GetTombolaPackTicketsResponse = Array<PackTicketSimple>;

export type GetTombolaPackTicketsError = unknown;

export type PostTombolaPackTicketsData = {
  body: PackTicketBase;
};

export type PostTombolaPackTicketsResponse = PackTicketSimple;

export type PostTombolaPackTicketsError = unknown;

export type PatchTombolaPackTicketsPackticketIdData = {
  body: PackTicketEdit;
  path: {
    packticket_id: string;
  };
};

export type PatchTombolaPackTicketsPackticketIdResponse = void;

export type PatchTombolaPackTicketsPackticketIdError = unknown;

export type DeleteTombolaPackTicketsPackticketIdData = {
  path: {
    packticket_id: string;
  };
};

export type DeleteTombolaPackTicketsPackticketIdResponse = void;

export type DeleteTombolaPackTicketsPackticketIdError = unknown;

export type GetTombolaRafflesRaffleIdPackTicketsData = {
  path: {
    raffle_id: string;
  };
};

export type GetTombolaRafflesRaffleIdPackTicketsResponse =
  Array<PackTicketSimple>;

export type GetTombolaRafflesRaffleIdPackTicketsError = unknown;

export type GetTombolaTicketsResponse = Array<TicketSimple>;

export type GetTombolaTicketsError = unknown;

export type PostTombolaTicketsBuyPackIdData = {
  path: {
    pack_id: string;
  };
};

export type PostTombolaTicketsBuyPackIdResponse = Array<TicketComplete>;

export type PostTombolaTicketsBuyPackIdError = unknown;

export type GetTombolaUsersUserIdTicketsData = {
  path: {
    user_id: string;
  };
};

export type GetTombolaUsersUserIdTicketsResponse = Array<TicketComplete>;

export type GetTombolaUsersUserIdTicketsError = unknown;

export type GetTombolaRafflesRaffleIdTicketsData = {
  path: {
    raffle_id: string;
  };
};

export type GetTombolaRafflesRaffleIdTicketsResponse = Array<TicketComplete>;

export type GetTombolaRafflesRaffleIdTicketsError = unknown;

export type GetTombolaPrizesResponse = Array<PrizeSimple>;

export type GetTombolaPrizesError = unknown;

export type PostTombolaPrizesData = {
  body: PrizeBase;
};

export type PostTombolaPrizesResponse = PrizeSimple;

export type PostTombolaPrizesError = unknown;

export type PatchTombolaPrizesPrizeIdData = {
  body: PrizeEdit;
  path: {
    prize_id: string;
  };
};

export type PatchTombolaPrizesPrizeIdResponse = void;

export type PatchTombolaPrizesPrizeIdError = unknown;

export type DeleteTombolaPrizesPrizeIdData = {
  path: {
    prize_id: string;
  };
};

export type DeleteTombolaPrizesPrizeIdResponse = void;

export type DeleteTombolaPrizesPrizeIdError = unknown;

export type GetTombolaRafflesRaffleIdPrizesData = {
  path: {
    raffle_id: string;
  };
};

export type GetTombolaRafflesRaffleIdPrizesResponse = Array<PrizeSimple>;

export type GetTombolaRafflesRaffleIdPrizesError = unknown;

export type PostTombolaPrizesPrizeIdPictureData = {
  path: {
    prize_id: string;
  };
};

export type PostTombolaPrizesPrizeIdPictureResponse =
  app__core__standard_responses__Result;

export type PostTombolaPrizesPrizeIdPictureError = unknown;

export type GetTombolaPrizesPrizeIdPictureData = {
  path: {
    prize_id: string;
  };
};

export type GetTombolaPrizesPrizeIdPictureResponse = unknown;

export type GetTombolaPrizesPrizeIdPictureError = unknown;

export type GetTombolaUsersCashResponse = Array<CashComplete>;

export type GetTombolaUsersCashError = unknown;

export type GetTombolaUsersUserIdCashData = {
  path: {
    user_id: string;
  };
};

export type GetTombolaUsersUserIdCashResponse = CashComplete;

export type GetTombolaUsersUserIdCashError = unknown;

export type PostTombolaUsersUserIdCashData = {
  body: CashEdit;
  path: {
    user_id: string;
  };
};

export type PostTombolaUsersUserIdCashResponse = CashComplete;

export type PostTombolaUsersUserIdCashError = unknown;

export type PatchTombolaUsersUserIdCashData = {
  body: CashEdit;
  path: {
    user_id: string;
  };
};

export type PatchTombolaUsersUserIdCashResponse = void;

export type PatchTombolaUsersUserIdCashError = unknown;

export type PostTombolaPrizesPrizeIdDrawData = {
  path: {
    prize_id: string;
  };
};

export type PostTombolaPrizesPrizeIdDrawResponse = Array<TicketComplete>;

export type PostTombolaPrizesPrizeIdDrawError = unknown;

export type PatchTombolaRafflesRaffleIdOpenData = {
  path: {
    raffle_id: string;
  };
};

export type PatchTombolaRafflesRaffleIdOpenResponse = void;

export type PatchTombolaRafflesRaffleIdOpenError = unknown;

export type PatchTombolaRafflesRaffleIdLockData = {
  path: {
    raffle_id: string;
  };
};

export type PatchTombolaRafflesRaffleIdLockResponse = void;

export type PatchTombolaRafflesRaffleIdLockError = unknown;

export type GetRecommendationRecommendationsResponse = Array<Recommendation>;

export type GetRecommendationRecommendationsError = unknown;

export type PostRecommendationRecommendationsData = {
  body: RecommendationBase;
};

export type PostRecommendationRecommendationsResponse = Recommendation;

export type PostRecommendationRecommendationsError = unknown;

export type PatchRecommendationRecommendationsRecommendationIdData = {
  body: RecommendationEdit;
  path: {
    recommendation_id: string;
  };
};

export type PatchRecommendationRecommendationsRecommendationIdResponse = void;

export type PatchRecommendationRecommendationsRecommendationIdError = unknown;

export type DeleteRecommendationRecommendationsRecommendationIdData = {
  path: {
    recommendation_id: string;
  };
};

export type DeleteRecommendationRecommendationsRecommendationIdResponse = void;

export type DeleteRecommendationRecommendationsRecommendationIdError = unknown;

export type GetRecommendationRecommendationsRecommendationIdPictureData = {
  path: {
    recommendation_id: string;
  };
};

export type GetRecommendationRecommendationsRecommendationIdPictureResponse =
  unknown;

export type GetRecommendationRecommendationsRecommendationIdPictureError =
  unknown;

export type PostRecommendationRecommendationsRecommendationIdPictureData = {
  path: {
    recommendation_id: string;
  };
};

export type PostRecommendationRecommendationsRecommendationIdPictureResponse =
  app__core__standard_responses__Result;

export type PostRecommendationRecommendationsRecommendationIdPictureError =
  unknown;

export type $OpenApiTs = {
  "/auth/simple_token": {
    post: {
      req: PostAuthSimpleTokenData;
      res: {
        /**
         * Successful Response
         */
        "200": AccessToken;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/auth/authorize": {
    get: {
      req: GetAuthAuthorizeData;
      res: {
        /**
         * Successful Response
         */
        "200": string;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    post: {
      req: PostAuthAuthorizeData;
      res: {
        /**
         * Successful Response
         */
        "200": string;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/auth/authorization-flow/authorize-validation": {
    post: {
      req: PostAuthAuthorizationFlowAuthorizeValidationData;
      res: {
        /**
         * Successful Response
         */
        "307": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/auth/token": {
    post: {
      req: PostAuthTokenData;
      res: {
        /**
         * Successful Response
         */
        "200": TokenResponse;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/auth/introspect": {
    post: {
      req: PostAuthIntrospectData;
      res: {
        /**
         * Successful Response
         */
        "200": IntrospectTokenResponse;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/auth/userinfo": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/oidc/authorization-flow/jwks_uri": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/.well-known/oauth-authorization-server": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/.well-known/openid-configuration": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/information": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": CoreInformation;
      };
    };
  };
  "/privacy": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/terms-and-conditions": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/support": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/security.txt": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/.well-known/security.txt": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/robots.txt": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/style/{file}.css": {
    get: {
      req: GetStyleFileCssData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/favicon.ico": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/module-visibility/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<ModuleVisibility>;
      };
    };
    post: {
      req: PostModuleVisibilityData;
      res: {
        /**
         * Successful Response
         */
        "201": ModuleVisibilityCreate;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/module-visibility/me": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<string>;
      };
    };
  };
  "/module-visibility/{root}/{group_id}": {
    delete: {
      req: DeleteModuleVisibilityRootGroupIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/groups/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<CoreGroupSimple>;
      };
    };
    post: {
      req: PostGroupsData;
      res: {
        /**
         * Successful Response
         */
        "201": CoreGroupSimple;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/groups/{group_id}": {
    get: {
      req: GetGroupsGroupIdData;
      res: {
        /**
         * Successful Response
         */
        "200": CoreGroup;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchGroupsGroupIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteGroupsGroupIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/groups/membership": {
    post: {
      req: PostGroupsMembershipData;
      res: {
        /**
         * Successful Response
         */
        "201": CoreGroup;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteGroupsMembershipData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/groups/batch-membership": {
    post: {
      req: PostGroupsBatchMembershipData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteGroupsBatchMembershipData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/notification/devices": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<FirebaseDevice>;
      };
    };
    post: {
      req: PostNotificationDevicesData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/notification/devices/{firebase_token}": {
    delete: {
      req: DeleteNotificationDevicesFirebaseTokenData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/notification/messages/{firebase_token}": {
    get: {
      req: GetNotificationMessagesFirebaseTokenData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<Message>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/notification/topics/{topic_str}/subscribe": {
    post: {
      req: PostNotificationTopicsTopicStrSubscribeData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/notification/topics/{topic_str}/unsubscribe": {
    post: {
      req: PostNotificationTopicsTopicStrUnsubscribeData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/notification/topics": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<string>;
      };
    };
  };
  "/notification/topics/{topic}": {
    get: {
      req: GetNotificationTopicsTopicData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<string>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/notification/send": {
    post: {
      res: {
        /**
         * Successful Response
         */
        "201": unknown;
      };
    };
  };
  "/notification/send/future": {
    post: {
      res: {
        /**
         * Successful Response
         */
        "201": unknown;
      };
    };
  };
  "/payment/helloasso/webhook": {
    post: {
      req: PostPaymentHelloassoWebhookData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<CoreUserSimple>;
      };
    };
  };
  "/users/count": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": number;
      };
    };
  };
  "/users/search": {
    get: {
      req: GetUsersSearchData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<CoreUserSimple>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/me": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": CoreUser;
      };
    };
    patch: {
      req: PatchUsersMeData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/create": {
    post: {
      req: PostUsersCreateData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/batch-creation": {
    post: {
      req: PostUsersBatchCreationData;
      res: {
        /**
         * Successful Response
         */
        "201": BatchResult;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/activate": {
    post: {
      req: PostUsersActivateData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/make-admin": {
    post: {
      res: {
        /**
         * Successful Response
         */
        "200": app__core__standard_responses__Result;
      };
    };
  };
  "/users/recover": {
    post: {
      req: PostUsersRecoverData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/reset-password": {
    post: {
      req: PostUsersResetPasswordData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/migrate-mail": {
    post: {
      req: PostUsersMigrateMailData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/migrate-mail-confirm": {
    get: {
      req: GetUsersMigrateMailConfirmData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/change-password": {
    post: {
      req: PostUsersChangePasswordData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/{user_id}": {
    get: {
      req: GetUsersUserIdData;
      res: {
        /**
         * Successful Response
         */
        "200": CoreUser;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchUsersUserIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/me/ask-deletion": {
    post: {
      res: {
        /**
         * Successful Response
         */
        "204": void;
      };
    };
  };
  "/users/me/profile-picture": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
    post: {
      req: PostUsersMeProfilePictureData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/users/{user_id}/profile-picture": {
    get: {
      req: GetUsersUserIdProfilePictureData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/advert/advertisers": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<AdvertiserComplete>;
      };
    };
    post: {
      req: PostAdvertAdvertisersData;
      res: {
        /**
         * Successful Response
         */
        "201": AdvertiserComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/advert/advertisers/{advertiser_id}": {
    delete: {
      req: DeleteAdvertAdvertisersAdvertiserIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchAdvertAdvertisersAdvertiserIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/advert/me/advertisers": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<AdvertiserComplete>;
      };
    };
  };
  "/advert/adverts": {
    get: {
      req: GetAdvertAdvertsData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<AdvertReturnComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    post: {
      req: PostAdvertAdvertsData;
      res: {
        /**
         * Successful Response
         */
        "201": AdvertReturnComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/advert/adverts/{advert_id}": {
    get: {
      req: GetAdvertAdvertsAdvertIdData;
      res: {
        /**
         * Successful Response
         */
        "200": AdvertReturnComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchAdvertAdvertsAdvertIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteAdvertAdvertsAdvertIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/advert/adverts/{advert_id}/picture": {
    get: {
      req: GetAdvertAdvertsAdvertIdPictureData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    post: {
      req: PostAdvertAdvertsAdvertIdPictureData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/products": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<app__modules__amap__schemas_amap__ProductComplete>;
      };
    };
    post: {
      req: PostAmapProductsData;
      res: {
        /**
         * Successful Response
         */
        "201": app__modules__amap__schemas_amap__ProductComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/products/{product_id}": {
    get: {
      req: GetAmapProductsProductIdData;
      res: {
        /**
         * Successful Response
         */
        "200": app__modules__amap__schemas_amap__ProductComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchAmapProductsProductIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteAmapProductsProductIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/deliveries": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<DeliveryReturn>;
      };
    };
    post: {
      req: PostAmapDeliveriesData;
      res: {
        /**
         * Successful Response
         */
        "201": DeliveryReturn;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/deliveries/{delivery_id}": {
    delete: {
      req: DeleteAmapDeliveriesDeliveryIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchAmapDeliveriesDeliveryIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/deliveries/{delivery_id}/products": {
    post: {
      req: PostAmapDeliveriesDeliveryIdProductsData;
      res: {
        /**
         * Successful Response
         */
        "201": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteAmapDeliveriesDeliveryIdProductsData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/deliveries/{delivery_id}/orders": {
    get: {
      req: GetAmapDeliveriesDeliveryIdOrdersData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<OrderReturn>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/orders/{order_id}": {
    get: {
      req: GetAmapOrdersOrderIdData;
      res: {
        /**
         * Successful Response
         */
        "200": OrderReturn;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchAmapOrdersOrderIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteAmapOrdersOrderIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/orders": {
    post: {
      req: PostAmapOrdersData;
      res: {
        /**
         * Successful Response
         */
        "201": OrderReturn;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/deliveries/{delivery_id}/openordering": {
    post: {
      req: PostAmapDeliveriesDeliveryIdOpenorderingData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/deliveries/{delivery_id}/lock": {
    post: {
      req: PostAmapDeliveriesDeliveryIdLockData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/deliveries/{delivery_id}/delivered": {
    post: {
      req: PostAmapDeliveriesDeliveryIdDeliveredData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/deliveries/{delivery_id}/archive": {
    post: {
      req: PostAmapDeliveriesDeliveryIdArchiveData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/users/cash": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<CashComplete>;
      };
    };
  };
  "/amap/users/{user_id}/cash": {
    get: {
      req: GetAmapUsersUserIdCashData;
      res: {
        /**
         * Successful Response
         */
        "200": CashComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    post: {
      req: PostAmapUsersUserIdCashData;
      res: {
        /**
         * Successful Response
         */
        "201": CashComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchAmapUsersUserIdCashData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/users/{user_id}/orders": {
    get: {
      req: GetAmapUsersUserIdOrdersData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<OrderReturn>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/amap/information": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Information;
      };
    };
    patch: {
      req: PatchAmapInformationData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/booking/managers": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<Manager>;
      };
    };
    post: {
      req: PostBookingManagersData;
      res: {
        /**
         * Successful Response
         */
        "201": Manager;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/booking/managers/{manager_id}": {
    patch: {
      req: PatchBookingManagersManagerIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteBookingManagersManagerIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/booking/managers/users/me": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<Manager>;
      };
    };
  };
  "/booking/bookings/users/me/manage": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<BookingReturnApplicant>;
      };
    };
  };
  "/booking/bookings/confirmed/users/me/manage": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<BookingReturnApplicant>;
      };
    };
  };
  "/booking/bookings/confirmed": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<BookingReturnSimpleApplicant>;
      };
    };
  };
  "/booking/bookings/users/me": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<BookingReturn>;
      };
    };
  };
  "/booking/bookings": {
    post: {
      req: PostBookingBookingsData;
      res: {
        /**
         * Successful Response
         */
        "201": BookingReturn;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/booking/bookings/{booking_id}": {
    patch: {
      req: PatchBookingBookingsBookingIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteBookingBookingsBookingIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/booking/bookings/{booking_id}/reply/{decision}": {
    patch: {
      req: PatchBookingBookingsBookingIdReplyDecisionData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/booking/rooms": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<RoomComplete>;
      };
    };
    post: {
      req: PostBookingRoomsData;
      res: {
        /**
         * Successful Response
         */
        "201": RoomComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/booking/rooms/{room_id}": {
    patch: {
      req: PatchBookingRoomsRoomIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteBookingRoomsRoomIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/calendar/events/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<EventReturn>;
      };
    };
    post: {
      req: PostCalendarEventsData;
      res: {
        /**
         * Successful Response
         */
        "201": EventReturn;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/calendar/events/confirmed": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<EventComplete>;
      };
    };
  };
  "/calendar/events/user/{applicant_id}": {
    get: {
      req: GetCalendarEventsUserApplicantIdData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<EventReturn>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/calendar/events/{event_id}": {
    get: {
      req: GetCalendarEventsEventIdData;
      res: {
        /**
         * Successful Response
         */
        "200": EventComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchCalendarEventsEventIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteCalendarEventsEventIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/calendar/events/{event_id}/applicant": {
    get: {
      req: GetCalendarEventsEventIdApplicantData;
      res: {
        /**
         * Successful Response
         */
        "200": EventApplicant;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/calendar/events/{event_id}/reply/{decision}": {
    patch: {
      req: PatchCalendarEventsEventIdReplyDecisionData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/calendar/ical/create": {
    post: {
      res: {
        /**
         * Successful Response
         */
        "204": void;
      };
    };
  };
  "/calendar/ical": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/campaign/sections": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<SectionComplete>;
      };
    };
    post: {
      req: PostCampaignSectionsData;
      res: {
        /**
         * Successful Response
         */
        "201": SectionComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/campaign/sections/{section_id}": {
    delete: {
      req: DeleteCampaignSectionsSectionIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/campaign/lists": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<ListReturn>;
      };
    };
    post: {
      req: PostCampaignListsData;
      res: {
        /**
         * Successful Response
         */
        "201": ListReturn;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/campaign/lists/{list_id}": {
    delete: {
      req: DeleteCampaignListsListIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchCampaignListsListIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/campaign/lists/": {
    delete: {
      req: DeleteCampaignListsData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/campaign/voters": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<VoterGroup>;
      };
    };
    post: {
      req: PostCampaignVotersData;
      res: {
        /**
         * Successful Response
         */
        "201": VoterGroup;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      res: {
        /**
         * Successful Response
         */
        "204": void;
      };
    };
  };
  "/campaign/voters/{group_id}": {
    delete: {
      req: DeleteCampaignVotersGroupIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/campaign/status/open": {
    post: {
      res: {
        /**
         * Successful Response
         */
        "204": void;
      };
    };
  };
  "/campaign/status/close": {
    post: {
      res: {
        /**
         * Successful Response
         */
        "204": void;
      };
    };
  };
  "/campaign/status/counting": {
    post: {
      res: {
        /**
         * Successful Response
         */
        "204": void;
      };
    };
  };
  "/campaign/status/published": {
    post: {
      res: {
        /**
         * Successful Response
         */
        "204": void;
      };
    };
  };
  "/campaign/status/reset": {
    post: {
      res: {
        /**
         * Successful Response
         */
        "204": void;
      };
    };
  };
  "/campaign/votes": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<string>;
      };
    };
    post: {
      req: PostCampaignVotesData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/campaign/results": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<app__modules__campaign__schemas_campaign__Result>;
      };
    };
  };
  "/campaign/status": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": VoteStatus;
      };
    };
  };
  "/campaign/stats/{section_id}": {
    get: {
      req: GetCampaignStatsSectionIdData;
      res: {
        /**
         * Successful Response
         */
        "200": VoteStats;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/campaign/lists/{list_id}/logo": {
    post: {
      req: PostCampaignListsListIdLogoData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    get: {
      req: GetCampaignListsListIdLogoData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<CdrUser>;
      };
    };
  };
  "/cdr/users/{user_id}/": {
    get: {
      req: GetCdrUsersUserIdData;
      res: {
        /**
         * Successful Response
         */
        "200": CdrUser;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/sellers/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<SellerComplete>;
      };
    };
    post: {
      req: PostCdrSellersData;
      res: {
        /**
         * Successful Response
         */
        "201": SellerComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/me/sellers/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<SellerComplete>;
      };
    };
  };
  "/cdr/online/sellers/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<SellerComplete>;
      };
    };
  };
  "/cdr/online/products/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<app__modules__cdr__schemas_cdr__ProductComplete>;
      };
    };
  };
  "/cdr/products/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<app__modules__cdr__schemas_cdr__ProductComplete>;
      };
    };
  };
  "/cdr/sellers/{seller_id}/": {
    patch: {
      req: PatchCdrSellersSellerIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteCdrSellersSellerIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/sellers/{seller_id}/products/": {
    get: {
      req: GetCdrSellersSellerIdProductsData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<app__modules__cdr__schemas_cdr__ProductComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    post: {
      req: PostCdrSellersSellerIdProductsData;
      res: {
        /**
         * Successful Response
         */
        "201": app__modules__cdr__schemas_cdr__ProductComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/online/sellers/{seller_id}/products/": {
    get: {
      req: GetCdrOnlineSellersSellerIdProductsData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<app__modules__cdr__schemas_cdr__ProductComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/sellers/{seller_id}/products/{product_id}/": {
    patch: {
      req: PatchCdrSellersSellerIdProductsProductIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteCdrSellersSellerIdProductsProductIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/sellers/{seller_id}/products/{product_id}/variants/": {
    post: {
      req: PostCdrSellersSellerIdProductsProductIdVariantsData;
      res: {
        /**
         * Successful Response
         */
        "201": ProductVariantComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/": {
    patch: {
      req: PatchCdrSellersSellerIdProductsProductIdVariantsVariantIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/sellers/{seller_id}/documents/": {
    get: {
      req: GetCdrSellersSellerIdDocumentsData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<DocumentComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    post: {
      req: PostCdrSellersSellerIdDocumentsData;
      res: {
        /**
         * Successful Response
         */
        "201": DocumentComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/sellers/{seller_id}/documents/{document_id}/": {
    delete: {
      req: DeleteCdrSellersSellerIdDocumentsDocumentIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/{user_id}/purchases/": {
    get: {
      req: GetCdrUsersUserIdPurchasesData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<PurchaseReturn>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/me/purchases/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<PurchaseReturn>;
      };
    };
  };
  "/cdr/sellers/{seller_id}/users/{user_id}/purchases/": {
    get: {
      req: GetCdrSellersSellerIdUsersUserIdPurchasesData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<PurchaseReturn>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/{user_id}/purchases/{product_variant_id}/": {
    post: {
      req: PostCdrUsersUserIdPurchasesProductVariantIdData;
      res: {
        /**
         * Successful Response
         */
        "201": PurchaseComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteCdrUsersUserIdPurchasesProductVariantIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/{user_id}/purchases/{product_variant_id}/validated/": {
    patch: {
      req: PatchCdrUsersUserIdPurchasesProductVariantIdValidatedData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/{user_id}/signatures/": {
    get: {
      req: GetCdrUsersUserIdSignaturesData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<SignatureComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/sellers/{seller_id}/users/{user_id}/signatures/": {
    get: {
      req: GetCdrSellersSellerIdUsersUserIdSignaturesData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<SignatureComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/{user_id}/signatures/{document_id}/": {
    post: {
      req: PostCdrUsersUserIdSignaturesDocumentIdData;
      res: {
        /**
         * Successful Response
         */
        "201": SignatureComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteCdrUsersUserIdSignaturesDocumentIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/curriculums/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<CurriculumComplete>;
      };
    };
    post: {
      req: PostCdrCurriculumsData;
      res: {
        /**
         * Successful Response
         */
        "201": CurriculumComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/curriculums/{curriculum_id}/": {
    delete: {
      req: DeleteCdrCurriculumsCurriculumIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/{user_id}/curriculums/{curriculum_id}/": {
    post: {
      req: PostCdrUsersUserIdCurriculumsCurriculumIdData;
      res: {
        /**
         * Successful Response
         */
        "201": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchCdrUsersUserIdCurriculumsCurriculumIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteCdrUsersUserIdCurriculumsCurriculumIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/{user_id}/payments/": {
    get: {
      req: GetCdrUsersUserIdPaymentsData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<PaymentComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    post: {
      req: PostCdrUsersUserIdPaymentsData;
      res: {
        /**
         * Successful Response
         */
        "201": PaymentComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/{user_id}/payments/{payment_id}/": {
    delete: {
      req: DeleteCdrUsersUserIdPaymentsPaymentIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/pay/{amount}": {
    get: {
      req: GetCdrPayAmountData;
      res: {
        /**
         * Successful Response
         */
        "201": PaymentUrl;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/{user_id}/memberships/": {
    get: {
      req: GetCdrUsersUserIdMembershipsData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<app__modules__cdr__schemas_cdr__MembershipComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    post: {
      req: PostCdrUsersUserIdMembershipsData;
      res: {
        /**
         * Successful Response
         */
        "201": app__modules__cdr__schemas_cdr__MembershipComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/{user_id}/memberships/{membership_id}/": {
    delete: {
      req: DeleteCdrUsersUserIdMembershipsMembershipIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/status/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Status;
      };
    };
    patch: {
      req: PatchCdrStatusData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/{user_id}/tickets/": {
    get: {
      req: GetCdrUsersUserIdTicketsData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<Ticket>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/users/me/tickets/{ticket_id}/secret/": {
    get: {
      req: GetCdrUsersMeTicketsTicketIdSecretData;
      res: {
        /**
         * Successful Response
         */
        "200": TicketSecret;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/products/{product_id}/tickets/{secret}/": {
    get: {
      req: GetCdrProductsProductIdTicketsSecretData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<Ticket>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchCdrProductsProductIdTicketsSecretData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cdr/ws/send/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
      };
    };
  };
  "/cinema/themoviedb/{themoviedb_id}": {
    get: {
      req: GetCinemaThemoviedbThemoviedbIdData;
      res: {
        /**
         * Successful Response
         */
        "200": TheMovieDB;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cinema/sessions": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<CineSessionComplete>;
      };
    };
    post: {
      req: PostCinemaSessionsData;
      res: {
        /**
         * Successful Response
         */
        "201": CineSessionComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cinema/sessions/{session_id}": {
    patch: {
      req: PatchCinemaSessionsSessionIdData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteCinemaSessionsSessionIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/cinema/sessions/{session_id}/poster": {
    post: {
      req: PostCinemaSessionsSessionIdPosterData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    get: {
      req: GetCinemaSessionsSessionIdPosterData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/flappybird/scores": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<FlappyBirdScoreInDB>;
      };
    };
    post: {
      req: PostFlappybirdScoresData;
      res: {
        /**
         * Successful Response
         */
        "201": FlappyBirdScoreBase;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/flappybird/scores/me": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": FlappyBirdScoreCompleteFeedBack;
      };
    };
  };
  "/loans/loaners/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<Loaner>;
      };
    };
    post: {
      req: PostLoansLoanersData;
      res: {
        /**
         * Successful Response
         */
        "201": Loaner;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/loans/loaners/{loaner_id}": {
    delete: {
      req: DeleteLoansLoanersLoanerIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchLoansLoanersLoanerIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/loans/loaners/{loaner_id}/loans": {
    get: {
      req: GetLoansLoanersLoanerIdLoansData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<Loan>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/loans/loaners/{loaner_id}/items": {
    get: {
      req: GetLoansLoanersLoanerIdItemsData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<Item>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    post: {
      req: PostLoansLoanersLoanerIdItemsData;
      res: {
        /**
         * Successful Response
         */
        "201": Item;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/loans/loaners/{loaner_id}/items/{item_id}": {
    patch: {
      req: PatchLoansLoanersLoanerIdItemsItemIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteLoansLoanersLoanerIdItemsItemIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/loans/users/me": {
    get: {
      req: GetLoansUsersMeData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<Loan>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/loans/users/me/loaners": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<Loaner>;
      };
    };
  };
  "/loans/": {
    post: {
      req: PostLoansData;
      res: {
        /**
         * Successful Response
         */
        "201": Loan;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/loans/{loan_id}": {
    patch: {
      req: PatchLoansLoanIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteLoansLoanIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/loans/{loan_id}/return": {
    post: {
      req: PostLoansLoanIdReturnData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/loans/{loan_id}/extend": {
    post: {
      req: PostLoansLoanIdExtendData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/ph/{paper_id}/pdf": {
    get: {
      req: GetPhPaperIdPdfData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    post: {
      req: PostPhPaperIdPdfData;
      res: {
        /**
         * Successful Response
         */
        "201": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/ph/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<PaperComplete>;
      };
    };
    post: {
      req: PostPhData;
      res: {
        /**
         * Successful Response
         */
        "201": PaperComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/ph/admin": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<PaperComplete>;
      };
    };
  };
  "/ph/{paper_id}/cover": {
    get: {
      req: GetPhPaperIdCoverData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/ph/{paper_id}": {
    patch: {
      req: PatchPhPaperIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeletePhPaperIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/phonebook/associations/": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<AssociationComplete>;
      };
    };
    post: {
      req: PostPhonebookAssociationsData;
      res: {
        /**
         * Successful Response
         */
        "201": AssociationComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/phonebook/roletags": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": RoleTagsReturn;
      };
    };
  };
  "/phonebook/associations/kinds": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": KindsReturn;
      };
    };
  };
  "/phonebook/associations/{association_id}": {
    patch: {
      req: PatchPhonebookAssociationsAssociationIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeletePhonebookAssociationsAssociationIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/phonebook/associations/{association_id}/members/": {
    get: {
      req: GetPhonebookAssociationsAssociationIdMembersData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<MemberComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/phonebook/associations/{association_id}/members/{mandate_year}": {
    get: {
      req: GetPhonebookAssociationsAssociationIdMembersMandateYearData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<MemberComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/phonebook/member/{user_id}": {
    get: {
      req: GetPhonebookMemberUserIdData;
      res: {
        /**
         * Successful Response
         */
        "200": MemberComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/phonebook/associations/memberships": {
    post: {
      req: PostPhonebookAssociationsMembershipsData;
      res: {
        /**
         * Successful Response
         */
        "201": app__modules__phonebook__schemas_phonebook__MembershipComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/phonebook/associations/memberships/{membership_id}": {
    patch: {
      req: PatchPhonebookAssociationsMembershipsMembershipIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeletePhonebookAssociationsMembershipsMembershipIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/phonebook/associations/{association_id}/picture": {
    post: {
      req: PostPhonebookAssociationsAssociationIdPictureData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    get: {
      req: GetPhonebookAssociationsAssociationIdPictureData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/raffles": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<RaffleComplete>;
      };
    };
    post: {
      req: PostTombolaRafflesData;
      res: {
        /**
         * Successful Response
         */
        "201": RaffleComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/raffles/{raffle_id}": {
    patch: {
      req: PatchTombolaRafflesRaffleIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteTombolaRafflesRaffleIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/group/{group_id}/raffles": {
    get: {
      req: GetTombolaGroupGroupIdRafflesData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<RaffleComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/raffles/{raffle_id}/stats": {
    get: {
      req: GetTombolaRafflesRaffleIdStatsData;
      res: {
        /**
         * Successful Response
         */
        "200": RaffleStats;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/raffles/{raffle_id}/logo": {
    post: {
      req: PostTombolaRafflesRaffleIdLogoData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    get: {
      req: GetTombolaRafflesRaffleIdLogoData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/pack_tickets": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<PackTicketSimple>;
      };
    };
    post: {
      req: PostTombolaPackTicketsData;
      res: {
        /**
         * Successful Response
         */
        "201": PackTicketSimple;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/pack_tickets/{packticket_id}": {
    patch: {
      req: PatchTombolaPackTicketsPackticketIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteTombolaPackTicketsPackticketIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/raffles/{raffle_id}/pack_tickets": {
    get: {
      req: GetTombolaRafflesRaffleIdPackTicketsData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<PackTicketSimple>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/tickets": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<TicketSimple>;
      };
    };
  };
  "/tombola/tickets/buy/{pack_id}": {
    post: {
      req: PostTombolaTicketsBuyPackIdData;
      res: {
        /**
         * Successful Response
         */
        "201": Array<TicketComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/users/{user_id}/tickets": {
    get: {
      req: GetTombolaUsersUserIdTicketsData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<TicketComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/raffles/{raffle_id}/tickets": {
    get: {
      req: GetTombolaRafflesRaffleIdTicketsData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<TicketComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/prizes": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<PrizeSimple>;
      };
    };
    post: {
      req: PostTombolaPrizesData;
      res: {
        /**
         * Successful Response
         */
        "201": PrizeSimple;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/prizes/{prize_id}": {
    patch: {
      req: PatchTombolaPrizesPrizeIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteTombolaPrizesPrizeIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/raffles/{raffle_id}/prizes": {
    get: {
      req: GetTombolaRafflesRaffleIdPrizesData;
      res: {
        /**
         * Successful Response
         */
        "200": Array<PrizeSimple>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/prizes/{prize_id}/picture": {
    post: {
      req: PostTombolaPrizesPrizeIdPictureData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    get: {
      req: GetTombolaPrizesPrizeIdPictureData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/users/cash": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<CashComplete>;
      };
    };
  };
  "/tombola/users/{user_id}/cash": {
    get: {
      req: GetTombolaUsersUserIdCashData;
      res: {
        /**
         * Successful Response
         */
        "200": CashComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    post: {
      req: PostTombolaUsersUserIdCashData;
      res: {
        /**
         * Successful Response
         */
        "201": CashComplete;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    patch: {
      req: PatchTombolaUsersUserIdCashData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/prizes/{prize_id}/draw": {
    post: {
      req: PostTombolaPrizesPrizeIdDrawData;
      res: {
        /**
         * Successful Response
         */
        "201": Array<TicketComplete>;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/raffles/{raffle_id}/open": {
    patch: {
      req: PatchTombolaRafflesRaffleIdOpenData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/tombola/raffles/{raffle_id}/lock": {
    patch: {
      req: PatchTombolaRafflesRaffleIdLockData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/recommendation/recommendations": {
    get: {
      res: {
        /**
         * Successful Response
         */
        "200": Array<Recommendation>;
      };
    };
    post: {
      req: PostRecommendationRecommendationsData;
      res: {
        /**
         * Successful Response
         */
        "201": Recommendation;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/recommendation/recommendations/{recommendation_id}": {
    patch: {
      req: PatchRecommendationRecommendationsRecommendationIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    delete: {
      req: DeleteRecommendationRecommendationsRecommendationIdData;
      res: {
        /**
         * Successful Response
         */
        "204": void;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
  "/recommendation/recommendations/{recommendation_id}/picture": {
    get: {
      req: GetRecommendationRecommendationsRecommendationIdPictureData;
      res: {
        /**
         * Successful Response
         */
        "200": unknown;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
    post: {
      req: PostRecommendationRecommendationsRecommendationIdPictureData;
      res: {
        /**
         * Successful Response
         */
        "201": app__core__standard_responses__Result;
        /**
         * Validation Error
         */
        "422": HTTPValidationError;
      };
    };
  };
};
