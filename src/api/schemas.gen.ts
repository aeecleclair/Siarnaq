// This file is auto-generated by @hey-api/openapi-ts

export const $AccessToken = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type'
        }
    },
    type: 'object',
    required: ['access_token', 'token_type'],
    title: 'AccessToken'
} as const;

export const $AccountType = {
    type: 'string',
    enum: ['student', 'former_student', 'staff', 'association', 'external', 'other_school_student', 'demo'],
    title: 'AccountType',
    description: `Various account types that can be created in Hyperion.
These values should match GroupType's. They are the lower level groups in Hyperion`
} as const;

export const $AdvertBase = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        advertiser_id: {
            type: 'string',
            title: 'Advertiser Id'
        },
        tags: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        }
    },
    type: 'object',
    required: ['title', 'content', 'advertiser_id'],
    title: 'AdvertBase'
} as const;

export const $AdvertReturnComplete = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        content: {
            type: 'string',
            title: 'Content'
        },
        advertiser_id: {
            type: 'string',
            title: 'Advertiser Id'
        },
        tags: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        advertiser: {
            '$ref': '#/components/schemas/AdvertiserComplete'
        },
        date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Date'
        }
    },
    type: 'object',
    required: ['title', 'content', 'advertiser_id', 'id', 'advertiser'],
    title: 'AdvertReturnComplete'
} as const;

export const $AdvertUpdate = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        content: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Content'
        },
        tags: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        }
    },
    type: 'object',
    title: 'AdvertUpdate'
} as const;

export const $AdvertiserBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        group_manager_id: {
            type: 'string',
            title: 'Group Manager Id',
            description: 'The group manager id should be a group identifier'
        }
    },
    type: 'object',
    required: ['name', 'group_manager_id'],
    title: 'AdvertiserBase'
} as const;

export const $AdvertiserComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        group_manager_id: {
            type: 'string',
            title: 'Group Manager Id',
            description: 'The group manager id should be a group identifier'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'group_manager_id', 'id'],
    title: 'AdvertiserComplete'
} as const;

export const $AdvertiserUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        group_manager_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group Manager Id'
        }
    },
    type: 'object',
    title: 'AdvertiserUpdate'
} as const;

export const $AmapSlotType = {
    type: 'string',
    enum: ['midi', 'soir'],
    title: 'AmapSlotType'
} as const;

export const $Applicant = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        firstname: {
            type: 'string',
            title: 'Firstname'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        account_type: {
            '$ref': '#/components/schemas/AccountType'
        },
        school_id: {
            type: 'string',
            format: 'uuid',
            title: 'School Id'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        promo: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Promo'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        }
    },
    type: 'object',
    required: ['name', 'firstname', 'id', 'account_type', 'school_id', 'email'],
    title: 'Applicant'
} as const;

export const $AssociationBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        kind: {
            '$ref': '#/components/schemas/Kinds'
        },
        mandate_year: {
            type: 'integer',
            title: 'Mandate Year'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        associated_groups: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Associated Groups',
            default: []
        },
        deactivated: {
            type: 'boolean',
            title: 'Deactivated',
            default: false
        }
    },
    type: 'object',
    required: ['name', 'kind', 'mandate_year'],
    title: 'AssociationBase'
} as const;

export const $AssociationComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        kind: {
            '$ref': '#/components/schemas/Kinds'
        },
        mandate_year: {
            type: 'integer',
            title: 'Mandate Year'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        associated_groups: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Associated Groups',
            default: []
        },
        deactivated: {
            type: 'boolean',
            title: 'Deactivated',
            default: false
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'kind', 'mandate_year', 'id'],
    title: 'AssociationComplete'
} as const;

export const $AssociationEdit = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        kind: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Kinds'
                },
                {
                    type: 'null'
                }
            ]
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        mandate_year: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Mandate Year'
        }
    },
    type: 'object',
    title: 'AssociationEdit'
} as const;

export const $AssociationGroupsEdit = {
    properties: {
        associated_groups: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Associated Groups',
            default: []
        }
    },
    type: 'object',
    title: 'AssociationGroupsEdit'
} as const;

export const $BatchResult = {
    properties: {
        failed: {
            additionalProperties: {
                type: 'string'
            },
            type: 'object',
            title: 'Failed'
        }
    },
    type: 'object',
    required: ['failed'],
    title: 'BatchResult',
    description: 'Return a dictionary of {key: error message} indicating which element of failed.'
} as const;

export const $Body_authorize_validation_auth_authorization_flow_authorize_validation_post = {
    properties: {
        client_id: {
            type: 'string',
            title: 'Client Id'
        },
        redirect_uri: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Redirect Uri'
        },
        response_type: {
            type: 'string',
            title: 'Response Type'
        },
        scope: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Scope'
        },
        state: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State'
        },
        nonce: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nonce'
        },
        code_challenge: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code Challenge'
        },
        code_challenge_method: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code Challenge Method'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    type: 'object',
    required: ['client_id', 'response_type', 'email', 'password'],
    title: 'Body_authorize_validation_auth_authorization_flow_authorize_validation_post'
} as const;

export const $Body_create_advert_image_advert_adverts__advert_id__picture_post = {
    properties: {
        image: {
            type: 'string',
            format: 'binary',
            title: 'Image'
        }
    },
    type: 'object',
    required: ['image'],
    title: 'Body_create_advert_image_advert_adverts__advert_id__picture_post'
} as const;

export const $Body_create_association_logo_phonebook_associations__association_id__picture_post = {
    properties: {
        image: {
            type: 'string',
            format: 'binary',
            title: 'Image'
        }
    },
    type: 'object',
    required: ['image'],
    title: 'Body_create_association_logo_phonebook_associations__association_id__picture_post'
} as const;

export const $Body_create_campaigns_logo_campaign_lists__list_id__logo_post = {
    properties: {
        image: {
            type: 'string',
            format: 'binary',
            title: 'Image'
        }
    },
    type: 'object',
    required: ['image'],
    title: 'Body_create_campaigns_logo_campaign_lists__list_id__logo_post'
} as const;

export const $Body_create_campaigns_logo_cinema_sessions__session_id__poster_post = {
    properties: {
        image: {
            type: 'string',
            format: 'binary',
            title: 'Image'
        }
    },
    type: 'object',
    required: ['image'],
    title: 'Body_create_campaigns_logo_cinema_sessions__session_id__poster_post'
} as const;

export const $Body_create_current_raffle_logo_tombola_raffles__raffle_id__logo_post = {
    properties: {
        image: {
            type: 'string',
            format: 'binary',
            title: 'Image'
        }
    },
    type: 'object',
    required: ['image'],
    title: 'Body_create_current_raffle_logo_tombola_raffles__raffle_id__logo_post'
} as const;

export const $Body_create_current_user_profile_picture_users_me_profile_picture_post = {
    properties: {
        image: {
            type: 'string',
            format: 'binary',
            title: 'Image'
        }
    },
    type: 'object',
    required: ['image'],
    title: 'Body_create_current_user_profile_picture_users_me_profile_picture_post'
} as const;

export const $Body_create_paper_pdf_and_cover_ph__paper_id__pdf_post = {
    properties: {
        pdf: {
            type: 'string',
            format: 'binary',
            title: 'Pdf'
        }
    },
    type: 'object',
    required: ['pdf'],
    title: 'Body_create_paper_pdf_and_cover_ph__paper_id__pdf_post'
} as const;

export const $Body_create_prize_picture_tombola_prizes__prize_id__picture_post = {
    properties: {
        image: {
            type: 'string',
            format: 'binary',
            title: 'Image'
        }
    },
    type: 'object',
    required: ['image'],
    title: 'Body_create_prize_picture_tombola_prizes__prize_id__picture_post'
} as const;

export const $Body_create_recommendation_image_recommendation_recommendations__recommendation_id__picture_post = {
    properties: {
        image: {
            type: 'string',
            format: 'binary',
            title: 'Image'
        }
    },
    type: 'object',
    required: ['image'],
    title: 'Body_create_recommendation_image_recommendation_recommendations__recommendation_id__picture_post'
} as const;

export const $Body_introspect_auth_introspect_post = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        token_type_hint: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Token Type Hint'
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['token'],
    title: 'Body_introspect_auth_introspect_post'
} as const;

export const $Body_login_for_access_token_auth_simple_token_post = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login_for_access_token_auth_simple_token_post'
} as const;

export const $Body_post_authorize_page_auth_authorize_post = {
    properties: {
        response_type: {
            type: 'string',
            title: 'Response Type'
        },
        client_id: {
            type: 'string',
            title: 'Client Id'
        },
        redirect_uri: {
            type: 'string',
            title: 'Redirect Uri'
        },
        scope: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Scope'
        },
        state: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'State'
        },
        nonce: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nonce'
        },
        code_challenge: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code Challenge'
        },
        code_challenge_method: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code Challenge Method'
        }
    },
    type: 'object',
    required: ['response_type', 'client_id', 'redirect_uri'],
    title: 'Body_post_authorize_page_auth_authorize_post'
} as const;

export const $Body_recover_user_users_recover_post = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'Body_recover_user_users_recover_post'
} as const;

export const $Body_register_firebase_device_notification_devices_post = {
    properties: {
        firebase_token: {
            type: 'string',
            title: 'Firebase Token'
        }
    },
    type: 'object',
    required: ['firebase_token'],
    title: 'Body_register_firebase_device_notification_devices_post'
} as const;

export const $Body_token_auth_token_post = {
    properties: {
        refresh_token: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Refresh Token'
        },
        grant_type: {
            type: 'string',
            title: 'Grant Type'
        },
        code: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code'
        },
        redirect_uri: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Redirect Uri'
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        },
        code_verifier: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code Verifier'
        }
    },
    type: 'object',
    required: ['grant_type'],
    title: 'Body_token_auth_token_post'
} as const;

export const $Body_upload_document_raid_document__document_type__post = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_upload_document_raid_document__document_type__post'
} as const;

export const $BookingBase = {
    properties: {
        reason: {
            type: 'string',
            title: 'Reason'
        },
        start: {
            type: 'string',
            format: 'date-time',
            title: 'Start'
        },
        end: {
            type: 'string',
            format: 'date-time',
            title: 'End'
        },
        creation: {
            type: 'string',
            format: 'date-time',
            title: 'Creation'
        },
        note: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Note'
        },
        room_id: {
            type: 'string',
            title: 'Room Id'
        },
        key: {
            type: 'boolean',
            title: 'Key'
        },
        recurrence_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recurrence Rule'
        },
        entity: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Entity'
        }
    },
    type: 'object',
    required: ['reason', 'start', 'end', 'creation', 'room_id', 'key'],
    title: 'BookingBase'
} as const;

export const $BookingEdit = {
    properties: {
        reason: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reason'
        },
        start: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start'
        },
        end: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End'
        },
        note: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Note'
        },
        room_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Room Id'
        },
        key: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Key'
        },
        recurrence_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recurrence Rule'
        },
        entity: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Entity'
        }
    },
    type: 'object',
    title: 'BookingEdit'
} as const;

export const $BookingReturn = {
    properties: {
        reason: {
            type: 'string',
            title: 'Reason'
        },
        start: {
            type: 'string',
            format: 'date-time',
            title: 'Start'
        },
        end: {
            type: 'string',
            format: 'date-time',
            title: 'End'
        },
        creation: {
            type: 'string',
            format: 'date-time',
            title: 'Creation'
        },
        note: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Note'
        },
        room_id: {
            type: 'string',
            title: 'Room Id'
        },
        key: {
            type: 'boolean',
            title: 'Key'
        },
        recurrence_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recurrence Rule'
        },
        entity: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Entity'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        decision: {
            '$ref': '#/components/schemas/Decision'
        },
        applicant_id: {
            type: 'string',
            title: 'Applicant Id'
        },
        room: {
            '$ref': '#/components/schemas/RoomComplete'
        }
    },
    type: 'object',
    required: ['reason', 'start', 'end', 'creation', 'room_id', 'key', 'id', 'decision', 'applicant_id', 'room'],
    title: 'BookingReturn'
} as const;

export const $BookingReturnApplicant = {
    properties: {
        reason: {
            type: 'string',
            title: 'Reason'
        },
        start: {
            type: 'string',
            format: 'date-time',
            title: 'Start'
        },
        end: {
            type: 'string',
            format: 'date-time',
            title: 'End'
        },
        creation: {
            type: 'string',
            format: 'date-time',
            title: 'Creation'
        },
        note: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Note'
        },
        room_id: {
            type: 'string',
            title: 'Room Id'
        },
        key: {
            type: 'boolean',
            title: 'Key'
        },
        recurrence_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recurrence Rule'
        },
        entity: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Entity'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        decision: {
            '$ref': '#/components/schemas/Decision'
        },
        applicant_id: {
            type: 'string',
            title: 'Applicant Id'
        },
        room: {
            '$ref': '#/components/schemas/RoomComplete'
        },
        applicant: {
            '$ref': '#/components/schemas/Applicant'
        }
    },
    type: 'object',
    required: ['reason', 'start', 'end', 'creation', 'room_id', 'key', 'id', 'decision', 'applicant_id', 'room', 'applicant'],
    title: 'BookingReturnApplicant'
} as const;

export const $BookingReturnSimpleApplicant = {
    properties: {
        reason: {
            type: 'string',
            title: 'Reason'
        },
        start: {
            type: 'string',
            format: 'date-time',
            title: 'Start'
        },
        end: {
            type: 'string',
            format: 'date-time',
            title: 'End'
        },
        creation: {
            type: 'string',
            format: 'date-time',
            title: 'Creation'
        },
        note: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Note'
        },
        room_id: {
            type: 'string',
            title: 'Room Id'
        },
        key: {
            type: 'boolean',
            title: 'Key'
        },
        recurrence_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recurrence Rule'
        },
        entity: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Entity'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        decision: {
            '$ref': '#/components/schemas/Decision'
        },
        applicant_id: {
            type: 'string',
            title: 'Applicant Id'
        },
        room: {
            '$ref': '#/components/schemas/RoomComplete'
        },
        applicant: {
            '$ref': '#/components/schemas/CoreUserSimple'
        }
    },
    type: 'object',
    required: ['reason', 'start', 'end', 'creation', 'room_id', 'key', 'id', 'decision', 'applicant_id', 'room', 'applicant'],
    title: 'BookingReturnSimpleApplicant'
} as const;

export const $CalendarEventType = {
    type: 'string',
    enum: ['Event AE', 'Event USE', 'Asso indé', 'HH', 'Strass', 'Rewass', 'Autre'],
    title: 'CalendarEventType'
} as const;

export const $CashComplete = {
    properties: {
        balance: {
            type: 'number',
            title: 'Balance'
        },
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        user: {
            '$ref': '#/components/schemas/CoreUserSimple'
        }
    },
    type: 'object',
    required: ['balance', 'user_id', 'user'],
    title: 'CashComplete'
} as const;

export const $CashEdit = {
    properties: {
        balance: {
            type: 'number',
            title: 'Balance'
        }
    },
    type: 'object',
    required: ['balance'],
    title: 'CashEdit'
} as const;

export const $CdrStatus = {
    type: 'string',
    enum: ['pending', 'online', 'onsite', 'closed'],
    title: 'CdrStatus'
} as const;

export const $CdrUser = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        firstname: {
            type: 'string',
            title: 'Firstname'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        account_type: {
            '$ref': '#/components/schemas/AccountType'
        },
        school_id: {
            type: 'string',
            format: 'uuid',
            title: 'School Id'
        },
        curriculum: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CurriculumComplete'
                },
                {
                    type: 'null'
                }
            ]
        },
        promo: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Promo'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        birthday: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birthday'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        floor: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FloorsType'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['name', 'firstname', 'id', 'account_type', 'school_id', 'email'],
    title: 'CdrUser'
} as const;

export const $CdrUserPreview = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        firstname: {
            type: 'string',
            title: 'Firstname'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        account_type: {
            '$ref': '#/components/schemas/AccountType'
        },
        school_id: {
            type: 'string',
            format: 'uuid',
            title: 'School Id'
        },
        curriculum: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CurriculumComplete'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['name', 'firstname', 'id', 'account_type', 'school_id'],
    title: 'CdrUserPreview'
} as const;

export const $CdrUserUpdate = {
    properties: {
        promo: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Promo'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        birthday: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birthday'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        floor: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FloorsType'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'CdrUserUpdate'
} as const;

export const $CdrYear = {
    properties: {
        year: {
            type: 'integer',
            title: 'Year',
            default: 2025
        }
    },
    type: 'object',
    title: 'CdrYear'
} as const;

export const $ChangePasswordRequest = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        old_password: {
            type: 'string',
            title: 'Old Password'
        },
        new_password: {
            type: 'string',
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['email', 'old_password', 'new_password'],
    title: 'ChangePasswordRequest'
} as const;

export const $CineSessionBase = {
    properties: {
        start: {
            type: 'string',
            format: 'date-time',
            title: 'Start'
        },
        duration: {
            type: 'integer',
            title: 'Duration'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        overview: {
            type: 'string',
            title: 'Overview'
        },
        genre: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Genre'
        },
        tagline: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tagline'
        }
    },
    type: 'object',
    required: ['start', 'duration', 'name', 'overview'],
    title: 'CineSessionBase'
} as const;

export const $CineSessionComplete = {
    properties: {
        start: {
            type: 'string',
            format: 'date-time',
            title: 'Start'
        },
        duration: {
            type: 'integer',
            title: 'Duration'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        overview: {
            type: 'string',
            title: 'Overview'
        },
        genre: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Genre'
        },
        tagline: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tagline'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['start', 'duration', 'name', 'overview', 'id'],
    title: 'CineSessionComplete'
} as const;

export const $CineSessionUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        start: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start'
        },
        duration: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Duration'
        },
        overview: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Overview'
        },
        genre: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Genre'
        },
        tagline: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tagline'
        }
    },
    type: 'object',
    title: 'CineSessionUpdate'
} as const;

export const $CoreBatchDeleteMembership = {
    properties: {
        group_id: {
            type: 'string',
            title: 'Group Id'
        }
    },
    type: 'object',
    required: ['group_id'],
    title: 'CoreBatchDeleteMembership',
    description: 'Schema for batch membership deletion'
} as const;

export const $CoreBatchMembership = {
    properties: {
        user_emails: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'User Emails'
        },
        group_id: {
            type: 'string',
            title: 'Group Id'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['user_emails', 'group_id'],
    title: 'CoreBatchMembership',
    description: 'Schema for batch membership creation'
} as const;

export const $CoreBatchUserCreateRequest = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'CoreBatchUserCreateRequest',
    description: 'The schema is used for batch account creation requests.',
    account_type: '39691052-2ae5-4e12-99d0-7a9f5f2b0136',
    email: 'user@example.fr'
} as const;

export const $CoreGroup = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        members: {
            items: {
                '$ref': '#/components/schemas/CoreUserSimple'
            },
            type: 'array',
            title: 'Members',
            default: []
        }
    },
    type: 'object',
    required: ['name', 'id'],
    title: 'CoreGroup',
    description: "Schema for group's model similar to core_group table in database"
} as const;

export const $CoreGroupCreate = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'CoreGroupCreate',
    description: 'Model for group creation schema'
} as const;

export const $CoreGroupSimple = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'id'],
    title: 'CoreGroupSimple',
    description: "Simplified schema for group's model, used when getting all groups"
} as const;

export const $CoreGroupUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    title: 'CoreGroupUpdate',
    description: 'Schema for group update'
} as const;

export const $CoreInformation = {
    properties: {
        ready: {
            type: 'boolean',
            title: 'Ready'
        },
        version: {
            type: 'string',
            title: 'Version'
        },
        minimal_titan_version_code: {
            type: 'integer',
            title: 'Minimal Titan Version Code'
        }
    },
    type: 'object',
    required: ['ready', 'version', 'minimal_titan_version_code'],
    title: 'CoreInformation',
    description: 'Information about Hyperion'
} as const;

export const $CoreMembership = {
    properties: {
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        group_id: {
            type: 'string',
            title: 'Group Id'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    required: ['user_id', 'group_id'],
    title: 'CoreMembership',
    description: 'Schema for membership creation (allows adding a user to a group)'
} as const;

export const $CoreMembershipDelete = {
    properties: {
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        group_id: {
            type: 'string',
            title: 'Group Id'
        }
    },
    type: 'object',
    required: ['user_id', 'group_id'],
    title: 'CoreMembershipDelete'
} as const;

export const $CoreSchool = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        email_regex: {
            type: 'string',
            title: 'Email Regex'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'email_regex', 'id'],
    title: 'CoreSchool'
} as const;

export const $CoreSchoolBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        email_regex: {
            type: 'string',
            title: 'Email Regex'
        }
    },
    type: 'object',
    required: ['name', 'email_regex'],
    title: 'CoreSchoolBase',
    description: "Schema for school's model"
} as const;

export const $CoreSchoolUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        email_regex: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email Regex'
        }
    },
    type: 'object',
    title: 'CoreSchoolUpdate',
    description: 'Schema for school update'
} as const;

export const $CoreUser = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        firstname: {
            type: 'string',
            title: 'Firstname'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        account_type: {
            '$ref': '#/components/schemas/AccountType'
        },
        school_id: {
            type: 'string',
            format: 'uuid',
            title: 'School Id'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        birthday: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birthday'
        },
        promo: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Promo'
        },
        floor: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FloorsType'
                },
                {
                    type: 'null'
                }
            ]
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        created_on: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created On'
        },
        groups: {
            items: {
                '$ref': '#/components/schemas/CoreGroupSimple'
            },
            type: 'array',
            title: 'Groups',
            default: []
        },
        school: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CoreSchool'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['name', 'firstname', 'id', 'account_type', 'school_id', 'email'],
    title: 'CoreUser',
    description: "Schema for user's model similar to core_user table in database"
} as const;

export const $CoreUserActivateRequest = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        firstname: {
            type: 'string',
            title: 'Firstname'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        activation_token: {
            type: 'string',
            title: 'Activation Token'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        birthday: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birthday'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        floor: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FloorsType'
                },
                {
                    type: 'null'
                }
            ]
        },
        promo: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Promo',
            description: 'Promotion of the student, an integer like 2021'
        }
    },
    type: 'object',
    required: ['name', 'firstname', 'activation_token', 'password'],
    title: 'CoreUserActivateRequest',
    activation_token: '62D-QJI5IYrjuywH8IWnuBo0xHrbTCfw_18HP4mdRrA',
    firstname: 'Firstname',
    floor: 'Autre',
    name: 'Name',
    nickname: 'Antoine',
    password: 'areallycomplexpassword'
} as const;

export const $CoreUserCreateRequest = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        accept_external: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Accept External',
            description: "Allow Hyperion to create an external user. Without this, Hyperion will only allow non external students to be created. The email address will be used to determine if the user should be external or not. An external user may not have an ECL email address, he won't be able to access most features.",
            deprecated: true
        }
    },
    type: 'object',
    required: ['email'],
    title: 'CoreUserCreateRequest',
    description: 'The schema is used to send an account creation request.',
    email: 'user@example.fr'
} as const;

export const $CoreUserFusionRequest = {
    properties: {
        user_kept_email: {
            type: 'string',
            title: 'User Kept Email'
        },
        user_deleted_email: {
            type: 'string',
            title: 'User Deleted Email'
        }
    },
    type: 'object',
    required: ['user_kept_email', 'user_deleted_email'],
    title: 'CoreUserFusionRequest',
    description: 'Schema for user fusion'
} as const;

export const $CoreUserSimple = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        firstname: {
            type: 'string',
            title: 'Firstname'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        account_type: {
            '$ref': '#/components/schemas/AccountType'
        },
        school_id: {
            type: 'string',
            format: 'uuid',
            title: 'School Id'
        }
    },
    type: 'object',
    required: ['name', 'firstname', 'id', 'account_type', 'school_id'],
    title: 'CoreUserSimple',
    description: "Simplified schema for user's model, used when getting all users"
} as const;

export const $CoreUserUpdate = {
    properties: {
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        birthday: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birthday'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        floor: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FloorsType'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'CoreUserUpdate',
    description: 'Schema for user update',
    birthday: '2022-05-04',
    firstname: 'MyECL',
    floor: 'Adoma',
    name: 'Backend',
    nickname: 'Hyperion',
    promo: 2021
} as const;

export const $CoreUserUpdateAdmin = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        school_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'School Id'
        },
        account_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AccountType'
                },
                {
                    type: 'null'
                }
            ]
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        firstname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Firstname'
        },
        promo: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Promo'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        birthday: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birthday'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        floor: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FloorsType'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'CoreUserUpdateAdmin',
    birthday: '2022-05-04',
    firstname: 'MyECL',
    floor: 'Adoma',
    name: 'Backend',
    nickname: 'Hyperion',
    promo: 2021
} as const;

export const $CurriculumBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'CurriculumBase'
} as const;

export const $CurriculumComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'id'],
    title: 'CurriculumComplete'
} as const;

export const $CustomDataBase = {
    properties: {
        value: {
            type: 'string',
            title: 'Value'
        }
    },
    type: 'object',
    required: ['value'],
    title: 'CustomDataBase'
} as const;

export const $CustomDataComplete = {
    properties: {
        value: {
            type: 'string',
            title: 'Value'
        },
        field_id: {
            type: 'string',
            format: 'uuid',
            title: 'Field Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        field: {
            '$ref': '#/components/schemas/CustomDataFieldComplete'
        }
    },
    type: 'object',
    required: ['value', 'field_id', 'user_id', 'field'],
    title: 'CustomDataComplete'
} as const;

export const $CustomDataFieldBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        can_user_answer: {
            type: 'boolean',
            title: 'Can User Answer'
        }
    },
    type: 'object',
    required: ['name', 'can_user_answer'],
    title: 'CustomDataFieldBase'
} as const;

export const $CustomDataFieldComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        can_user_answer: {
            type: 'boolean',
            title: 'Can User Answer'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        product_id: {
            type: 'string',
            format: 'uuid',
            title: 'Product Id'
        }
    },
    type: 'object',
    required: ['name', 'can_user_answer', 'id', 'product_id'],
    title: 'CustomDataFieldComplete'
} as const;

export const $Decision = {
    type: 'string',
    enum: ['approved', 'declined', 'pending'],
    title: 'Decision'
} as const;

export const $DeliveryBase = {
    properties: {
        delivery_date: {
            type: 'string',
            format: 'date',
            title: 'Delivery Date'
        },
        products_ids: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Products Ids',
            default: []
        }
    },
    type: 'object',
    required: ['delivery_date'],
    title: 'DeliveryBase',
    description: 'Base schema for AMAP deliveries'
} as const;

export const $DeliveryProductsUpdate = {
    properties: {
        products_ids: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Products Ids'
        }
    },
    type: 'object',
    required: ['products_ids'],
    title: 'DeliveryProductsUpdate'
} as const;

export const $DeliveryReturn = {
    properties: {
        delivery_date: {
            type: 'string',
            format: 'date',
            title: 'Delivery Date'
        },
        products: {
            items: {
                '$ref': '#/components/schemas/app__modules__amap__schemas_amap__ProductComplete'
            },
            type: 'array',
            title: 'Products',
            default: []
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        status: {
            '$ref': '#/components/schemas/DeliveryStatusType'
        }
    },
    type: 'object',
    required: ['delivery_date', 'id', 'status'],
    title: 'DeliveryReturn'
} as const;

export const $DeliveryStatusType = {
    type: 'string',
    enum: ['creation', 'orderable', 'locked', 'delivered', 'archived'],
    title: 'DeliveryStatusType'
} as const;

export const $DeliveryUpdate = {
    properties: {
        delivery_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Delivery Date'
        }
    },
    type: 'object',
    title: 'DeliveryUpdate'
} as const;

export const $Difficulty = {
    type: 'string',
    enum: ['discovery', 'sports', 'expert'],
    title: 'Difficulty'
} as const;

export const $Document = {
    properties: {
        type: {
            '$ref': '#/components/schemas/DocumentType'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        uploaded_at: {
            type: 'string',
            format: 'date',
            title: 'Uploaded At'
        },
        validation: {
            '$ref': '#/components/schemas/DocumentValidation'
        }
    },
    type: 'object',
    required: ['type', 'name', 'id', 'uploaded_at', 'validation'],
    title: 'Document'
} as const;

export const $DocumentBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'DocumentBase'
} as const;

export const $DocumentComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        seller_id: {
            type: 'string',
            format: 'uuid',
            title: 'Seller Id'
        }
    },
    type: 'object',
    required: ['name', 'id', 'seller_id'],
    title: 'DocumentComplete'
} as const;

export const $DocumentCreation = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['id'],
    title: 'DocumentCreation'
} as const;

export const $DocumentSignatureType = {
    type: 'string',
    enum: ['material', 'numeric'],
    title: 'DocumentSignatureType'
} as const;

export const $DocumentType = {
    type: 'string',
    enum: ['idCard', 'medicalCertificate', 'studentCard', 'raidRules', 'parentAuthorization'],
    title: 'DocumentType'
} as const;

export const $DocumentValidation = {
    type: 'string',
    enum: ['pending', 'accepted', 'refused', 'temporary'],
    title: 'DocumentValidation'
} as const;

export const $EmergencyContact = {
    properties: {
        firstname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Firstname'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        }
    },
    type: 'object',
    title: 'EmergencyContact'
} as const;

export const $EventApplicant = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        firstname: {
            type: 'string',
            title: 'Firstname'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        account_type: {
            '$ref': '#/components/schemas/AccountType'
        },
        school_id: {
            type: 'string',
            format: 'uuid',
            title: 'School Id'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        promo: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Promo'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        }
    },
    type: 'object',
    required: ['name', 'firstname', 'id', 'account_type', 'school_id', 'email'],
    title: 'EventApplicant'
} as const;

export const $EventBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        organizer: {
            type: 'string',
            title: 'Organizer'
        },
        start: {
            type: 'string',
            format: 'date-time',
            title: 'Start'
        },
        end: {
            type: 'string',
            format: 'date-time',
            title: 'End'
        },
        all_day: {
            type: 'boolean',
            title: 'All Day'
        },
        location: {
            type: 'string',
            title: 'Location'
        },
        type: {
            '$ref': '#/components/schemas/CalendarEventType'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        recurrence_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recurrence Rule'
        }
    },
    type: 'object',
    required: ['name', 'organizer', 'start', 'end', 'all_day', 'location', 'type', 'description'],
    title: 'EventBase'
} as const;

export const $EventComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        organizer: {
            type: 'string',
            title: 'Organizer'
        },
        start: {
            type: 'string',
            format: 'date-time',
            title: 'Start'
        },
        end: {
            type: 'string',
            format: 'date-time',
            title: 'End'
        },
        all_day: {
            type: 'boolean',
            title: 'All Day'
        },
        location: {
            type: 'string',
            title: 'Location'
        },
        type: {
            '$ref': '#/components/schemas/CalendarEventType'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        recurrence_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recurrence Rule'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        decision: {
            '$ref': '#/components/schemas/Decision'
        },
        applicant_id: {
            type: 'string',
            title: 'Applicant Id'
        }
    },
    type: 'object',
    required: ['name', 'organizer', 'start', 'end', 'all_day', 'location', 'type', 'description', 'id', 'decision', 'applicant_id'],
    title: 'EventComplete'
} as const;

export const $EventEdit = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        organizer: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Organizer'
        },
        start: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start'
        },
        end: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End'
        },
        all_day: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'All Day'
        },
        location: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Location'
        },
        type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CalendarEventType'
                },
                {
                    type: 'null'
                }
            ]
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        recurrence_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recurrence Rule'
        }
    },
    type: 'object',
    title: 'EventEdit'
} as const;

export const $EventReturn = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        organizer: {
            type: 'string',
            title: 'Organizer'
        },
        start: {
            type: 'string',
            format: 'date-time',
            title: 'Start'
        },
        end: {
            type: 'string',
            format: 'date-time',
            title: 'End'
        },
        all_day: {
            type: 'boolean',
            title: 'All Day'
        },
        location: {
            type: 'string',
            title: 'Location'
        },
        type: {
            '$ref': '#/components/schemas/CalendarEventType'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        recurrence_rule: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Recurrence Rule'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        decision: {
            '$ref': '#/components/schemas/Decision'
        },
        applicant_id: {
            type: 'string',
            title: 'Applicant Id'
        },
        applicant: {
            '$ref': '#/components/schemas/EventApplicant'
        }
    },
    type: 'object',
    required: ['name', 'organizer', 'start', 'end', 'all_day', 'location', 'type', 'description', 'id', 'decision', 'applicant_id', 'applicant'],
    title: 'EventReturn'
} as const;

export const $FirebaseDevice = {
    properties: {
        user_id: {
            type: 'string',
            title: 'User Id',
            description: 'The Hyperion user id'
        },
        firebase_device_token: {
            type: 'string',
            title: 'Firebase Device Token',
            default: 'Firebase device token'
        }
    },
    type: 'object',
    required: ['user_id'],
    title: 'FirebaseDevice'
} as const;

export const $FlappyBirdScoreBase = {
    properties: {
        value: {
            type: 'integer',
            title: 'Value'
        }
    },
    type: 'object',
    required: ['value'],
    title: 'FlappyBirdScoreBase'
} as const;

export const $FlappyBirdScoreCompleteFeedBack = {
    properties: {
        value: {
            type: 'integer',
            title: 'Value'
        },
        user: {
            '$ref': '#/components/schemas/CoreUserSimple'
        },
        creation_time: {
            type: 'string',
            format: 'date-time',
            title: 'Creation Time'
        },
        position: {
            type: 'integer',
            title: 'Position'
        }
    },
    type: 'object',
    required: ['value', 'user', 'creation_time', 'position'],
    title: 'FlappyBirdScoreCompleteFeedBack',
    description: 'A score with its position in the best players leaderboard'
} as const;

export const $FlappyBirdScoreInDB = {
    properties: {
        value: {
            type: 'integer',
            title: 'Value'
        },
        user: {
            '$ref': '#/components/schemas/CoreUserSimple'
        },
        creation_time: {
            type: 'string',
            format: 'date-time',
            title: 'Creation Time'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            title: 'User Id'
        }
    },
    type: 'object',
    required: ['value', 'user', 'creation_time', 'id', 'user_id'],
    title: 'FlappyBirdScoreInDB'
} as const;

export const $FloorsType = {
    type: 'string',
    enum: ['Autre', 'Adoma', 'Exte', 'T1', 'T2', 'T3', 'T4', 'T56', 'U1', 'U2', 'U3', 'U4', 'U56', 'V1', 'V2', 'V3', 'V45', 'V6', 'X1', 'X2', 'X3', 'X4', 'X5', 'X6'],
    title: 'FloorsType'
} as const;

export const $GenerateTicketBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        max_use: {
            type: 'integer',
            title: 'Max Use'
        },
        expiration: {
            type: 'string',
            format: 'date-time',
            title: 'Expiration'
        }
    },
    type: 'object',
    required: ['name', 'max_use', 'expiration'],
    title: 'GenerateTicketBase'
} as const;

export const $GenerateTicketComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        max_use: {
            type: 'integer',
            title: 'Max Use'
        },
        expiration: {
            type: 'string',
            format: 'date-time',
            title: 'Expiration'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'max_use', 'expiration', 'id'],
    title: 'GenerateTicketComplete'
} as const;

export const $GroupNotificationRequest = {
    properties: {
        group_id: {
            type: 'string',
            title: 'Group Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        content: {
            type: 'string',
            title: 'Content'
        }
    },
    type: 'object',
    required: ['group_id', 'title', 'content'],
    title: 'GroupNotificationRequest'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $History = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        type: {
            '$ref': '#/components/schemas/HistoryType'
        },
        other_wallet_name: {
            type: 'string',
            title: 'Other Wallet Name'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        creation: {
            type: 'string',
            format: 'date-time',
            title: 'Creation'
        },
        status: {
            '$ref': '#/components/schemas/TransactionStatus'
        },
        refund: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/HistoryRefund'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['id', 'type', 'other_wallet_name', 'total', 'creation', 'status'],
    title: 'History'
} as const;

export const $HistoryRefund = {
    properties: {
        total: {
            type: 'integer',
            title: 'Total'
        },
        creation: {
            type: 'string',
            format: 'date-time',
            title: 'Creation'
        }
    },
    type: 'object',
    required: ['total', 'creation'],
    title: 'HistoryRefund'
} as const;

export const $HistoryType = {
    type: 'string',
    enum: ['transfer', 'received', 'given', 'refund_credited', 'refund_debited'],
    title: 'HistoryType'
} as const;

export const $Information = {
    properties: {
        manager: {
            type: 'string',
            title: 'Manager'
        },
        link: {
            type: 'string',
            title: 'Link'
        },
        description: {
            type: 'string',
            title: 'Description'
        }
    },
    type: 'object',
    required: ['manager', 'link', 'description'],
    title: 'Information'
} as const;

export const $InformationEdit = {
    properties: {
        manager: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Manager'
        },
        link: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Link'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    title: 'InformationEdit'
} as const;

export const $IntegrityCheckData = {
    properties: {
        date: {
            type: 'string',
            format: 'date-time',
            title: 'Date'
        },
        wallets: {
            items: {
                '$ref': '#/components/schemas/WalletBase'
            },
            type: 'array',
            title: 'Wallets'
        },
        transactions: {
            items: {
                '$ref': '#/components/schemas/TransactionBase'
            },
            type: 'array',
            title: 'Transactions'
        },
        transfers: {
            items: {
                '$ref': '#/components/schemas/Transfer'
            },
            type: 'array',
            title: 'Transfers'
        },
        refunds: {
            items: {
                '$ref': '#/components/schemas/RefundBase'
            },
            type: 'array',
            title: 'Refunds'
        }
    },
    type: 'object',
    required: ['date', 'wallets', 'transactions', 'transfers', 'refunds'],
    title: 'IntegrityCheckData',
    description: 'Schema for Hyperion data'
} as const;

export const $IntrospectTokenResponse = {
    properties: {
        active: {
            type: 'boolean',
            title: 'Active'
        }
    },
    type: 'object',
    required: ['active'],
    title: 'IntrospectTokenResponse'
} as const;

export const $InviteToken = {
    properties: {
        team_id: {
            type: 'string',
            title: 'Team Id'
        },
        token: {
            type: 'string',
            title: 'Token'
        }
    },
    type: 'object',
    required: ['team_id', 'token'],
    title: 'InviteToken'
} as const;

export const $Item = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        suggested_caution: {
            type: 'integer',
            title: 'Suggested Caution'
        },
        total_quantity: {
            type: 'integer',
            title: 'Total Quantity'
        },
        suggested_lending_duration: {
            type: 'integer',
            title: 'Suggested Lending Duration',
            description: 'duration in seconds'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        loaner_id: {
            type: 'string',
            title: 'Loaner Id'
        },
        loaned_quantity: {
            type: 'integer',
            title: 'Loaned Quantity'
        }
    },
    type: 'object',
    required: ['name', 'suggested_caution', 'total_quantity', 'suggested_lending_duration', 'id', 'loaner_id', 'loaned_quantity'],
    title: 'Item'
} as const;

export const $ItemBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        suggested_caution: {
            type: 'integer',
            title: 'Suggested Caution'
        },
        total_quantity: {
            type: 'integer',
            title: 'Total Quantity'
        },
        suggested_lending_duration: {
            type: 'integer',
            title: 'Suggested Lending Duration',
            description: 'duration in seconds'
        }
    },
    type: 'object',
    required: ['name', 'suggested_caution', 'total_quantity', 'suggested_lending_duration'],
    title: 'ItemBase',
    description: "Base schema for item's model"
} as const;

export const $ItemBorrowed = {
    properties: {
        item_id: {
            type: 'string',
            title: 'Item Id'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity'
        }
    },
    type: 'object',
    required: ['item_id', 'quantity'],
    title: 'ItemBorrowed',
    description: 'A schema used to represent Item in a loan with its quantity in a request by the client'
} as const;

export const $ItemQuantity = {
    properties: {
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        itemSimple: {
            '$ref': '#/components/schemas/ItemSimple'
        }
    },
    type: 'object',
    required: ['quantity', 'itemSimple'],
    title: 'ItemQuantity',
    description: 'A schema used to represent Item in a loan with its quantity in a response to the client'
} as const;

export const $ItemSimple = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        loaner_id: {
            type: 'string',
            title: 'Loaner Id'
        }
    },
    type: 'object',
    required: ['id', 'name', 'loaner_id'],
    title: 'ItemSimple'
} as const;

export const $ItemUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        suggested_caution: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Suggested Caution'
        },
        total_quantity: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Total Quantity'
        },
        suggested_lending_duration: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Suggested Lending Duration',
            description: 'duration in seconds'
        }
    },
    type: 'object',
    title: 'ItemUpdate'
} as const;

export const $Kinds = {
    type: 'string',
    enum: ['Comité', 'Section AE', 'Club AE', 'Section USE', 'Club USE', 'Asso indé'],
    title: 'Kinds'
} as const;

export const $KindsReturn = {
    properties: {
        kinds: {
            items: {
                '$ref': '#/components/schemas/Kinds'
            },
            type: 'array',
            title: 'Kinds'
        }
    },
    type: 'object',
    required: ['kinds'],
    title: 'KindsReturn'
} as const;

export const $ListBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        type: {
            '$ref': '#/components/schemas/ListType'
        },
        section_id: {
            type: 'string',
            title: 'Section Id'
        },
        members: {
            items: {
                '$ref': '#/components/schemas/ListMemberBase'
            },
            type: 'array',
            title: 'Members'
        },
        program: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Program'
        }
    },
    type: 'object',
    required: ['name', 'description', 'type', 'section_id', 'members'],
    title: 'ListBase',
    description: 'Base schema for a list.'
} as const;

export const $ListEdit = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ListType'
                },
                {
                    type: 'null'
                }
            ]
        },
        members: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/ListMemberBase'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Members'
        },
        program: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Program'
        }
    },
    type: 'object',
    title: 'ListEdit'
} as const;

export const $ListMemberBase = {
    properties: {
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        role: {
            type: 'string',
            title: 'Role'
        }
    },
    type: 'object',
    required: ['user_id', 'role'],
    title: 'ListMemberBase'
} as const;

export const $ListMemberComplete = {
    properties: {
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        role: {
            type: 'string',
            title: 'Role'
        },
        user: {
            '$ref': '#/components/schemas/CoreUserSimple'
        }
    },
    type: 'object',
    required: ['user_id', 'role', 'user'],
    title: 'ListMemberComplete'
} as const;

export const $ListReturn = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        type: {
            '$ref': '#/components/schemas/ListType'
        },
        section: {
            '$ref': '#/components/schemas/SectionComplete'
        },
        members: {
            items: {
                '$ref': '#/components/schemas/ListMemberComplete'
            },
            type: 'array',
            title: 'Members'
        },
        program: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Program'
        }
    },
    type: 'object',
    required: ['id', 'name', 'description', 'type', 'section', 'members'],
    title: 'ListReturn'
} as const;

export const $ListType = {
    type: 'string',
    enum: ['Serio', 'Pipo', 'Blank'],
    title: 'ListType',
    description: 'A list can be "Serios" or "Pipo". There will also be one "Blank" list by section that will be automatically added when the vote is open.'
} as const;

export const $Loan = {
    properties: {
        borrower_id: {
            type: 'string',
            title: 'Borrower Id'
        },
        loaner_id: {
            type: 'string',
            title: 'Loaner Id'
        },
        start: {
            type: 'string',
            format: 'date',
            title: 'Start'
        },
        end: {
            type: 'string',
            format: 'date',
            title: 'End'
        },
        notes: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        },
        caution: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Caution'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        returned: {
            type: 'boolean',
            title: 'Returned'
        },
        returned_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Returned Date'
        },
        items_qty: {
            items: {
                '$ref': '#/components/schemas/ItemQuantity'
            },
            type: 'array',
            title: 'Items Qty'
        },
        borrower: {
            '$ref': '#/components/schemas/CoreUserSimple'
        },
        loaner: {
            '$ref': '#/components/schemas/Loaner'
        }
    },
    type: 'object',
    required: ['borrower_id', 'loaner_id', 'start', 'end', 'id', 'returned', 'returned_date', 'items_qty', 'borrower', 'loaner'],
    title: 'Loan',
    description: 'A complete representation of a Loan which can be sent by the API'
} as const;

export const $LoanCreation = {
    properties: {
        borrower_id: {
            type: 'string',
            title: 'Borrower Id'
        },
        loaner_id: {
            type: 'string',
            title: 'Loaner Id'
        },
        start: {
            type: 'string',
            format: 'date',
            title: 'Start'
        },
        end: {
            type: 'string',
            format: 'date',
            title: 'End'
        },
        notes: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        },
        caution: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Caution'
        },
        items_borrowed: {
            items: {
                '$ref': '#/components/schemas/ItemBorrowed'
            },
            type: 'array',
            title: 'Items Borrowed'
        }
    },
    type: 'object',
    required: ['borrower_id', 'loaner_id', 'start', 'end', 'items_borrowed'],
    title: 'LoanCreation',
    description: 'A schema used to create a new loan'
} as const;

export const $LoanExtend = {
    properties: {
        end: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End',
            description: 'A new return date for the Loan'
        },
        duration: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Duration',
            description: 'The duration by which the loan should be extended in seconds'
        }
    },
    type: 'object',
    title: 'LoanExtend'
} as const;

export const $LoanUpdate = {
    properties: {
        borrower_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Borrower Id'
        },
        start: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start'
        },
        end: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End'
        },
        notes: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Notes'
        },
        caution: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Caution'
        },
        returned: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Returned'
        },
        items_borrowed: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/ItemBorrowed'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Items Borrowed'
        }
    },
    type: 'object',
    title: 'LoanUpdate',
    description: 'When the client asks to update the Loan with a PATCH request, they should be able to change the loan items.'
} as const;

export const $Loaner = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        group_manager_id: {
            type: 'string',
            title: 'Group Manager Id',
            description: 'The group manager id should by a group identifier'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'group_manager_id', 'id'],
    title: 'Loaner'
} as const;

export const $LoanerBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        group_manager_id: {
            type: 'string',
            title: 'Group Manager Id',
            description: 'The group manager id should by a group identifier'
        }
    },
    type: 'object',
    required: ['name', 'group_manager_id'],
    title: 'LoanerBase'
} as const;

export const $LoanerUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        group_manager_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group Manager Id'
        }
    },
    type: 'object',
    title: 'LoanerUpdate'
} as const;

export const $MailMigrationRequest = {
    properties: {
        new_email: {
            type: 'string',
            title: 'New Email'
        }
    },
    type: 'object',
    required: ['new_email'],
    title: 'MailMigrationRequest'
} as const;

export const $Manager = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        group_id: {
            type: 'string',
            title: 'Group Id'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'group_id', 'id'],
    title: 'Manager'
} as const;

export const $ManagerBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        group_id: {
            type: 'string',
            title: 'Group Id'
        }
    },
    type: 'object',
    required: ['name', 'group_id'],
    title: 'ManagerBase'
} as const;

export const $ManagerUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        group_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group Id'
        }
    },
    type: 'object',
    title: 'ManagerUpdate'
} as const;

export const $MeetingPlace = {
    type: 'string',
    enum: ['centrale', 'bellecour', 'anyway'],
    title: 'MeetingPlace'
} as const;

export const $MemberComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        firstname: {
            type: 'string',
            title: 'Firstname'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        account_type: {
            '$ref': '#/components/schemas/AccountType'
        },
        school_id: {
            type: 'string',
            format: 'uuid',
            title: 'School Id'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        promo: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Promo'
        },
        memberships: {
            items: {
                '$ref': '#/components/schemas/MembershipComplete'
            },
            type: 'array',
            title: 'Memberships'
        }
    },
    type: 'object',
    required: ['name', 'firstname', 'id', 'account_type', 'school_id', 'email', 'memberships'],
    title: 'MemberComplete'
} as const;

export const $MembershipComplete = {
    properties: {
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        association_id: {
            type: 'string',
            title: 'Association Id'
        },
        mandate_year: {
            type: 'integer',
            title: 'Mandate Year'
        },
        role_name: {
            type: 'string',
            title: 'Role Name'
        },
        role_tags: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Role Tags'
        },
        member_order: {
            type: 'integer',
            title: 'Member Order'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['user_id', 'association_id', 'mandate_year', 'role_name', 'member_order', 'id'],
    title: 'MembershipComplete'
} as const;

export const $MembershipEdit = {
    properties: {
        role_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Role Name'
        },
        role_tags: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Role Tags'
        },
        member_order: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Member Order'
        }
    },
    type: 'object',
    title: 'MembershipEdit'
} as const;

export const $MembershipSimple = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        manager_group_id: {
            type: 'string',
            title: 'Manager Group Id'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'manager_group_id', 'id'],
    title: 'MembershipSimple'
} as const;

export const $MembershipUserMappingEmail = {
    properties: {
        user_email: {
            type: 'string',
            title: 'User Email'
        },
        start_date: {
            type: 'string',
            format: 'date',
            title: 'Start Date'
        },
        end_date: {
            type: 'string',
            format: 'date',
            title: 'End Date'
        }
    },
    type: 'object',
    required: ['user_email', 'start_date', 'end_date'],
    title: 'MembershipUserMappingEmail'
} as const;

export const $ModuleVisibility = {
    properties: {
        root: {
            type: 'string',
            title: 'Root'
        },
        allowed_group_ids: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Allowed Group Ids'
        },
        allowed_account_types: {
            items: {
                '$ref': '#/components/schemas/AccountType'
            },
            type: 'array',
            title: 'Allowed Account Types'
        }
    },
    type: 'object',
    required: ['root', 'allowed_group_ids', 'allowed_account_types'],
    title: 'ModuleVisibility'
} as const;

export const $ModuleVisibilityCreate = {
    properties: {
        root: {
            type: 'string',
            title: 'Root'
        },
        allowed_group_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Allowed Group Id'
        },
        allowed_account_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AccountType'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['root'],
    title: 'ModuleVisibilityCreate'
} as const;

export const $OrderBase = {
    properties: {
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        delivery_id: {
            type: 'string',
            title: 'Delivery Id'
        },
        products_ids: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Products Ids'
        },
        collection_slot: {
            '$ref': '#/components/schemas/AmapSlotType'
        },
        products_quantity: {
            items: {
                type: 'integer'
            },
            type: 'array',
            title: 'Products Quantity'
        }
    },
    type: 'object',
    required: ['user_id', 'delivery_id', 'products_ids', 'collection_slot', 'products_quantity'],
    title: 'OrderBase'
} as const;

export const $OrderEdit = {
    properties: {
        products_ids: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Products Ids'
        },
        collection_slot: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/AmapSlotType'
                },
                {
                    type: 'null'
                }
            ]
        },
        products_quantity: {
            anyOf: [
                {
                    items: {
                        type: 'integer'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Products Quantity'
        }
    },
    type: 'object',
    title: 'OrderEdit'
} as const;

export const $OrderReturn = {
    properties: {
        user: {
            '$ref': '#/components/schemas/CoreUserSimple'
        },
        delivery_id: {
            type: 'string',
            title: 'Delivery Id'
        },
        productsdetail: {
            items: {
                '$ref': '#/components/schemas/ProductQuantity'
            },
            type: 'array',
            title: 'Productsdetail'
        },
        collection_slot: {
            '$ref': '#/components/schemas/AmapSlotType'
        },
        order_id: {
            type: 'string',
            title: 'Order Id'
        },
        amount: {
            type: 'number',
            title: 'Amount'
        },
        ordering_date: {
            type: 'string',
            format: 'date-time',
            title: 'Ordering Date'
        },
        delivery_date: {
            type: 'string',
            format: 'date',
            title: 'Delivery Date'
        }
    },
    type: 'object',
    required: ['user', 'delivery_id', 'productsdetail', 'collection_slot', 'order_id', 'amount', 'ordering_date', 'delivery_date'],
    title: 'OrderReturn'
} as const;

export const $PackTicketBase = {
    properties: {
        price: {
            type: 'number',
            title: 'Price'
        },
        pack_size: {
            type: 'integer',
            title: 'Pack Size'
        },
        raffle_id: {
            type: 'string',
            title: 'Raffle Id'
        }
    },
    type: 'object',
    required: ['price', 'pack_size', 'raffle_id'],
    title: 'PackTicketBase'
} as const;

export const $PackTicketEdit = {
    properties: {
        raffle_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Raffle Id'
        },
        price: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Price'
        },
        pack_size: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Pack Size'
        }
    },
    type: 'object',
    title: 'PackTicketEdit'
} as const;

export const $PackTicketSimple = {
    properties: {
        price: {
            type: 'number',
            title: 'Price'
        },
        pack_size: {
            type: 'integer',
            title: 'Pack Size'
        },
        raffle_id: {
            type: 'string',
            title: 'Raffle Id'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['price', 'pack_size', 'raffle_id', 'id'],
    title: 'PackTicketSimple'
} as const;

export const $PaperBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        release_date: {
            type: 'string',
            format: 'date',
            title: 'Release Date'
        }
    },
    type: 'object',
    required: ['name', 'release_date'],
    title: 'PaperBase',
    description: "Base schema for paper's model"
} as const;

export const $PaperComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        release_date: {
            type: 'string',
            format: 'date',
            title: 'Release Date'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'release_date', 'id'],
    title: 'PaperComplete'
} as const;

export const $PaperUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        release_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Release Date'
        }
    },
    type: 'object',
    title: 'PaperUpdate'
} as const;

export const $Participant = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        firstname: {
            type: 'string',
            title: 'Firstname'
        },
        birthday: {
            type: 'string',
            format: 'date',
            title: 'Birthday'
        },
        phone: {
            type: 'string',
            title: 'Phone'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        bike_size: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Size'
                },
                {
                    type: 'null'
                }
            ]
        },
        t_shirt_size: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Size'
                },
                {
                    type: 'null'
                }
            ]
        },
        situation: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Situation'
        },
        validation_progress: {
            type: 'number',
            title: 'Validation Progress'
        },
        payment: {
            type: 'boolean',
            title: 'Payment'
        },
        t_shirt_payment: {
            type: 'boolean',
            title: 'T Shirt Payment'
        },
        number_of_document: {
            type: 'integer',
            title: 'Number Of Document'
        },
        number_of_validated_document: {
            type: 'integer',
            title: 'Number Of Validated Document'
        },
        address: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Address'
        },
        other_school: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Other School'
        },
        company: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Company'
        },
        diet: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Diet'
        },
        id_card: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Document'
                },
                {
                    type: 'null'
                }
            ]
        },
        medical_certificate: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Document'
                },
                {
                    type: 'null'
                }
            ]
        },
        security_file: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SecurityFile'
                },
                {
                    type: 'null'
                }
            ]
        },
        student_card: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Document'
                },
                {
                    type: 'null'
                }
            ]
        },
        raid_rules: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Document'
                },
                {
                    type: 'null'
                }
            ]
        },
        parent_authorization: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Document'
                },
                {
                    type: 'null'
                }
            ]
        },
        attestation_on_honour: {
            type: 'boolean',
            title: 'Attestation On Honour'
        },
        is_minor: {
            type: 'boolean',
            title: 'Is Minor'
        }
    },
    type: 'object',
    required: ['name', 'firstname', 'birthday', 'phone', 'email', 'id', 'bike_size', 't_shirt_size', 'situation', 'validation_progress', 'payment', 't_shirt_payment', 'number_of_document', 'number_of_validated_document', 'address', 'id_card', 'medical_certificate', 'security_file', 'attestation_on_honour', 'is_minor'],
    title: 'Participant'
} as const;

export const $ParticipantBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        firstname: {
            type: 'string',
            title: 'Firstname'
        },
        birthday: {
            type: 'string',
            format: 'date',
            title: 'Birthday'
        },
        phone: {
            type: 'string',
            title: 'Phone'
        },
        email: {
            type: 'string',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['name', 'firstname', 'birthday', 'phone', 'email'],
    title: 'ParticipantBase'
} as const;

export const $ParticipantPreview = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        firstname: {
            type: 'string',
            title: 'Firstname'
        },
        birthday: {
            type: 'string',
            format: 'date',
            title: 'Birthday'
        },
        phone: {
            type: 'string',
            title: 'Phone'
        },
        email: {
            type: 'string',
            title: 'Email'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        bike_size: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Size'
                },
                {
                    type: 'null'
                }
            ]
        },
        t_shirt_size: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Size'
                },
                {
                    type: 'null'
                }
            ]
        },
        situation: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Situation'
        },
        validation_progress: {
            type: 'number',
            title: 'Validation Progress'
        },
        payment: {
            type: 'boolean',
            title: 'Payment'
        },
        t_shirt_payment: {
            type: 'boolean',
            title: 'T Shirt Payment'
        },
        number_of_document: {
            type: 'integer',
            title: 'Number Of Document'
        },
        number_of_validated_document: {
            type: 'integer',
            title: 'Number Of Validated Document'
        }
    },
    type: 'object',
    required: ['name', 'firstname', 'birthday', 'phone', 'email', 'id', 'bike_size', 't_shirt_size', 'situation', 'validation_progress', 'payment', 't_shirt_payment', 'number_of_document', 'number_of_validated_document'],
    title: 'ParticipantPreview'
} as const;

export const $ParticipantUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        firstname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Firstname'
        },
        birthday: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Birthday'
        },
        address: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Address'
        },
        phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Phone'
        },
        email: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        bike_size: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Size'
                },
                {
                    type: 'null'
                }
            ]
        },
        t_shirt_size: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Size'
                },
                {
                    type: 'null'
                }
            ]
        },
        situation: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Situation'
        },
        other_school: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Other School'
        },
        company: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Company'
        },
        diet: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Diet'
        },
        attestation_on_honour: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Attestation On Honour'
        },
        id_card_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id Card Id'
        },
        medical_certificate_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Medical Certificate Id'
        },
        security_file_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Security File Id'
        },
        student_card_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Student Card Id'
        },
        raid_rules_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Raid Rules Id'
        },
        parent_authorization_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parent Authorization Id'
        }
    },
    type: 'object',
    title: 'ParticipantUpdate'
} as const;

export const $PaymentBase = {
    properties: {
        total: {
            type: 'integer',
            title: 'Total'
        },
        payment_type: {
            '$ref': '#/components/schemas/PaymentType'
        }
    },
    type: 'object',
    required: ['total', 'payment_type'],
    title: 'PaymentBase'
} as const;

export const $PaymentComplete = {
    properties: {
        total: {
            type: 'integer',
            title: 'Total'
        },
        payment_type: {
            '$ref': '#/components/schemas/PaymentType'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        year: {
            type: 'integer',
            title: 'Year'
        }
    },
    type: 'object',
    required: ['total', 'payment_type', 'id', 'user_id', 'year'],
    title: 'PaymentComplete'
} as const;

export const $PaymentType = {
    type: 'string',
    enum: ['cash', 'check', 'HelloAsso', 'card', 'archived'],
    title: 'PaymentType'
} as const;

export const $PaymentUrl = {
    properties: {
        url: {
            type: 'string',
            title: 'Url'
        }
    },
    type: 'object',
    required: ['url'],
    title: 'PaymentUrl'
} as const;

export const $PlantComplete = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        reference: {
            type: 'string',
            title: 'Reference'
        },
        state: {
            '$ref': '#/components/schemas/PlantState'
        },
        species_id: {
            type: 'string',
            format: 'uuid',
            title: 'Species Id'
        },
        propagation_method: {
            '$ref': '#/components/schemas/PropagationMethod'
        },
        nb_seeds_envelope: {
            type: 'integer',
            title: 'Nb Seeds Envelope',
            default: 1
        },
        planting_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Planting Date'
        },
        borrower_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Borrower Id'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        previous_note: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Previous Note'
        },
        current_note: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Current Note'
        },
        borrowing_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Borrowing Date'
        },
        ancestor_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ancestor Id'
        },
        confidential: {
            type: 'boolean',
            title: 'Confidential',
            default: false
        }
    },
    type: 'object',
    required: ['id', 'reference', 'state', 'species_id', 'propagation_method'],
    title: 'PlantComplete'
} as const;

export const $PlantCreation = {
    properties: {
        species_id: {
            type: 'string',
            format: 'uuid',
            title: 'Species Id'
        },
        propagation_method: {
            '$ref': '#/components/schemas/PropagationMethod'
        },
        nb_seeds_envelope: {
            type: 'integer',
            title: 'Nb Seeds Envelope',
            default: 1
        },
        ancestor_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ancestor Id'
        },
        previous_note: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Previous Note'
        },
        confidential: {
            type: 'boolean',
            title: 'Confidential',
            default: false
        }
    },
    type: 'object',
    required: ['species_id', 'propagation_method'],
    title: 'PlantCreation'
} as const;

export const $PlantEdit = {
    properties: {
        state: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PlantState'
                },
                {
                    type: 'null'
                }
            ]
        },
        current_note: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Current Note'
        },
        confidential: {
            type: 'boolean',
            title: 'Confidential',
            default: false
        },
        planting_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Planting Date'
        },
        borrowing_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Borrowing Date'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        }
    },
    type: 'object',
    title: 'PlantEdit'
} as const;

export const $PlantSimple = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        reference: {
            type: 'string',
            title: 'Reference'
        },
        state: {
            '$ref': '#/components/schemas/PlantState'
        },
        species_id: {
            type: 'string',
            format: 'uuid',
            title: 'Species Id'
        },
        propagation_method: {
            '$ref': '#/components/schemas/PropagationMethod'
        },
        nb_seeds_envelope: {
            type: 'integer',
            title: 'Nb Seeds Envelope',
            default: 1
        },
        planting_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Planting Date'
        },
        borrower_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Borrower Id'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        }
    },
    type: 'object',
    required: ['id', 'reference', 'state', 'species_id', 'propagation_method'],
    title: 'PlantSimple'
} as const;

export const $PlantState = {
    type: 'string',
    enum: ['en attente', 'récupérée', 'consommée'],
    title: 'PlantState'
} as const;

export const $PrizeBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        raffle_id: {
            type: 'string',
            title: 'Raffle Id'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity'
        }
    },
    type: 'object',
    required: ['name', 'description', 'raffle_id', 'quantity'],
    title: 'PrizeBase'
} as const;

export const $PrizeEdit = {
    properties: {
        raffle_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Raffle Id'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        quantity: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Quantity'
        }
    },
    type: 'object',
    title: 'PrizeEdit'
} as const;

export const $PrizeSimple = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        raffle_id: {
            type: 'string',
            title: 'Raffle Id'
        },
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'description', 'raffle_id', 'quantity', 'id'],
    title: 'PrizeSimple'
} as const;

export const $ProductBase = {
    properties: {
        name_fr: {
            type: 'string',
            title: 'Name Fr'
        },
        name_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name En'
        },
        description_fr: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description Fr'
        },
        description_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description En'
        },
        available_online: {
            type: 'boolean',
            title: 'Available Online'
        },
        needs_validation: {
            type: 'boolean',
            title: 'Needs Validation',
            default: true
        },
        related_membership: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MembershipSimple'
                },
                {
                    type: 'null'
                }
            ]
        },
        tickets: {
            items: {
                '$ref': '#/components/schemas/GenerateTicketBase'
            },
            type: 'array',
            title: 'Tickets',
            default: []
        },
        product_constraints: {
            items: {
                type: 'string',
                format: 'uuid'
            },
            type: 'array',
            title: 'Product Constraints'
        },
        document_constraints: {
            items: {
                type: 'string',
                format: 'uuid'
            },
            type: 'array',
            title: 'Document Constraints'
        }
    },
    type: 'object',
    required: ['name_fr', 'available_online', 'product_constraints', 'document_constraints'],
    title: 'ProductBase'
} as const;

export const $ProductCompleteNoConstraint = {
    properties: {
        name_fr: {
            type: 'string',
            title: 'Name Fr'
        },
        name_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name En'
        },
        description_fr: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description Fr'
        },
        description_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description En'
        },
        available_online: {
            type: 'boolean',
            title: 'Available Online'
        },
        needs_validation: {
            type: 'boolean',
            title: 'Needs Validation'
        },
        year: {
            type: 'integer',
            title: 'Year'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        seller_id: {
            type: 'string',
            format: 'uuid',
            title: 'Seller Id'
        },
        variants: {
            items: {
                '$ref': '#/components/schemas/ProductVariantComplete'
            },
            type: 'array',
            title: 'Variants',
            default: []
        },
        related_membership: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MembershipSimple'
                },
                {
                    type: 'null'
                }
            ]
        },
        tickets: {
            items: {
                '$ref': '#/components/schemas/GenerateTicketComplete'
            },
            type: 'array',
            title: 'Tickets'
        }
    },
    type: 'object',
    required: ['name_fr', 'available_online', 'needs_validation', 'year', 'id', 'seller_id', 'tickets'],
    title: 'ProductCompleteNoConstraint'
} as const;

export const $ProductQuantity = {
    properties: {
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        product: {
            '$ref': '#/components/schemas/app__modules__amap__schemas_amap__ProductComplete'
        }
    },
    type: 'object',
    required: ['quantity', 'product'],
    title: 'ProductQuantity'
} as const;

export const $ProductSimple = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        price: {
            type: 'number',
            title: 'Price'
        },
        category: {
            type: 'string',
            title: 'Category'
        }
    },
    type: 'object',
    required: ['name', 'price', 'category'],
    title: 'ProductSimple'
} as const;

export const $ProductVariantBase = {
    properties: {
        name_fr: {
            type: 'string',
            title: 'Name Fr'
        },
        name_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name En'
        },
        description_fr: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description Fr'
        },
        description_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description En'
        },
        price: {
            type: 'integer',
            title: 'Price'
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled'
        },
        unique: {
            type: 'boolean',
            title: 'Unique'
        },
        allowed_curriculum: {
            items: {
                type: 'string',
                format: 'uuid'
            },
            type: 'array',
            title: 'Allowed Curriculum'
        },
        related_membership_added_duration: {
            anyOf: [
                {
                    type: 'string',
                    format: 'duration'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Related Membership Added Duration'
        }
    },
    type: 'object',
    required: ['name_fr', 'price', 'enabled', 'unique', 'allowed_curriculum'],
    title: 'ProductVariantBase'
} as const;

export const $ProductVariantComplete = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        year: {
            type: 'integer',
            title: 'Year'
        },
        product_id: {
            type: 'string',
            format: 'uuid',
            title: 'Product Id'
        },
        name_fr: {
            type: 'string',
            title: 'Name Fr'
        },
        name_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name En'
        },
        description_fr: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description Fr'
        },
        description_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description En'
        },
        price: {
            type: 'integer',
            title: 'Price'
        },
        enabled: {
            type: 'boolean',
            title: 'Enabled'
        },
        unique: {
            type: 'boolean',
            title: 'Unique'
        },
        allowed_curriculum: {
            items: {
                '$ref': '#/components/schemas/CurriculumComplete'
            },
            type: 'array',
            title: 'Allowed Curriculum',
            default: []
        },
        related_membership_added_duration: {
            anyOf: [
                {
                    type: 'string',
                    format: 'duration'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Related Membership Added Duration'
        }
    },
    type: 'object',
    required: ['id', 'year', 'product_id', 'name_fr', 'price', 'enabled', 'unique'],
    title: 'ProductVariantComplete'
} as const;

export const $ProductVariantEdit = {
    properties: {
        name_fr: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name Fr'
        },
        name_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name En'
        },
        description_fr: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description Fr'
        },
        description_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description En'
        },
        price: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Price'
        },
        enabled: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Enabled'
        },
        unique: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Unique'
        },
        allowed_curriculum: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Allowed Curriculum'
        },
        related_membership_added_duration: {
            anyOf: [
                {
                    type: 'string',
                    format: 'duration'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Related Membership Added Duration'
        }
    },
    type: 'object',
    title: 'ProductVariantEdit'
} as const;

export const $PropagationMethod = {
    type: 'string',
    enum: ['bouture', 'graine'],
    title: 'PropagationMethod'
} as const;

export const $PurchaseBase = {
    properties: {
        quantity: {
            type: 'integer',
            title: 'Quantity'
        }
    },
    type: 'object',
    required: ['quantity'],
    title: 'PurchaseBase'
} as const;

export const $PurchaseComplete = {
    properties: {
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        product_variant_id: {
            type: 'string',
            format: 'uuid',
            title: 'Product Variant Id'
        },
        validated: {
            type: 'boolean',
            title: 'Validated'
        },
        purchased_on: {
            type: 'string',
            format: 'date-time',
            title: 'Purchased On'
        }
    },
    type: 'object',
    required: ['quantity', 'user_id', 'product_variant_id', 'validated', 'purchased_on'],
    title: 'PurchaseComplete'
} as const;

export const $PurchaseReturn = {
    properties: {
        quantity: {
            type: 'integer',
            title: 'Quantity'
        },
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        product_variant_id: {
            type: 'string',
            format: 'uuid',
            title: 'Product Variant Id'
        },
        validated: {
            type: 'boolean',
            title: 'Validated'
        },
        purchased_on: {
            type: 'string',
            format: 'date-time',
            title: 'Purchased On'
        },
        price: {
            type: 'integer',
            title: 'Price'
        },
        product: {
            '$ref': '#/components/schemas/app__modules__cdr__schemas_cdr__ProductComplete'
        },
        seller: {
            '$ref': '#/components/schemas/SellerComplete'
        }
    },
    type: 'object',
    required: ['quantity', 'user_id', 'product_variant_id', 'validated', 'purchased_on', 'price', 'product', 'seller'],
    title: 'PurchaseReturn'
} as const;

export const $RaffleBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RaffleStatusType'
                },
                {
                    type: 'null'
                }
            ]
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        group_id: {
            type: 'string',
            title: 'Group Id'
        }
    },
    type: 'object',
    required: ['name', 'group_id'],
    title: 'RaffleBase',
    description: 'Base schema for raffles'
} as const;

export const $RaffleComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        status: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RaffleStatusType'
                },
                {
                    type: 'null'
                }
            ]
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        group_id: {
            type: 'string',
            title: 'Group Id'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'group_id', 'id'],
    title: 'RaffleComplete'
} as const;

export const $RaffleEdit = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    title: 'RaffleEdit'
} as const;

export const $RaffleStats = {
    properties: {
        tickets_sold: {
            type: 'integer',
            title: 'Tickets Sold'
        },
        amount_raised: {
            type: 'number',
            title: 'Amount Raised'
        }
    },
    type: 'object',
    required: ['tickets_sold', 'amount_raised'],
    title: 'RaffleStats'
} as const;

export const $RaffleStatusType = {
    type: 'string',
    enum: ['creation', 'open', 'lock'],
    title: 'RaffleStatusType'
} as const;

export const $RaidDriveFoldersCreation = {
    properties: {
        parent_folder_id: {
            type: 'string',
            title: 'Parent Folder Id'
        }
    },
    type: 'object',
    required: ['parent_folder_id'],
    title: 'RaidDriveFoldersCreation'
} as const;

export const $RaidInformation = {
    properties: {
        raid_start_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Raid Start Date'
        },
        raid_end_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Raid End Date'
        },
        raid_registering_end_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Raid Registering End Date'
        },
        payment_link: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Payment Link'
        },
        contact: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contact'
        },
        president: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EmergencyContact'
                },
                {
                    type: 'null'
                }
            ]
        },
        volunteer_responsible: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EmergencyContact'
                },
                {
                    type: 'null'
                }
            ]
        },
        security_responsible: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EmergencyContact'
                },
                {
                    type: 'null'
                }
            ]
        },
        rescue: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EmergencyContact'
                },
                {
                    type: 'null'
                }
            ]
        },
        raid_rules_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Raid Rules Id'
        },
        raid_information_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Raid Information Id'
        }
    },
    type: 'object',
    title: 'RaidInformation'
} as const;

export const $RaidPrice = {
    properties: {
        student_price: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Student Price'
        },
        partner_price: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Partner Price'
        },
        external_price: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'External Price'
        },
        t_shirt_price: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'T Shirt Price'
        }
    },
    type: 'object',
    title: 'RaidPrice'
} as const;

export const $Recommendation = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        code: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code'
        },
        summary: {
            type: 'string',
            title: 'Summary'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        creation: {
            type: 'string',
            format: 'date-time',
            title: 'Creation'
        }
    },
    type: 'object',
    required: ['title', 'summary', 'description', 'id', 'creation'],
    title: 'Recommendation'
} as const;

export const $RecommendationBase = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        code: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code'
        },
        summary: {
            type: 'string',
            title: 'Summary'
        },
        description: {
            type: 'string',
            title: 'Description'
        }
    },
    type: 'object',
    required: ['title', 'summary', 'description'],
    title: 'RecommendationBase'
} as const;

export const $RecommendationEdit = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        code: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Code'
        },
        summary: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Summary'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        }
    },
    type: 'object',
    title: 'RecommendationEdit'
} as const;

export const $RefundBase = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        creation: {
            type: 'string',
            format: 'date-time',
            title: 'Creation'
        },
        transaction_id: {
            type: 'string',
            format: 'uuid',
            title: 'Transaction Id'
        },
        seller_user_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Seller User Id'
        },
        credited_wallet_id: {
            type: 'string',
            format: 'uuid',
            title: 'Credited Wallet Id'
        },
        debited_wallet_id: {
            type: 'string',
            format: 'uuid',
            title: 'Debited Wallet Id'
        }
    },
    type: 'object',
    required: ['id', 'total', 'creation', 'transaction_id', 'credited_wallet_id', 'debited_wallet_id'],
    title: 'RefundBase'
} as const;

export const $RefundInfo = {
    properties: {
        complete_refund: {
            type: 'boolean',
            title: 'Complete Refund'
        },
        amount: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Amount'
        }
    },
    type: 'object',
    required: ['complete_refund'],
    title: 'RefundInfo'
} as const;

export const $ResetPasswordRequest = {
    properties: {
        reset_token: {
            type: 'string',
            title: 'Reset Token'
        },
        new_password: {
            type: 'string',
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['reset_token', 'new_password'],
    title: 'ResetPasswordRequest'
} as const;

export const $RoleTagsReturn = {
    properties: {
        tags: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Tags'
        }
    },
    type: 'object',
    required: ['tags'],
    title: 'RoleTagsReturn'
} as const;

export const $RoomBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        manager_id: {
            type: 'string',
            title: 'Manager Id'
        }
    },
    type: 'object',
    required: ['name', 'manager_id'],
    title: 'RoomBase'
} as const;

export const $RoomComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        manager_id: {
            type: 'string',
            title: 'Manager Id'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'manager_id', 'id'],
    title: 'RoomComplete'
} as const;

export const $ScanInfo = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        tot: {
            type: 'integer',
            title: 'Tot'
        },
        iat: {
            type: 'string',
            format: 'date-time',
            title: 'Iat'
        },
        key: {
            type: 'string',
            format: 'uuid',
            title: 'Key'
        },
        store: {
            type: 'boolean',
            title: 'Store'
        },
        signature: {
            type: 'string',
            title: 'Signature'
        },
        bypass_membership: {
            type: 'boolean',
            title: 'Bypass Membership',
            default: false
        }
    },
    type: 'object',
    required: ['id', 'tot', 'iat', 'key', 'store', 'signature'],
    title: 'ScanInfo'
} as const;

export const $SectionBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        }
    },
    type: 'object',
    required: ['name', 'description'],
    title: 'SectionBase',
    description: 'Base schema for a section.'
} as const;

export const $SectionComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'description', 'id'],
    title: 'SectionComplete'
} as const;

export const $SecurityFile = {
    properties: {
        allergy: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Allergy'
        },
        asthma: {
            type: 'boolean',
            title: 'Asthma'
        },
        intensive_care_unit: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Intensive Care Unit'
        },
        intensive_care_unit_when: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Intensive Care Unit When'
        },
        ongoing_treatment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ongoing Treatment'
        },
        sicknesses: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sicknesses'
        },
        hospitalization: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Hospitalization'
        },
        surgical_operation: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Surgical Operation'
        },
        trauma: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Trauma'
        },
        family: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Family'
        },
        emergency_person_firstname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Emergency Person Firstname'
        },
        emergency_person_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Emergency Person Name'
        },
        emergency_person_phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Emergency Person Phone'
        },
        file_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'File Id'
        },
        validation: {
            '$ref': '#/components/schemas/DocumentValidation'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['asthma', 'validation', 'id'],
    title: 'SecurityFile'
} as const;

export const $SecurityFileBase = {
    properties: {
        allergy: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Allergy'
        },
        asthma: {
            type: 'boolean',
            title: 'Asthma'
        },
        intensive_care_unit: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Intensive Care Unit'
        },
        intensive_care_unit_when: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Intensive Care Unit When'
        },
        ongoing_treatment: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Ongoing Treatment'
        },
        sicknesses: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sicknesses'
        },
        hospitalization: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Hospitalization'
        },
        surgical_operation: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Surgical Operation'
        },
        trauma: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Trauma'
        },
        family: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Family'
        },
        emergency_person_firstname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Emergency Person Firstname'
        },
        emergency_person_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Emergency Person Name'
        },
        emergency_person_phone: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Emergency Person Phone'
        },
        file_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'File Id'
        }
    },
    type: 'object',
    required: ['asthma'],
    title: 'SecurityFileBase'
} as const;

export const $SeedLibraryInformation = {
    properties: {
        facebook_url: {
            type: 'string',
            title: 'Facebook Url',
            default: ''
        },
        forum_url: {
            type: 'string',
            title: 'Forum Url',
            default: ''
        },
        description: {
            type: 'string',
            title: 'Description',
            default: ''
        },
        contact: {
            type: 'string',
            title: 'Contact',
            default: ''
        }
    },
    type: 'object',
    title: 'SeedLibraryInformation'
} as const;

export const $Seller = {
    properties: {
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        store_id: {
            type: 'string',
            format: 'uuid',
            title: 'Store Id'
        },
        can_bank: {
            type: 'boolean',
            title: 'Can Bank'
        },
        can_see_history: {
            type: 'boolean',
            title: 'Can See History'
        },
        can_cancel: {
            type: 'boolean',
            title: 'Can Cancel'
        },
        can_manage_sellers: {
            type: 'boolean',
            title: 'Can Manage Sellers'
        },
        user: {
            '$ref': '#/components/schemas/CoreUserSimple'
        }
    },
    type: 'object',
    required: ['user_id', 'store_id', 'can_bank', 'can_see_history', 'can_cancel', 'can_manage_sellers', 'user'],
    title: 'Seller'
} as const;

export const $SellerBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        group_id: {
            type: 'string',
            title: 'Group Id'
        },
        order: {
            type: 'integer',
            title: 'Order'
        }
    },
    type: 'object',
    required: ['name', 'group_id', 'order'],
    title: 'SellerBase'
} as const;

export const $SellerComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        group_id: {
            type: 'string',
            title: 'Group Id'
        },
        order: {
            type: 'integer',
            title: 'Order'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'group_id', 'order', 'id'],
    title: 'SellerComplete'
} as const;

export const $SellerCreation = {
    properties: {
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        can_bank: {
            type: 'boolean',
            title: 'Can Bank'
        },
        can_see_history: {
            type: 'boolean',
            title: 'Can See History'
        },
        can_cancel: {
            type: 'boolean',
            title: 'Can Cancel'
        },
        can_manage_sellers: {
            type: 'boolean',
            title: 'Can Manage Sellers'
        }
    },
    type: 'object',
    required: ['user_id', 'can_bank', 'can_see_history', 'can_cancel', 'can_manage_sellers'],
    title: 'SellerCreation'
} as const;

export const $SellerEdit = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        group_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group Id'
        },
        order: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Order'
        }
    },
    type: 'object',
    title: 'SellerEdit'
} as const;

export const $SellerUpdate = {
    properties: {
        can_bank: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Can Bank'
        },
        can_see_history: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Can See History'
        },
        can_cancel: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Can Cancel'
        },
        can_manage_sellers: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Can Manage Sellers'
        }
    },
    type: 'object',
    title: 'SellerUpdate'
} as const;

export const $SignatureBase = {
    properties: {
        signature_type: {
            '$ref': '#/components/schemas/DocumentSignatureType'
        },
        numeric_signature_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Numeric Signature Id'
        }
    },
    type: 'object',
    required: ['signature_type'],
    title: 'SignatureBase'
} as const;

export const $SignatureComplete = {
    properties: {
        signature_type: {
            '$ref': '#/components/schemas/DocumentSignatureType'
        },
        numeric_signature_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Numeric Signature Id'
        },
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        document_id: {
            type: 'string',
            format: 'uuid',
            title: 'Document Id'
        }
    },
    type: 'object',
    required: ['signature_type', 'user_id', 'document_id'],
    title: 'SignatureComplete'
} as const;

export const $Size = {
    type: 'string',
    enum: ['XS', 'S', 'M', 'L', 'XL', 'None'],
    title: 'Size'
} as const;

export const $SpeciesBase = {
    properties: {
        prefix: {
            type: 'string',
            title: 'Prefix'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        difficulty: {
            type: 'integer',
            title: 'Difficulty'
        },
        species_type: {
            '$ref': '#/components/schemas/SpeciesType'
        },
        card: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Card'
        },
        nb_seeds_recommended: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nb Seeds Recommended'
        },
        start_season: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Season'
        },
        end_season: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Season'
        },
        time_maturation: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Time Maturation'
        }
    },
    type: 'object',
    required: ['prefix', 'name', 'difficulty', 'species_type'],
    title: 'SpeciesBase'
} as const;

export const $SpeciesComplete = {
    properties: {
        prefix: {
            type: 'string',
            title: 'Prefix'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        difficulty: {
            type: 'integer',
            title: 'Difficulty'
        },
        species_type: {
            '$ref': '#/components/schemas/SpeciesType'
        },
        card: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Card'
        },
        nb_seeds_recommended: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nb Seeds Recommended'
        },
        start_season: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Season'
        },
        end_season: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Season'
        },
        time_maturation: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Time Maturation'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['prefix', 'name', 'difficulty', 'species_type', 'id'],
    title: 'SpeciesComplete'
} as const;

export const $SpeciesEdit = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        prefix: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Prefix'
        },
        difficulty: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Difficulty'
        },
        card: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Card'
        },
        species_type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/SpeciesType'
                },
                {
                    type: 'null'
                }
            ]
        },
        nb_seeds_recommended: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nb Seeds Recommended'
        },
        start_season: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Season'
        },
        end_season: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Season'
        },
        time_maturation: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Time Maturation'
        }
    },
    type: 'object',
    title: 'SpeciesEdit'
} as const;

export const $SpeciesType = {
    type: 'string',
    enum: ['Plantes aromatiques', 'Plantes potagères', 'Plante d intérieur', 'Plantes fruitières', 'Cactus et succulentes', 'Plantes ornementales', 'Plantes grasses', 'Autre'],
    title: 'SpeciesType'
} as const;

export const $SpeciesTypesReturn = {
    properties: {
        species_type: {
            items: {
                '$ref': '#/components/schemas/SpeciesType'
            },
            type: 'array',
            title: 'Species Type'
        }
    },
    type: 'object',
    required: ['species_type'],
    title: 'SpeciesTypesReturn'
} as const;

export const $Status = {
    properties: {
        status: {
            allOf: [
                {
                    '$ref': '#/components/schemas/CdrStatus'
                }
            ],
            default: 'pending'
        }
    },
    type: 'object',
    title: 'Status'
} as const;

export const $StatusType = {
    type: 'string',
    enum: ['waiting', 'open', 'closed', 'counting', 'published'],
    title: 'StatusType',
    description: 'Status of the voting'
} as const;

export const $Store = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        structure_id: {
            type: 'string',
            format: 'uuid',
            title: 'Structure Id'
        },
        wallet_id: {
            type: 'string',
            format: 'uuid',
            title: 'Wallet Id'
        },
        structure: {
            '$ref': '#/components/schemas/Structure'
        }
    },
    type: 'object',
    required: ['name', 'id', 'structure_id', 'wallet_id', 'structure'],
    title: 'Store'
} as const;

export const $StoreBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'StoreBase'
} as const;

export const $StoreUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        }
    },
    type: 'object',
    title: 'StoreUpdate'
} as const;

export const $Structure = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        association_membership_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Association Membership Id'
        },
        manager_user_id: {
            type: 'string',
            title: 'Manager User Id'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        manager_user: {
            '$ref': '#/components/schemas/CoreUserSimple'
        },
        association_membership: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MembershipSimple'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['name', 'manager_user_id', 'id', 'manager_user', 'association_membership'],
    title: 'Structure'
} as const;

export const $StructureBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        association_membership_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Association Membership Id'
        },
        manager_user_id: {
            type: 'string',
            title: 'Manager User Id'
        }
    },
    type: 'object',
    required: ['name', 'manager_user_id'],
    title: 'StructureBase'
} as const;

export const $StructureTranfert = {
    properties: {
        new_manager_user_id: {
            type: 'string',
            title: 'New Manager User Id'
        }
    },
    type: 'object',
    required: ['new_manager_user_id'],
    title: 'StructureTranfert'
} as const;

export const $StructureUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        association_membership_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Association Membership Id'
        }
    },
    type: 'object',
    title: 'StructureUpdate'
} as const;

export const $TOSSignature = {
    properties: {
        accepted_tos_version: {
            type: 'integer',
            title: 'Accepted Tos Version'
        }
    },
    type: 'object',
    required: ['accepted_tos_version'],
    title: 'TOSSignature'
} as const;

export const $TOSSignatureResponse = {
    properties: {
        accepted_tos_version: {
            type: 'integer',
            title: 'Accepted Tos Version'
        },
        latest_tos_version: {
            type: 'integer',
            title: 'Latest Tos Version'
        },
        tos_content: {
            type: 'string',
            title: 'Tos Content'
        },
        max_transaction_total: {
            type: 'integer',
            title: 'Max Transaction Total',
            default: 0,
            deprecated: true
        },
        max_wallet_balance: {
            type: 'integer',
            title: 'Max Wallet Balance'
        }
    },
    type: 'object',
    required: ['accepted_tos_version', 'latest_tos_version', 'tos_content', 'max_wallet_balance'],
    title: 'TOSSignatureResponse'
} as const;

export const $Team = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        number: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Number'
        },
        captain: {
            '$ref': '#/components/schemas/Participant'
        },
        second: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Participant'
                },
                {
                    type: 'null'
                }
            ]
        },
        difficulty: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Difficulty'
                },
                {
                    type: 'null'
                }
            ]
        },
        meeting_place: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MeetingPlace'
                },
                {
                    type: 'null'
                }
            ]
        },
        validation_progress: {
            type: 'number',
            title: 'Validation Progress'
        },
        file_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'File Id'
        }
    },
    type: 'object',
    required: ['name', 'id', 'number', 'captain', 'second', 'difficulty', 'meeting_place', 'validation_progress', 'file_id'],
    title: 'Team'
} as const;

export const $TeamBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'TeamBase'
} as const;

export const $TeamPreview = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        number: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Number'
        },
        captain: {
            '$ref': '#/components/schemas/ParticipantPreview'
        },
        second: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ParticipantPreview'
                },
                {
                    type: 'null'
                }
            ]
        },
        difficulty: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Difficulty'
                },
                {
                    type: 'null'
                }
            ]
        },
        meeting_place: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MeetingPlace'
                },
                {
                    type: 'null'
                }
            ]
        },
        validation_progress: {
            type: 'number',
            title: 'Validation Progress'
        }
    },
    type: 'object',
    required: ['name', 'id', 'number', 'captain', 'second', 'difficulty', 'meeting_place', 'validation_progress'],
    title: 'TeamPreview'
} as const;

export const $TeamUpdate = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        number: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Number'
        },
        difficulty: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Difficulty'
                },
                {
                    type: 'null'
                }
            ]
        },
        meeting_place: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MeetingPlace'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'TeamUpdate'
} as const;

export const $TheMovieDB = {
    properties: {
        genres: {
            items: {
                additionalProperties: {
                    anyOf: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'string'
                        }
                    ]
                },
                type: 'object'
            },
            type: 'array',
            title: 'Genres'
        },
        overview: {
            type: 'string',
            title: 'Overview'
        },
        poster_path: {
            type: 'string',
            title: 'Poster Path'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        runtime: {
            type: 'integer',
            title: 'Runtime'
        },
        tagline: {
            type: 'string',
            title: 'Tagline'
        }
    },
    type: 'object',
    required: ['genres', 'overview', 'poster_path', 'title', 'runtime', 'tagline'],
    title: 'TheMovieDB'
} as const;

export const $Ticket = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        product_variant: {
            '$ref': '#/components/schemas/ProductVariantComplete'
        },
        user: {
            '$ref': '#/components/schemas/UserTicket'
        },
        scan_left: {
            type: 'integer',
            title: 'Scan Left'
        },
        tags: {
            type: 'string',
            title: 'Tags'
        },
        expiration: {
            type: 'string',
            format: 'date-time',
            title: 'Expiration'
        },
        name: {
            type: 'string',
            title: 'Name'
        }
    },
    type: 'object',
    required: ['id', 'product_variant', 'user', 'scan_left', 'tags', 'expiration', 'name'],
    title: 'Ticket'
} as const;

export const $TicketComplete = {
    properties: {
        pack_id: {
            type: 'string',
            title: 'Pack Id'
        },
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        winning_prize: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Winning Prize'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        prize: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PrizeSimple'
                },
                {
                    type: 'null'
                }
            ]
        },
        pack_ticket: {
            '$ref': '#/components/schemas/PackTicketSimple'
        },
        user: {
            '$ref': '#/components/schemas/CoreUserSimple'
        }
    },
    type: 'object',
    required: ['pack_id', 'user_id', 'id', 'pack_ticket', 'user'],
    title: 'TicketComplete'
} as const;

export const $TicketScan = {
    properties: {
        tag: {
            type: 'string',
            pattern: '[^,]+',
            title: 'Tag'
        }
    },
    type: 'object',
    required: ['tag'],
    title: 'TicketScan'
} as const;

export const $TicketSecret = {
    properties: {
        qr_code_secret: {
            type: 'string',
            format: 'uuid',
            title: 'Qr Code Secret'
        }
    },
    type: 'object',
    required: ['qr_code_secret'],
    title: 'TicketSecret'
} as const;

export const $TicketSimple = {
    properties: {
        pack_id: {
            type: 'string',
            title: 'Pack Id'
        },
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        winning_prize: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Winning Prize'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['pack_id', 'user_id', 'id'],
    title: 'TicketSimple'
} as const;

export const $TokenResponse = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            enum: ['bearer'],
            const: 'bearer',
            title: 'Token Type',
            default: 'bearer'
        },
        expires_in: {
            type: 'integer',
            title: 'Expires In',
            default: 1800
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        refresh_token: {
            type: 'string',
            title: 'Refresh Token'
        },
        id_token: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Id Token'
        }
    },
    type: 'object',
    required: ['access_token', 'refresh_token'],
    title: 'TokenResponse'
} as const;

export const $TopicUser = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        module_root: {
            type: 'string',
            title: 'Module Root'
        },
        topic_identifier: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Topic Identifier'
        },
        is_user_subscribed: {
            type: 'boolean',
            title: 'Is User Subscribed'
        }
    },
    type: 'object',
    required: ['id', 'name', 'module_root', 'topic_identifier', 'is_user_subscribed'],
    title: 'TopicUser'
} as const;

export const $TransactionBase = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        debited_wallet_id: {
            type: 'string',
            format: 'uuid',
            title: 'Debited Wallet Id'
        },
        credited_wallet_id: {
            type: 'string',
            format: 'uuid',
            title: 'Credited Wallet Id'
        },
        transaction_type: {
            '$ref': '#/components/schemas/TransactionType'
        },
        seller_user_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Seller User Id'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        creation: {
            type: 'string',
            format: 'date-time',
            title: 'Creation'
        },
        status: {
            '$ref': '#/components/schemas/TransactionStatus'
        },
        qr_code_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Qr Code Id'
        }
    },
    type: 'object',
    required: ['id', 'debited_wallet_id', 'credited_wallet_id', 'transaction_type', 'seller_user_id', 'total', 'creation', 'status'],
    title: 'TransactionBase'
} as const;

export const $TransactionStatus = {
    type: 'string',
    enum: ['confirmed', 'canceled', 'refunded', 'pending'],
    title: 'TransactionStatus',
    description: `CONFIRMED: The transaction has been confirmed and is complete.
CANCELED: The transaction has been canceled. It is used for transfer requests, for which the user has 15 minutes to complete the HelloAsso checkout
REFUNDED: The transaction between to wallets has been partially or totally refunded.
PENDING: The transaction is pending and has not yet been completed. It is used for transfer requests, for which the user has 15 minutes to complete the HelloAsso checkout`
} as const;

export const $TransactionType = {
    type: 'string',
    enum: ['direct', 'request', 'refund'],
    title: 'TransactionType'
} as const;

export const $Transfer = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        type: {
            '$ref': '#/components/schemas/TransferType'
        },
        transfer_identifier: {
            type: 'string',
            title: 'Transfer Identifier'
        },
        approver_user_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Approver User Id'
        },
        wallet_id: {
            type: 'string',
            format: 'uuid',
            title: 'Wallet Id'
        },
        total: {
            type: 'integer',
            title: 'Total'
        },
        creation: {
            type: 'string',
            format: 'date-time',
            title: 'Creation'
        },
        confirmed: {
            type: 'boolean',
            title: 'Confirmed'
        }
    },
    type: 'object',
    required: ['id', 'type', 'transfer_identifier', 'approver_user_id', 'wallet_id', 'total', 'creation', 'confirmed'],
    title: 'Transfer'
} as const;

export const $TransferInfo = {
    properties: {
        amount: {
            type: 'integer',
            title: 'Amount'
        },
        redirect_url: {
            type: 'string',
            title: 'Redirect Url'
        }
    },
    type: 'object',
    required: ['amount', 'redirect_url'],
    title: 'TransferInfo'
} as const;

export const $TransferType = {
    type: 'string',
    enum: ['hello_asso'],
    const: 'hello_asso',
    title: 'TransferType'
} as const;

export const $UserMembershipBase = {
    properties: {
        association_membership_id: {
            type: 'string',
            format: 'uuid',
            title: 'Association Membership Id'
        },
        start_date: {
            type: 'string',
            format: 'date',
            title: 'Start Date'
        },
        end_date: {
            type: 'string',
            format: 'date',
            title: 'End Date'
        }
    },
    type: 'object',
    required: ['association_membership_id', 'start_date', 'end_date'],
    title: 'UserMembershipBase'
} as const;

export const $UserMembershipComplete = {
    properties: {
        association_membership_id: {
            type: 'string',
            format: 'uuid',
            title: 'Association Membership Id'
        },
        start_date: {
            type: 'string',
            format: 'date',
            title: 'Start Date'
        },
        end_date: {
            type: 'string',
            format: 'date',
            title: 'End Date'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        user: {
            '$ref': '#/components/schemas/CoreUserSimple'
        }
    },
    type: 'object',
    required: ['association_membership_id', 'start_date', 'end_date', 'id', 'user_id', 'user'],
    title: 'UserMembershipComplete'
} as const;

export const $UserMembershipEdit = {
    properties: {
        start_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Date'
        },
        end_date: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Date'
        }
    },
    type: 'object',
    title: 'UserMembershipEdit'
} as const;

export const $UserStore = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        structure_id: {
            type: 'string',
            format: 'uuid',
            title: 'Structure Id'
        },
        wallet_id: {
            type: 'string',
            format: 'uuid',
            title: 'Wallet Id'
        },
        structure: {
            '$ref': '#/components/schemas/Structure'
        },
        can_bank: {
            type: 'boolean',
            title: 'Can Bank'
        },
        can_see_history: {
            type: 'boolean',
            title: 'Can See History'
        },
        can_cancel: {
            type: 'boolean',
            title: 'Can Cancel'
        },
        can_manage_sellers: {
            type: 'boolean',
            title: 'Can Manage Sellers'
        }
    },
    type: 'object',
    required: ['name', 'id', 'structure_id', 'wallet_id', 'structure', 'can_bank', 'can_see_history', 'can_cancel', 'can_manage_sellers'],
    title: 'UserStore'
} as const;

export const $UserTicket = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        firstname: {
            type: 'string',
            title: 'Firstname'
        },
        nickname: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Nickname'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        account_type: {
            '$ref': '#/components/schemas/AccountType'
        },
        school_id: {
            type: 'string',
            format: 'uuid',
            title: 'School Id'
        },
        promo: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Promo'
        },
        floor: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/FloorsType'
                },
                {
                    type: 'null'
                }
            ]
        },
        created_on: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Created On'
        }
    },
    type: 'object',
    required: ['name', 'firstname', 'id', 'account_type', 'school_id'],
    title: 'UserTicket'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const $VoteBase = {
    properties: {
        list_id: {
            type: 'string',
            title: 'List Id'
        }
    },
    type: 'object',
    required: ['list_id'],
    title: 'VoteBase',
    description: 'Base schema for a vote.'
} as const;

export const $VoteStats = {
    properties: {
        section_id: {
            type: 'string',
            title: 'Section Id'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['section_id', 'count'],
    title: 'VoteStats'
} as const;

export const $VoteStatus = {
    properties: {
        status: {
            '$ref': '#/components/schemas/StatusType'
        }
    },
    type: 'object',
    required: ['status'],
    title: 'VoteStatus'
} as const;

export const $VoterGroup = {
    properties: {
        group_id: {
            type: 'string',
            title: 'Group Id'
        }
    },
    type: 'object',
    required: ['group_id'],
    title: 'VoterGroup',
    description: 'Base schema for voters (groups allowed to vote).'
} as const;

export const $Wallet = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        type: {
            '$ref': '#/components/schemas/WalletType'
        },
        balance: {
            type: 'integer',
            title: 'Balance'
        },
        store: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Store'
                },
                {
                    type: 'null'
                }
            ]
        },
        user: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/CoreUser'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['id', 'type', 'balance', 'store', 'user'],
    title: 'Wallet'
} as const;

export const $WalletBase = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        type: {
            '$ref': '#/components/schemas/WalletType'
        },
        balance: {
            type: 'integer',
            title: 'Balance'
        }
    },
    type: 'object',
    required: ['id', 'type', 'balance'],
    title: 'WalletBase'
} as const;

export const $WalletDevice = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        wallet_id: {
            type: 'string',
            format: 'uuid',
            title: 'Wallet Id'
        },
        creation: {
            type: 'string',
            format: 'date-time',
            title: 'Creation'
        },
        status: {
            '$ref': '#/components/schemas/WalletDeviceStatus'
        }
    },
    type: 'object',
    required: ['name', 'id', 'wallet_id', 'creation', 'status'],
    title: 'WalletDevice'
} as const;

export const $WalletDeviceCreation = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        ed25519_public_key: {
            type: 'string',
            format: 'binary',
            title: 'Ed25519 Public Key'
        }
    },
    type: 'object',
    required: ['name', 'ed25519_public_key'],
    title: 'WalletDeviceCreation'
} as const;

export const $WalletDeviceStatus = {
    type: 'string',
    enum: ['inactive', 'active', 'revoked'],
    title: 'WalletDeviceStatus'
} as const;

export const $WalletType = {
    type: 'string',
    enum: ['user', 'store'],
    title: 'WalletType'
} as const;

export const $app__core__memberships__schemas_memberships__MembershipBase = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        manager_group_id: {
            type: 'string',
            title: 'Manager Group Id'
        }
    },
    type: 'object',
    required: ['name', 'manager_group_id'],
    title: 'MembershipBase'
} as const;

export const $app__modules__amap__schemas_amap__ProductComplete = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        price: {
            type: 'number',
            title: 'Price'
        },
        category: {
            type: 'string',
            title: 'Category'
        },
        id: {
            type: 'string',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'price', 'category', 'id'],
    title: 'ProductComplete'
} as const;

export const $app__modules__amap__schemas_amap__ProductEdit = {
    properties: {
        category: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Category'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        price: {
            anyOf: [
                {
                    type: 'number'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Price'
        }
    },
    type: 'object',
    title: 'ProductEdit'
} as const;

export const $app__modules__campaign__schemas_campaign__Result = {
    properties: {
        list_id: {
            type: 'string',
            title: 'List Id'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['list_id', 'count'],
    title: 'Result'
} as const;

export const $app__modules__cdr__schemas_cdr__ProductComplete = {
    properties: {
        name_fr: {
            type: 'string',
            title: 'Name Fr'
        },
        name_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name En'
        },
        description_fr: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description Fr'
        },
        description_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description En'
        },
        available_online: {
            type: 'boolean',
            title: 'Available Online'
        },
        needs_validation: {
            type: 'boolean',
            title: 'Needs Validation'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        year: {
            type: 'integer',
            title: 'Year'
        },
        seller_id: {
            type: 'string',
            format: 'uuid',
            title: 'Seller Id'
        },
        variants: {
            items: {
                '$ref': '#/components/schemas/ProductVariantComplete'
            },
            type: 'array',
            title: 'Variants',
            default: []
        },
        related_membership: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MembershipSimple'
                },
                {
                    type: 'null'
                }
            ]
        },
        product_constraints: {
            items: {
                '$ref': '#/components/schemas/ProductCompleteNoConstraint'
            },
            type: 'array',
            title: 'Product Constraints',
            default: []
        },
        document_constraints: {
            items: {
                '$ref': '#/components/schemas/DocumentComplete'
            },
            type: 'array',
            title: 'Document Constraints',
            default: []
        },
        tickets: {
            items: {
                '$ref': '#/components/schemas/GenerateTicketComplete'
            },
            type: 'array',
            title: 'Tickets',
            default: []
        }
    },
    type: 'object',
    required: ['name_fr', 'available_online', 'needs_validation', 'id', 'year', 'seller_id'],
    title: 'ProductComplete'
} as const;

export const $app__modules__cdr__schemas_cdr__ProductEdit = {
    properties: {
        name_fr: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name Fr'
        },
        name_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name En'
        },
        description_fr: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description Fr'
        },
        description_en: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description En'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        available_online: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Available Online'
        },
        related_membership: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/MembershipSimple'
                },
                {
                    type: 'null'
                }
            ]
        },
        product_constraints: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Product Constraints'
        },
        document_constraints: {
            anyOf: [
                {
                    items: {
                        type: 'string',
                        format: 'uuid'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Document Constraints'
        }
    },
    type: 'object',
    title: 'ProductEdit'
} as const;

export const $app__modules__phonebook__schemas_phonebook__MembershipBase = {
    properties: {
        user_id: {
            type: 'string',
            title: 'User Id'
        },
        association_id: {
            type: 'string',
            title: 'Association Id'
        },
        mandate_year: {
            type: 'integer',
            title: 'Mandate Year'
        },
        role_name: {
            type: 'string',
            title: 'Role Name'
        },
        role_tags: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Role Tags'
        },
        member_order: {
            type: 'integer',
            title: 'Member Order'
        }
    },
    type: 'object',
    required: ['user_id', 'association_id', 'mandate_year', 'role_name', 'member_order'],
    title: 'MembershipBase'
} as const;

export const $app__types__standard_responses__Result = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success',
            default: true
        }
    },
    type: 'object',
    title: 'Result'
} as const;