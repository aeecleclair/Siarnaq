// This file is auto-generated by @hey-api/openapi-ts
import type {
  PostAuthSimpleTokenData,
  PostAuthSimpleTokenError,
  PostAuthSimpleTokenResponse,
  GetAuthAuthorizeData,
  GetAuthAuthorizeError,
  GetAuthAuthorizeResponse,
  PostAuthAuthorizeData,
  PostAuthAuthorizeError,
  PostAuthAuthorizeResponse,
  PostAuthAuthorizationFlowAuthorizeValidationData,
  PostAuthTokenData,
  PostAuthTokenError,
  PostAuthTokenResponse,
  GetAuthUserinfoError,
  GetAuthUserinfoResponse,
  GetOidcAuthorizationFlowJwksUriError,
  GetOidcAuthorizationFlowJwksUriResponse,
  GetWellKnownOauthAuthorizationServerError,
  GetWellKnownOauthAuthorizationServerResponse,
  GetWellKnownOpenidConfigurationError,
  GetWellKnownOpenidConfigurationResponse,
  GetInformationError,
  GetInformationResponse,
  GetPrivacyError,
  GetPrivacyResponse,
  GetTermsAndConditionsError,
  GetTermsAndConditionsResponse,
  GetSupportError,
  GetSupportResponse,
  GetSecurityTxtError,
  GetSecurityTxtResponse,
  GetWellKnownSecurityTxtError,
  GetWellKnownSecurityTxtResponse,
  GetRobotsTxtError,
  GetRobotsTxtResponse,
  GetStyleFileCssData,
  GetStyleFileCssError,
  GetStyleFileCssResponse,
  GetFaviconIcoError,
  GetFaviconIcoResponse,
  GetModuleVisibilityError,
  GetModuleVisibilityResponse,
  PostModuleVisibilityData,
  PostModuleVisibilityError,
  PostModuleVisibilityResponse,
  GetModuleVisibilityMeError,
  GetModuleVisibilityMeResponse,
  DeleteModuleVisibilityRootGroupIdData,
  DeleteModuleVisibilityRootGroupIdError,
  DeleteModuleVisibilityRootGroupIdResponse,
  GetGroupsError,
  GetGroupsResponse,
  PostGroupsData,
  PostGroupsError,
  PostGroupsResponse,
  GetGroupsGroupIdData,
  GetGroupsGroupIdError,
  GetGroupsGroupIdResponse,
  PatchGroupsGroupIdData,
  PatchGroupsGroupIdError,
  PatchGroupsGroupIdResponse,
  DeleteGroupsGroupIdData,
  DeleteGroupsGroupIdError,
  DeleteGroupsGroupIdResponse,
  PostGroupsMembershipData,
  PostGroupsMembershipError,
  PostGroupsMembershipResponse,
  DeleteGroupsMembershipData,
  DeleteGroupsMembershipError,
  DeleteGroupsMembershipResponse,
  PostGroupsBatchMembershipData,
  PostGroupsBatchMembershipError,
  PostGroupsBatchMembershipResponse,
  DeleteGroupsBatchMembershipData,
  DeleteGroupsBatchMembershipError,
  DeleteGroupsBatchMembershipResponse,
  GetNotificationDevicesError,
  GetNotificationDevicesResponse,
  PostNotificationDevicesData,
  PostNotificationDevicesError,
  PostNotificationDevicesResponse,
  DeleteNotificationDevicesFirebaseTokenData,
  DeleteNotificationDevicesFirebaseTokenError,
  DeleteNotificationDevicesFirebaseTokenResponse,
  GetNotificationMessagesFirebaseTokenData,
  GetNotificationMessagesFirebaseTokenError,
  GetNotificationMessagesFirebaseTokenResponse,
  PostNotificationTopicsTopicStrSubscribeData,
  PostNotificationTopicsTopicStrSubscribeError,
  PostNotificationTopicsTopicStrSubscribeResponse,
  PostNotificationTopicsTopicStrUnsubscribeData,
  PostNotificationTopicsTopicStrUnsubscribeError,
  PostNotificationTopicsTopicStrUnsubscribeResponse,
  GetNotificationTopicsError,
  GetNotificationTopicsResponse,
  GetNotificationTopicsTopicData,
  GetNotificationTopicsTopicError,
  GetNotificationTopicsTopicResponse,
  PostNotificationSendError,
  PostNotificationSendResponse,
  PostNotificationSendFutureError,
  PostNotificationSendFutureResponse,
  GetUsersError,
  GetUsersResponse,
  GetUsersCountError,
  GetUsersCountResponse,
  GetUsersSearchData,
  GetUsersSearchError,
  GetUsersSearchResponse,
  GetUsersMeError,
  GetUsersMeResponse,
  PatchUsersMeData,
  PatchUsersMeError,
  PatchUsersMeResponse,
  PostUsersCreateData,
  PostUsersCreateError,
  PostUsersCreateResponse,
  PostUsersBatchCreationData,
  PostUsersBatchCreationError,
  PostUsersBatchCreationResponse,
  GetUsersActivateData,
  GetUsersActivateError,
  GetUsersActivateResponse,
  PostUsersActivateData,
  PostUsersActivateError,
  PostUsersActivateResponse,
  PostUsersMakeAdminError,
  PostUsersMakeAdminResponse,
  PostUsersRecoverData,
  PostUsersRecoverError,
  PostUsersRecoverResponse,
  PostUsersResetPasswordData,
  PostUsersResetPasswordError,
  PostUsersResetPasswordResponse,
  PostUsersMigrateMailData,
  PostUsersMigrateMailError,
  PostUsersMigrateMailResponse,
  GetUsersMigrateMailConfirmData,
  GetUsersMigrateMailConfirmError,
  GetUsersMigrateMailConfirmResponse,
  PostUsersChangePasswordData,
  PostUsersChangePasswordError,
  PostUsersChangePasswordResponse,
  GetUsersUserIdData,
  GetUsersUserIdError,
  GetUsersUserIdResponse,
  PatchUsersUserIdData,
  PatchUsersUserIdError,
  PatchUsersUserIdResponse,
  PostUsersMeAskDeletionError,
  PostUsersMeAskDeletionResponse,
  GetUsersMeProfilePictureError,
  GetUsersMeProfilePictureResponse,
  PostUsersMeProfilePictureData,
  PostUsersMeProfilePictureError,
  PostUsersMeProfilePictureResponse,
  GetUsersUserIdProfilePictureData,
  GetUsersUserIdProfilePictureError,
  GetUsersUserIdProfilePictureResponse,
  GetPhonebookAssociationsError,
  GetPhonebookAssociationsResponse,
  PostPhonebookAssociationsData,
  PostPhonebookAssociationsError,
  PostPhonebookAssociationsResponse,
  GetPhonebookRoletagsError,
  GetPhonebookRoletagsResponse,
  GetPhonebookAssociationsKindsError,
  GetPhonebookAssociationsKindsResponse,
  PatchPhonebookAssociationsAssociationIdData,
  PatchPhonebookAssociationsAssociationIdError,
  PatchPhonebookAssociationsAssociationIdResponse,
  DeletePhonebookAssociationsAssociationIdData,
  DeletePhonebookAssociationsAssociationIdError,
  DeletePhonebookAssociationsAssociationIdResponse,
  GetPhonebookAssociationsAssociationIdMembersData,
  GetPhonebookAssociationsAssociationIdMembersError,
  GetPhonebookAssociationsAssociationIdMembersResponse,
  GetPhonebookAssociationsAssociationIdMembersMandateYearData,
  GetPhonebookAssociationsAssociationIdMembersMandateYearError,
  GetPhonebookAssociationsAssociationIdMembersMandateYearResponse,
  GetPhonebookMemberUserIdData,
  GetPhonebookMemberUserIdError,
  GetPhonebookMemberUserIdResponse,
  PostPhonebookAssociationsMembershipsData,
  PostPhonebookAssociationsMembershipsError,
  PostPhonebookAssociationsMembershipsResponse,
  PatchPhonebookAssociationsMembershipsMembershipIdData,
  PatchPhonebookAssociationsMembershipsMembershipIdError,
  PatchPhonebookAssociationsMembershipsMembershipIdResponse,
  DeletePhonebookAssociationsMembershipsMembershipIdData,
  DeletePhonebookAssociationsMembershipsMembershipIdError,
  DeletePhonebookAssociationsMembershipsMembershipIdResponse,
  PostPhonebookAssociationsAssociationIdPictureData,
  PostPhonebookAssociationsAssociationIdPictureError,
  PostPhonebookAssociationsAssociationIdPictureResponse,
  GetPhonebookAssociationsAssociationIdPictureData,
  GetPhonebookAssociationsAssociationIdPictureError,
  GetPhonebookAssociationsAssociationIdPictureResponse,
  GetPhPaperIdPdfData,
  GetPhPaperIdPdfError,
  GetPhPaperIdPdfResponse,
  PostPhPaperIdPdfData,
  PostPhPaperIdPdfError,
  PostPhPaperIdPdfResponse,
  GetPhError,
  GetPhResponse,
  PostPhData,
  PostPhError,
  PostPhResponse,
  GetPhAdminError,
  GetPhAdminResponse,
  GetPhPaperIdCoverData,
  GetPhPaperIdCoverError,
  GetPhPaperIdCoverResponse,
  PatchPhPaperIdData,
  PatchPhPaperIdError,
  PatchPhPaperIdResponse,
  DeletePhPaperIdData,
  DeletePhPaperIdError,
  DeletePhPaperIdResponse,
  GetBookingManagersError,
  GetBookingManagersResponse,
  PostBookingManagersData,
  PostBookingManagersError,
  PostBookingManagersResponse,
  PatchBookingManagersManagerIdData,
  PatchBookingManagersManagerIdError,
  PatchBookingManagersManagerIdResponse,
  DeleteBookingManagersManagerIdData,
  DeleteBookingManagersManagerIdError,
  DeleteBookingManagersManagerIdResponse,
  GetBookingManagersUsersMeError,
  GetBookingManagersUsersMeResponse,
  GetBookingBookingsUsersMeManageError,
  GetBookingBookingsUsersMeManageResponse,
  GetBookingBookingsConfirmedUsersMeManageError,
  GetBookingBookingsConfirmedUsersMeManageResponse,
  GetBookingBookingsConfirmedError,
  GetBookingBookingsConfirmedResponse,
  GetBookingBookingsUsersMeError,
  GetBookingBookingsUsersMeResponse,
  PostBookingBookingsData,
  PostBookingBookingsError,
  PostBookingBookingsResponse,
  PatchBookingBookingsBookingIdData,
  PatchBookingBookingsBookingIdError,
  PatchBookingBookingsBookingIdResponse,
  DeleteBookingBookingsBookingIdData,
  DeleteBookingBookingsBookingIdError,
  DeleteBookingBookingsBookingIdResponse,
  PatchBookingBookingsBookingIdReplyDecisionData,
  PatchBookingBookingsBookingIdReplyDecisionError,
  PatchBookingBookingsBookingIdReplyDecisionResponse,
  GetBookingRoomsError,
  GetBookingRoomsResponse,
  PostBookingRoomsData,
  PostBookingRoomsError,
  PostBookingRoomsResponse,
  PatchBookingRoomsRoomIdData,
  PatchBookingRoomsRoomIdError,
  PatchBookingRoomsRoomIdResponse,
  DeleteBookingRoomsRoomIdData,
  DeleteBookingRoomsRoomIdError,
  DeleteBookingRoomsRoomIdResponse,
  GetCampaignSectionsError,
  GetCampaignSectionsResponse,
  PostCampaignSectionsData,
  PostCampaignSectionsError,
  PostCampaignSectionsResponse,
  DeleteCampaignSectionsSectionIdData,
  DeleteCampaignSectionsSectionIdError,
  DeleteCampaignSectionsSectionIdResponse,
  GetCampaignListsError,
  GetCampaignListsResponse,
  PostCampaignListsData,
  PostCampaignListsError,
  PostCampaignListsResponse,
  DeleteCampaignListsListIdData,
  DeleteCampaignListsListIdError,
  DeleteCampaignListsListIdResponse,
  PatchCampaignListsListIdData,
  PatchCampaignListsListIdError,
  PatchCampaignListsListIdResponse,
  DeleteCampaignListsData,
  DeleteCampaignListsError,
  DeleteCampaignListsResponse,
  GetCampaignVotersError,
  GetCampaignVotersResponse,
  PostCampaignVotersData,
  PostCampaignVotersError,
  PostCampaignVotersResponse,
  DeleteCampaignVotersError,
  DeleteCampaignVotersResponse,
  DeleteCampaignVotersGroupIdData,
  DeleteCampaignVotersGroupIdError,
  DeleteCampaignVotersGroupIdResponse,
  PostCampaignStatusOpenError,
  PostCampaignStatusOpenResponse,
  PostCampaignStatusCloseError,
  PostCampaignStatusCloseResponse,
  PostCampaignStatusCountingError,
  PostCampaignStatusCountingResponse,
  PostCampaignStatusPublishedError,
  PostCampaignStatusPublishedResponse,
  PostCampaignStatusResetError,
  PostCampaignStatusResetResponse,
  GetCampaignVotesError,
  GetCampaignVotesResponse,
  PostCampaignVotesData,
  PostCampaignVotesError,
  PostCampaignVotesResponse,
  GetCampaignResultsError,
  GetCampaignResultsResponse,
  GetCampaignStatusError,
  GetCampaignStatusResponse,
  GetCampaignStatsSectionIdData,
  GetCampaignStatsSectionIdError,
  GetCampaignStatsSectionIdResponse,
  PostCampaignListsListIdLogoData,
  PostCampaignListsListIdLogoError,
  PostCampaignListsListIdLogoResponse,
  GetCampaignListsListIdLogoData,
  GetCampaignListsListIdLogoError,
  GetCampaignListsListIdLogoResponse,
  GetLoansLoanersError,
  GetLoansLoanersResponse,
  PostLoansLoanersData,
  PostLoansLoanersError,
  PostLoansLoanersResponse,
  DeleteLoansLoanersLoanerIdData,
  DeleteLoansLoanersLoanerIdError,
  DeleteLoansLoanersLoanerIdResponse,
  PatchLoansLoanersLoanerIdData,
  PatchLoansLoanersLoanerIdError,
  PatchLoansLoanersLoanerIdResponse,
  GetLoansLoanersLoanerIdLoansData,
  GetLoansLoanersLoanerIdLoansError,
  GetLoansLoanersLoanerIdLoansResponse,
  GetLoansLoanersLoanerIdItemsData,
  GetLoansLoanersLoanerIdItemsError,
  GetLoansLoanersLoanerIdItemsResponse,
  PostLoansLoanersLoanerIdItemsData,
  PostLoansLoanersLoanerIdItemsError,
  PostLoansLoanersLoanerIdItemsResponse,
  PatchLoansLoanersLoanerIdItemsItemIdData,
  PatchLoansLoanersLoanerIdItemsItemIdError,
  PatchLoansLoanersLoanerIdItemsItemIdResponse,
  DeleteLoansLoanersLoanerIdItemsItemIdData,
  DeleteLoansLoanersLoanerIdItemsItemIdError,
  DeleteLoansLoanersLoanerIdItemsItemIdResponse,
  GetLoansUsersMeData,
  GetLoansUsersMeError,
  GetLoansUsersMeResponse,
  GetLoansUsersMeLoanersError,
  GetLoansUsersMeLoanersResponse,
  PostLoansData,
  PostLoansError,
  PostLoansResponse,
  PatchLoansLoanIdData,
  PatchLoansLoanIdError,
  PatchLoansLoanIdResponse,
  DeleteLoansLoanIdData,
  DeleteLoansLoanIdError,
  DeleteLoansLoanIdResponse,
  PostLoansLoanIdReturnData,
  PostLoansLoanIdReturnError,
  PostLoansLoanIdReturnResponse,
  PostLoansLoanIdExtendData,
  PostLoansLoanIdExtendError,
  PostLoansLoanIdExtendResponse,
  GetCalendarEventsError,
  GetCalendarEventsResponse,
  PostCalendarEventsData,
  PostCalendarEventsError,
  PostCalendarEventsResponse,
  GetCalendarEventsConfirmedError,
  GetCalendarEventsConfirmedResponse,
  GetCalendarEventsUserApplicantIdData,
  GetCalendarEventsUserApplicantIdError,
  GetCalendarEventsUserApplicantIdResponse,
  GetCalendarEventsEventIdData,
  GetCalendarEventsEventIdError,
  GetCalendarEventsEventIdResponse,
  PatchCalendarEventsEventIdData,
  PatchCalendarEventsEventIdError,
  PatchCalendarEventsEventIdResponse,
  DeleteCalendarEventsEventIdData,
  DeleteCalendarEventsEventIdError,
  DeleteCalendarEventsEventIdResponse,
  GetCalendarEventsEventIdApplicantData,
  GetCalendarEventsEventIdApplicantError,
  GetCalendarEventsEventIdApplicantResponse,
  PatchCalendarEventsEventIdReplyDecisionData,
  PatchCalendarEventsEventIdReplyDecisionError,
  PatchCalendarEventsEventIdReplyDecisionResponse,
  PostCalendarIcalCreateError,
  PostCalendarIcalCreateResponse,
  GetCalendarIcalError,
  GetCalendarIcalResponse,
  GetRecommendationRecommendationsError,
  GetRecommendationRecommendationsResponse,
  PostRecommendationRecommendationsData,
  PostRecommendationRecommendationsError,
  PostRecommendationRecommendationsResponse,
  PatchRecommendationRecommendationsRecommendationIdData,
  PatchRecommendationRecommendationsRecommendationIdError,
  PatchRecommendationRecommendationsRecommendationIdResponse,
  DeleteRecommendationRecommendationsRecommendationIdData,
  DeleteRecommendationRecommendationsRecommendationIdError,
  DeleteRecommendationRecommendationsRecommendationIdResponse,
  GetRecommendationRecommendationsRecommendationIdPictureData,
  GetRecommendationRecommendationsRecommendationIdPictureError,
  GetRecommendationRecommendationsRecommendationIdPictureResponse,
  PostRecommendationRecommendationsRecommendationIdPictureData,
  PostRecommendationRecommendationsRecommendationIdPictureError,
  PostRecommendationRecommendationsRecommendationIdPictureResponse,
  GetAdvertAdvertisersError,
  GetAdvertAdvertisersResponse,
  PostAdvertAdvertisersData,
  PostAdvertAdvertisersError,
  PostAdvertAdvertisersResponse,
  DeleteAdvertAdvertisersAdvertiserIdData,
  DeleteAdvertAdvertisersAdvertiserIdError,
  DeleteAdvertAdvertisersAdvertiserIdResponse,
  PatchAdvertAdvertisersAdvertiserIdData,
  PatchAdvertAdvertisersAdvertiserIdError,
  PatchAdvertAdvertisersAdvertiserIdResponse,
  GetAdvertMeAdvertisersError,
  GetAdvertMeAdvertisersResponse,
  GetAdvertAdvertsData,
  GetAdvertAdvertsError,
  GetAdvertAdvertsResponse,
  PostAdvertAdvertsData,
  PostAdvertAdvertsError,
  PostAdvertAdvertsResponse,
  GetAdvertAdvertsAdvertIdData,
  GetAdvertAdvertsAdvertIdError,
  GetAdvertAdvertsAdvertIdResponse,
  PatchAdvertAdvertsAdvertIdData,
  PatchAdvertAdvertsAdvertIdError,
  PatchAdvertAdvertsAdvertIdResponse,
  DeleteAdvertAdvertsAdvertIdData,
  DeleteAdvertAdvertsAdvertIdError,
  DeleteAdvertAdvertsAdvertIdResponse,
  GetAdvertAdvertsAdvertIdPictureData,
  GetAdvertAdvertsAdvertIdPictureError,
  GetAdvertAdvertsAdvertIdPictureResponse,
  PostAdvertAdvertsAdvertIdPictureData,
  PostAdvertAdvertsAdvertIdPictureError,
  PostAdvertAdvertsAdvertIdPictureResponse,
  GetCinemaThemoviedbThemoviedbIdData,
  GetCinemaThemoviedbThemoviedbIdError,
  GetCinemaThemoviedbThemoviedbIdResponse,
  GetCinemaSessionsError,
  GetCinemaSessionsResponse,
  PostCinemaSessionsData,
  PostCinemaSessionsError,
  PostCinemaSessionsResponse,
  PatchCinemaSessionsSessionIdData,
  PatchCinemaSessionsSessionIdError,
  PatchCinemaSessionsSessionIdResponse,
  DeleteCinemaSessionsSessionIdData,
  DeleteCinemaSessionsSessionIdError,
  DeleteCinemaSessionsSessionIdResponse,
  PostCinemaSessionsSessionIdPosterData,
  PostCinemaSessionsSessionIdPosterError,
  PostCinemaSessionsSessionIdPosterResponse,
  GetCinemaSessionsSessionIdPosterData,
  GetCinemaSessionsSessionIdPosterError,
  GetCinemaSessionsSessionIdPosterResponse,
  GetCdrSellersError,
  GetCdrSellersResponse,
  PostCdrSellersData,
  PostCdrSellersError,
  PostCdrSellersResponse,
  GetCdrUsersMeSellersError,
  GetCdrUsersMeSellersResponse,
  GetCdrOnlineSellersError,
  GetCdrOnlineSellersResponse,
  PatchCdrSellersSellerIdData,
  PatchCdrSellersSellerIdError,
  PatchCdrSellersSellerIdResponse,
  DeleteCdrSellersSellerIdData,
  DeleteCdrSellersSellerIdError,
  DeleteCdrSellersSellerIdResponse,
  GetCdrSellersSellerIdProductsData,
  GetCdrSellersSellerIdProductsError,
  GetCdrSellersSellerIdProductsResponse,
  PostCdrSellersSellerIdProductsData,
  PostCdrSellersSellerIdProductsError,
  PostCdrSellersSellerIdProductsResponse,
  GetCdrOnlineSellersSellerIdProductsData,
  GetCdrOnlineSellersSellerIdProductsError,
  GetCdrOnlineSellersSellerIdProductsResponse,
  PostCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentIdData,
  PostCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentIdError,
  PostCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentIdResponse,
  DeleteCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentIdData,
  DeleteCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentIdError,
  DeleteCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentIdResponse,
  PostCdrSellersSellerIdProductsProductIdProductConstraintsConstraintIdData,
  PostCdrSellersSellerIdProductsProductIdProductConstraintsConstraintIdError,
  PostCdrSellersSellerIdProductsProductIdProductConstraintsConstraintIdResponse,
  DeleteCdrSellersSellerIdProductsProductIdProductConstraintsConstraintIdData,
  DeleteCdrSellersSellerIdProductsProductIdProductConstraintsConstraintIdError,
  DeleteCdrSellersSellerIdProductsProductIdProductConstraintsConstraintIdResponse,
  PatchCdrSellersSellerIdProductsProductIdData,
  PatchCdrSellersSellerIdProductsProductIdError,
  PatchCdrSellersSellerIdProductsProductIdResponse,
  DeleteCdrSellersSellerIdProductsProductIdData,
  DeleteCdrSellersSellerIdProductsProductIdError,
  DeleteCdrSellersSellerIdProductsProductIdResponse,
  PostCdrSellersSellerIdProductsProductIdVariantsData,
  PostCdrSellersSellerIdProductsProductIdVariantsError,
  PostCdrSellersSellerIdProductsProductIdVariantsResponse,
  PatchCdrSellersSellerIdProductsProductIdVariantsVariantIdData,
  PatchCdrSellersSellerIdProductsProductIdVariantsVariantIdError,
  PatchCdrSellersSellerIdProductsProductIdVariantsVariantIdResponse,
  DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdData,
  DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdError,
  DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdResponse,
  PostCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumIdData,
  PostCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumIdError,
  PostCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumIdResponse,
  DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumIdData,
  DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumIdError,
  DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumIdResponse,
  GetCdrSellersSellerIdDocumentsData,
  GetCdrSellersSellerIdDocumentsError,
  GetCdrSellersSellerIdDocumentsResponse,
  PostCdrSellersSellerIdDocumentsData,
  PostCdrSellersSellerIdDocumentsError,
  PostCdrSellersSellerIdDocumentsResponse,
  DeleteCdrSellersSellerIdDocumentsDocumentIdData,
  DeleteCdrSellersSellerIdDocumentsDocumentIdError,
  DeleteCdrSellersSellerIdDocumentsDocumentIdResponse,
  GetCdrUsersUserIdPurchasesData,
  GetCdrUsersUserIdPurchasesError,
  GetCdrUsersUserIdPurchasesResponse,
  GetCdrSellersSellerIdUsersUserIdPurchasesData,
  GetCdrSellersSellerIdUsersUserIdPurchasesError,
  GetCdrSellersSellerIdUsersUserIdPurchasesResponse,
  PostCdrUsersUserIdPurchasesProductVariantIdData,
  PostCdrUsersUserIdPurchasesProductVariantIdError,
  PostCdrUsersUserIdPurchasesProductVariantIdResponse,
  PatchCdrUsersUserIdPurchasesProductVariantIdData,
  PatchCdrUsersUserIdPurchasesProductVariantIdError,
  PatchCdrUsersUserIdPurchasesProductVariantIdResponse,
  DeleteCdrUsersUserIdPurchasesProductVariantIdData,
  DeleteCdrUsersUserIdPurchasesProductVariantIdError,
  DeleteCdrUsersUserIdPurchasesProductVariantIdResponse,
  PatchCdrUsersUserIdPurchasesProductVariantIdValidatedData,
  PatchCdrUsersUserIdPurchasesProductVariantIdValidatedError,
  PatchCdrUsersUserIdPurchasesProductVariantIdValidatedResponse,
  GetCdrUsersUserIdSignaturesData,
  GetCdrUsersUserIdSignaturesError,
  GetCdrUsersUserIdSignaturesResponse,
  GetCdrSellersSellerIdUsersUserIdSignaturesData,
  GetCdrSellersSellerIdUsersUserIdSignaturesError,
  GetCdrSellersSellerIdUsersUserIdSignaturesResponse,
  PostCdrUsersUserIdSignaturesDocumentIdData,
  PostCdrUsersUserIdSignaturesDocumentIdError,
  PostCdrUsersUserIdSignaturesDocumentIdResponse,
  DeleteCdrUsersUserIdSignaturesDocumentIdData,
  DeleteCdrUsersUserIdSignaturesDocumentIdError,
  DeleteCdrUsersUserIdSignaturesDocumentIdResponse,
  GetCdrCurriculumsError,
  GetCdrCurriculumsResponse,
  PostCdrCurriculumsData,
  PostCdrCurriculumsError,
  PostCdrCurriculumsResponse,
  DeleteCdrCurriculumsCurriculumIdData,
  DeleteCdrCurriculumsCurriculumIdError,
  DeleteCdrCurriculumsCurriculumIdResponse,
  PostCdrUsersUserIdCurriculumsCurriculumIdData,
  PostCdrUsersUserIdCurriculumsCurriculumIdError,
  PostCdrUsersUserIdCurriculumsCurriculumIdResponse,
  DeleteCdrUsersUserIdCurriculumsCurriculumIdData,
  DeleteCdrUsersUserIdCurriculumsCurriculumIdError,
  DeleteCdrUsersUserIdCurriculumsCurriculumIdResponse,
  GetCdrUsersUserIdPaymentsData,
  GetCdrUsersUserIdPaymentsError,
  GetCdrUsersUserIdPaymentsResponse,
  PostCdrUsersUserIdPaymentsData,
  PostCdrUsersUserIdPaymentsError,
  PostCdrUsersUserIdPaymentsResponse,
  DeleteCdrUsersUserIdPaymentsPaymentIdData,
  DeleteCdrUsersUserIdPaymentsPaymentIdError,
  DeleteCdrUsersUserIdPaymentsPaymentIdResponse,
  GetCdrUsersUserIdMembershipsData,
  GetCdrUsersUserIdMembershipsError,
  GetCdrUsersUserIdMembershipsResponse,
  PostCdrUsersUserIdMembershipsData,
  PostCdrUsersUserIdMembershipsError,
  PostCdrUsersUserIdMembershipsResponse,
  DeleteCdrUsersUserIdMembershipsMembershipIdData,
  DeleteCdrUsersUserIdMembershipsMembershipIdError,
  DeleteCdrUsersUserIdMembershipsMembershipIdResponse,
  GetCdrStatusError,
  GetCdrStatusResponse,
  PatchCdrStatusData,
  PatchCdrStatusError,
  PatchCdrStatusResponse,
  GetAmapProductsError,
  GetAmapProductsResponse,
  PostAmapProductsData,
  PostAmapProductsError,
  PostAmapProductsResponse,
  GetAmapProductsProductIdData,
  GetAmapProductsProductIdError,
  GetAmapProductsProductIdResponse,
  PatchAmapProductsProductIdData,
  PatchAmapProductsProductIdError,
  PatchAmapProductsProductIdResponse,
  DeleteAmapProductsProductIdData,
  DeleteAmapProductsProductIdError,
  DeleteAmapProductsProductIdResponse,
  GetAmapDeliveriesError,
  GetAmapDeliveriesResponse,
  PostAmapDeliveriesData,
  PostAmapDeliveriesError,
  PostAmapDeliveriesResponse,
  DeleteAmapDeliveriesDeliveryIdData,
  DeleteAmapDeliveriesDeliveryIdError,
  DeleteAmapDeliveriesDeliveryIdResponse,
  PatchAmapDeliveriesDeliveryIdData,
  PatchAmapDeliveriesDeliveryIdError,
  PatchAmapDeliveriesDeliveryIdResponse,
  PostAmapDeliveriesDeliveryIdProductsData,
  PostAmapDeliveriesDeliveryIdProductsError,
  PostAmapDeliveriesDeliveryIdProductsResponse,
  DeleteAmapDeliveriesDeliveryIdProductsData,
  DeleteAmapDeliveriesDeliveryIdProductsError,
  DeleteAmapDeliveriesDeliveryIdProductsResponse,
  GetAmapDeliveriesDeliveryIdOrdersData,
  GetAmapDeliveriesDeliveryIdOrdersError,
  GetAmapDeliveriesDeliveryIdOrdersResponse,
  GetAmapOrdersOrderIdData,
  GetAmapOrdersOrderIdError,
  GetAmapOrdersOrderIdResponse,
  PatchAmapOrdersOrderIdData,
  PatchAmapOrdersOrderIdError,
  PatchAmapOrdersOrderIdResponse,
  DeleteAmapOrdersOrderIdData,
  DeleteAmapOrdersOrderIdError,
  DeleteAmapOrdersOrderIdResponse,
  PostAmapOrdersData,
  PostAmapOrdersError,
  PostAmapOrdersResponse,
  PostAmapDeliveriesDeliveryIdOpenorderingData,
  PostAmapDeliveriesDeliveryIdOpenorderingError,
  PostAmapDeliveriesDeliveryIdOpenorderingResponse,
  PostAmapDeliveriesDeliveryIdLockData,
  PostAmapDeliveriesDeliveryIdLockError,
  PostAmapDeliveriesDeliveryIdLockResponse,
  PostAmapDeliveriesDeliveryIdDeliveredData,
  PostAmapDeliveriesDeliveryIdDeliveredError,
  PostAmapDeliveriesDeliveryIdDeliveredResponse,
  PostAmapDeliveriesDeliveryIdArchiveData,
  PostAmapDeliveriesDeliveryIdArchiveError,
  PostAmapDeliveriesDeliveryIdArchiveResponse,
  GetAmapUsersCashError,
  GetAmapUsersCashResponse,
  GetAmapUsersUserIdCashData,
  GetAmapUsersUserIdCashError,
  GetAmapUsersUserIdCashResponse,
  PostAmapUsersUserIdCashData,
  PostAmapUsersUserIdCashError,
  PostAmapUsersUserIdCashResponse,
  PatchAmapUsersUserIdCashData,
  PatchAmapUsersUserIdCashError,
  PatchAmapUsersUserIdCashResponse,
  GetAmapUsersUserIdOrdersData,
  GetAmapUsersUserIdOrdersError,
  GetAmapUsersUserIdOrdersResponse,
  GetAmapInformationError,
  GetAmapInformationResponse,
  PatchAmapInformationData,
  PatchAmapInformationError,
  PatchAmapInformationResponse,
  GetFlappybirdScoresData,
  GetFlappybirdScoresError,
  GetFlappybirdScoresResponse,
  PostFlappybirdScoresData,
  PostFlappybirdScoresError,
  PostFlappybirdScoresResponse,
  GetFlappybirdScoresMeError,
  GetFlappybirdScoresMeResponse,
  GetTombolaRafflesError,
  GetTombolaRafflesResponse,
  PostTombolaRafflesData,
  PostTombolaRafflesError,
  PostTombolaRafflesResponse,
  PatchTombolaRafflesRaffleIdData,
  PatchTombolaRafflesRaffleIdError,
  PatchTombolaRafflesRaffleIdResponse,
  DeleteTombolaRafflesRaffleIdData,
  DeleteTombolaRafflesRaffleIdError,
  DeleteTombolaRafflesRaffleIdResponse,
  GetTombolaGroupGroupIdRafflesData,
  GetTombolaGroupGroupIdRafflesError,
  GetTombolaGroupGroupIdRafflesResponse,
  GetTombolaRafflesRaffleIdStatsData,
  GetTombolaRafflesRaffleIdStatsError,
  GetTombolaRafflesRaffleIdStatsResponse,
  PostTombolaRafflesRaffleIdLogoData,
  PostTombolaRafflesRaffleIdLogoError,
  PostTombolaRafflesRaffleIdLogoResponse,
  GetTombolaRafflesRaffleIdLogoData,
  GetTombolaRafflesRaffleIdLogoError,
  GetTombolaRafflesRaffleIdLogoResponse,
  GetTombolaPackTicketsError,
  GetTombolaPackTicketsResponse,
  PostTombolaPackTicketsData,
  PostTombolaPackTicketsError,
  PostTombolaPackTicketsResponse,
  PatchTombolaPackTicketsPackticketIdData,
  PatchTombolaPackTicketsPackticketIdError,
  PatchTombolaPackTicketsPackticketIdResponse,
  DeleteTombolaPackTicketsPackticketIdData,
  DeleteTombolaPackTicketsPackticketIdError,
  DeleteTombolaPackTicketsPackticketIdResponse,
  GetTombolaRafflesRaffleIdPackTicketsData,
  GetTombolaRafflesRaffleIdPackTicketsError,
  GetTombolaRafflesRaffleIdPackTicketsResponse,
  GetTombolaTicketsError,
  GetTombolaTicketsResponse,
  PostTombolaTicketsBuyPackIdData,
  PostTombolaTicketsBuyPackIdError,
  PostTombolaTicketsBuyPackIdResponse,
  GetTombolaUsersUserIdTicketsData,
  GetTombolaUsersUserIdTicketsError,
  GetTombolaUsersUserIdTicketsResponse,
  GetTombolaRafflesRaffleIdTicketsData,
  GetTombolaRafflesRaffleIdTicketsError,
  GetTombolaRafflesRaffleIdTicketsResponse,
  GetTombolaPrizesError,
  GetTombolaPrizesResponse,
  PostTombolaPrizesData,
  PostTombolaPrizesError,
  PostTombolaPrizesResponse,
  PatchTombolaPrizesPrizeIdData,
  PatchTombolaPrizesPrizeIdError,
  PatchTombolaPrizesPrizeIdResponse,
  DeleteTombolaPrizesPrizeIdData,
  DeleteTombolaPrizesPrizeIdError,
  DeleteTombolaPrizesPrizeIdResponse,
  GetTombolaRafflesRaffleIdPrizesData,
  GetTombolaRafflesRaffleIdPrizesError,
  GetTombolaRafflesRaffleIdPrizesResponse,
  PostTombolaPrizesPrizeIdPictureData,
  PostTombolaPrizesPrizeIdPictureError,
  PostTombolaPrizesPrizeIdPictureResponse,
  GetTombolaPrizesPrizeIdPictureData,
  GetTombolaPrizesPrizeIdPictureError,
  GetTombolaPrizesPrizeIdPictureResponse,
  GetTombolaUsersCashError,
  GetTombolaUsersCashResponse,
  GetTombolaUsersUserIdCashData,
  GetTombolaUsersUserIdCashError,
  GetTombolaUsersUserIdCashResponse,
  PostTombolaUsersUserIdCashData,
  PostTombolaUsersUserIdCashError,
  PostTombolaUsersUserIdCashResponse,
  PatchTombolaUsersUserIdCashData,
  PatchTombolaUsersUserIdCashError,
  PatchTombolaUsersUserIdCashResponse,
  PostTombolaPrizesPrizeIdDrawData,
  PostTombolaPrizesPrizeIdDrawError,
  PostTombolaPrizesPrizeIdDrawResponse,
  PatchTombolaRafflesRaffleIdOpenData,
  PatchTombolaRafflesRaffleIdOpenError,
  PatchTombolaRafflesRaffleIdOpenResponse,
  PatchTombolaRafflesRaffleIdLockData,
  PatchTombolaRafflesRaffleIdLockError,
  PatchTombolaRafflesRaffleIdLockResponse,
} from "./types.gen";
import {
  client,
  type Options,
  formDataBodySerializer,
} from "@hey-api/client-fetch";

/**
 * Login For Access Token
 * Ask for a JWT acc   ess token using oauth password flow.
 *
 * *username* and *password* must be provided
 *
 * Note: the request body needs to use **form-data** and not json.
 */
export const postAuthSimpleToken = (
  options: Options<PostAuthSimpleTokenData>,
) => {
  return (options?.client ?? client).post<
    PostAuthSimpleTokenResponse,
    PostAuthSimpleTokenError
  >({
    ...options,
    url: "/auth/simple_token",
  });
};

/**
 * Get Authorize Page
 * This endpoint is the one the user is redirected to when they begin the Oauth or Openid connect (*oidc*) *Authorization code* process.
 * The page allows the user to login and may let the user choose what type of data they want to authorize the client for.
 *
 * This is the endpoint that should be set in the client OAuth or OIDC configuration page. It can be called by a GET or a POST request.
 *
 * See `/auth/authorization-flow/authorize-validation` endpoint for information about the parameters.
 *
 * > In order for the authorization code grant to be secure, the authorization page must appear in a web browser the user is familiar with,
 * > and must not be embedded in an iframe popup or an embedded browser in a mobile app.
 * > If it could be embedded in another website, the user would have no way of verifying it is the legitimate service and is not a phishing attempt.
 *
 * **This endpoint is a UI endpoint which send and html page response. It will redirect to `/auth/authorization-flow/authorize-validation`**
 */
export const getAuthAuthorize = (options: Options<GetAuthAuthorizeData>) => {
  return (options?.client ?? client).get<
    GetAuthAuthorizeResponse,
    GetAuthAuthorizeError
  >({
    ...options,
    url: "/auth/authorize",
  });
};

/**
 * Post Authorize Page
 * This endpoint is the one the user is redirected to when they begin the OAuth or Openid connect (*oidc*) *Authorization code* process with or without PKCE.
 * The page allows the user to login and may let the user choose what type of data they want to authorize the client for.
 *
 * This is the endpoint that should be set in the client OAuth or OIDC configuration page. It can be called by a GET or a POST request.
 *
 * See `/auth/authorization-flow/authorize-validation` endpoint for information about the parameters.
 *
 * > In order for the authorization code grant to be secure, the authorization page must appear in a web browser the user is familiar with,
 * > and must not be embedded in an iframe popup or an embedded browser in a mobile app.
 * > If it could be embedded in another website, the user would have no way of verifying it is the legitimate service and is not a phishing attempt.
 *
 * **This endpoint is a UI endpoint which send and html page response. It will redirect to `/auth/authorization-flow/authorize-validation`**
 */
export const postAuthAuthorize = (options: Options<PostAuthAuthorizeData>) => {
  return (options?.client ?? client).post<
    PostAuthAuthorizeResponse,
    PostAuthAuthorizeError
  >({
    ...options,
    url: "/auth/authorize",
  });
};

/**
 * Authorize Validation
 * Part 1 of the authorization code grant.
 *
 * Parameters must be `application/x-www-form-urlencoded` and includes:
 *
 * * parameters for OAuth and Openid connect:
 * * `response_type`: must be `code`
 * * `client_id`: client identifier, needs to be registered in the server known_clients
 * * `redirect_uri`: optional for OAuth (when registered in known_clients) but required for oidc. The url we need to redirect the user to after the authorization.
 * * `scope`: optional for OAuth, must contain "openid" for oidc. List of scope the client want to get access to.
 * * `state`: recommended. Opaque value used to maintain state between the request and the callback.
 *
 * * additional parameters for Openid connect:
 * * `nonce`: oidc only. A string value used to associate a client session with an ID Token, and to mitigate replay attacks.
 *
 * * additional parameters for PKCE (see specs on https://datatracker.ietf.org/doc/html/rfc7636/):
 * * `code_challenge`: PKCE only
 * * `code_challenge_method`: PKCE only
 *
 *
 * * parameters that allows to authenticate the user and know which scopes he grants access to.
 * * `email`
 * * `password`
 *
 * References:
 * * https://www.rfc-editor.org/rfc/rfc6749.html#section-4.1.2
 * * https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest
 */
export const postAuthAuthorizationFlowAuthorizeValidation = (
  options: Options<PostAuthAuthorizationFlowAuthorizeValidationData>,
) => {
  return (options?.client ?? client).post<void>({
    ...options,
    url: "/auth/authorization-flow/authorize-validation",
  });
};

/**
 * Token
 * Part 2 of the authorization code grant.
 * The client exchange its authorization code for an access token. The endpoint supports OAuth and Openid connect, with or without PKCE.
 *
 * Parameters must be `application/x-www-form-urlencoded` and include:
 *
 * * parameters for OAuth and Openid connect:
 * * `grant_type`: must be `authorization_code` or `refresh_token`
 * * `code`: the authorization code received from the authorization endpoint
 * * `redirect_uri`: optional for OAuth (when registered in known_clients) but required for oidc. The url we need to redirect the user to after the authorization. If provided, must be the same as previously registered in the `redirect_uri` field of the client.
 *
 * * Client credentials
 * The client must send either:
 * the client id and secret in the authorization header or with client_id and client_secret parameters
 *
 * * additional parameters for PKCE:
 * * `code_verifier`: PKCE only, allows to verify the previous code_challenge
 *
 * https://datatracker.ietf.org/doc/html/rfc6749#section-4.1.3
 * https://openid.net/specs/openid-connect-core-1_0.html#TokenRequestValidation
 */
export const postAuthToken = (options: Options<PostAuthTokenData>) => {
  return (options?.client ?? client).post<
    PostAuthTokenResponse,
    PostAuthTokenError
  >({
    ...options,
    url: "/auth/token",
  });
};

/**
 * Auth Get Userinfo
 * Openid connect specify an endpoint the client can use to get information about the user.
 * The oidc client will provide the access_token it got previously in the request.
 *
 * The information expected depends on the client and may include the user identifier, name, email, phone...
 * See the reference for possible claims. See the client documentation and implementation to know what it needs and can receive.
 * The sub (subject) Claim MUST always be returned in the UserInfo Response.
 *
 * The client can ask for specific information using scopes and claims. See the reference for more information.
 * This procedure is not implemented in Hyperion as we can customize the response using auth_client class
 *
 * Reference:
 * https://openid.net/specs/openid-connect-core-1_0.html#UserInfo
 */
export const getAuthUserinfo = (options?: Options) => {
  return (options?.client ?? client).get<
    GetAuthUserinfoResponse,
    GetAuthUserinfoError
  >({
    ...options,
    url: "/auth/userinfo",
  });
};

/**
 * Jwks Uri
 */
export const getOidcAuthorizationFlowJwksUri = (options?: Options) => {
  return (options?.client ?? client).get<
    GetOidcAuthorizationFlowJwksUriResponse,
    GetOidcAuthorizationFlowJwksUriError
  >({
    ...options,
    url: "/oidc/authorization-flow/jwks_uri",
  });
};

/**
 * Oauth Configuration
 */
export const getWellKnownOauthAuthorizationServer = (options?: Options) => {
  return (options?.client ?? client).get<
    GetWellKnownOauthAuthorizationServerResponse,
    GetWellKnownOauthAuthorizationServerError
  >({
    ...options,
    url: "/.well-known/oauth-authorization-server",
  });
};

/**
 * Oidc Configuration
 */
export const getWellKnownOpenidConfiguration = (options?: Options) => {
  return (options?.client ?? client).get<
    GetWellKnownOpenidConfigurationResponse,
    GetWellKnownOpenidConfigurationError
  >({
    ...options,
    url: "/.well-known/openid-configuration",
  });
};

/**
 * Read Information
 * Return information about Hyperion. This endpoint can be used to check if the API is up.
 */
export const getInformation = (options?: Options) => {
  return (options?.client ?? client).get<
    GetInformationResponse,
    GetInformationError
  >({
    ...options,
    url: "/information",
  });
};

/**
 * Read Privacy
 * Return Hyperion privacy
 */
export const getPrivacy = (options?: Options) => {
  return (options?.client ?? client).get<GetPrivacyResponse, GetPrivacyError>({
    ...options,
    url: "/privacy",
  });
};

/**
 * Read Terms And Conditions
 * Return Hyperion terms and conditions pages
 */
export const getTermsAndConditions = (options?: Options) => {
  return (options?.client ?? client).get<
    GetTermsAndConditionsResponse,
    GetTermsAndConditionsError
  >({
    ...options,
    url: "/terms-and-conditions",
  });
};

/**
 * Read Support
 * Return Hyperion terms and conditions pages
 */
export const getSupport = (options?: Options) => {
  return (options?.client ?? client).get<GetSupportResponse, GetSupportError>({
    ...options,
    url: "/support",
  });
};

/**
 * Read Security Txt
 * Return Hyperion security.txt file
 */
export const getSecurityTxt = (options?: Options) => {
  return (options?.client ?? client).get<
    GetSecurityTxtResponse,
    GetSecurityTxtError
  >({
    ...options,
    url: "/security.txt",
  });
};

/**
 * Read Wellknown Security Txt
 * Return Hyperion security.txt file
 */
export const getWellKnownSecurityTxt = (options?: Options) => {
  return (options?.client ?? client).get<
    GetWellKnownSecurityTxtResponse,
    GetWellKnownSecurityTxtError
  >({
    ...options,
    url: "/.well-known/security.txt",
  });
};

/**
 * Read Robots Txt
 * Return Hyperion robots.txt file
 */
export const getRobotsTxt = (options?: Options) => {
  return (options?.client ?? client).get<
    GetRobotsTxtResponse,
    GetRobotsTxtError
  >({
    ...options,
    url: "/robots.txt",
  });
};

/**
 * Get Style File
 * Return a style file from the assets folder
 */
export const getStyleFileCss = (options: Options<GetStyleFileCssData>) => {
  return (options?.client ?? client).get<
    GetStyleFileCssResponse,
    GetStyleFileCssError
  >({
    ...options,
    url: "/style/{file}.css",
  });
};

/**
 * Get Favicon
 */
export const getFaviconIco = (options?: Options) => {
  return (options?.client ?? client).get<
    GetFaviconIcoResponse,
    GetFaviconIcoError
  >({
    ...options,
    url: "/favicon.ico",
  });
};

/**
 * Get Module Visibility
 * Get all existing module_visibility.
 *
 * **This endpoint is only usable by administrators**
 */
export const getModuleVisibility = (options?: Options) => {
  return (options?.client ?? client).get<
    GetModuleVisibilityResponse,
    GetModuleVisibilityError
  >({
    ...options,
    url: "/module-visibility/",
  });
};

/**
 * Add Module Visibility
 * Add a new group to a module
 *
 * **This endpoint is only usable by administrators**
 */
export const postModuleVisibility = (
  options: Options<PostModuleVisibilityData>,
) => {
  return (options?.client ?? client).post<
    PostModuleVisibilityResponse,
    PostModuleVisibilityError
  >({
    ...options,
    url: "/module-visibility/",
  });
};

/**
 * Get User Modules Visibility
 * Get group user accessible root
 *
 * **This endpoint is only usable by everyone**
 */
export const getModuleVisibilityMe = (options?: Options) => {
  return (options?.client ?? client).get<
    GetModuleVisibilityMeResponse,
    GetModuleVisibilityMeError
  >({
    ...options,
    url: "/module-visibility/me",
  });
};

/**
 * Delete Session
 */
export const deleteModuleVisibilityRootGroupId = (
  options: Options<DeleteModuleVisibilityRootGroupIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteModuleVisibilityRootGroupIdResponse,
    DeleteModuleVisibilityRootGroupIdError
  >({
    ...options,
    url: "/module-visibility/{root}/{group_id}",
  });
};

/**
 * Read Groups
 * Return all groups from database as a list of dictionaries
 */
export const getGroups = (options?: Options) => {
  return (options?.client ?? client).get<GetGroupsResponse, GetGroupsError>({
    ...options,
    url: "/groups/",
  });
};

/**
 * Create Group
 * Create a new group.
 *
 * **This endpoint is only usable by administrators**
 */
export const postGroups = (options: Options<PostGroupsData>) => {
  return (options?.client ?? client).post<PostGroupsResponse, PostGroupsError>({
    ...options,
    url: "/groups/",
  });
};

/**
 * Read Group
 * Return group with id from database as a dictionary. This includes a list of users being members of the group.
 *
 * **This endpoint is only usable by administrators**
 */
export const getGroupsGroupId = (options: Options<GetGroupsGroupIdData>) => {
  return (options?.client ?? client).get<
    GetGroupsGroupIdResponse,
    GetGroupsGroupIdError
  >({
    ...options,
    url: "/groups/{group_id}",
  });
};

/**
 * Update Group
 * Update the name or the description of a group.
 *
 * **This endpoint is only usable by administrators**
 */
export const patchGroupsGroupId = (
  options: Options<PatchGroupsGroupIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchGroupsGroupIdResponse,
    PatchGroupsGroupIdError
  >({
    ...options,
    url: "/groups/{group_id}",
  });
};

/**
 * Delete Group
 * Delete group from database.
 * This will remove the group from all users but won't delete any user.
 *
 * `GroupTypes` groups can not be deleted.
 *
 * **This endpoint is only usable by administrators**
 */
export const deleteGroupsGroupId = (
  options: Options<DeleteGroupsGroupIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteGroupsGroupIdResponse,
    DeleteGroupsGroupIdError
  >({
    ...options,
    url: "/groups/{group_id}",
  });
};

/**
 * Create Membership
 * Create a new membership in database and return the group. This allows to "add a user to a group".
 *
 * **This endpoint is only usable by administrators**
 */
export const postGroupsMembership = (
  options: Options<PostGroupsMembershipData>,
) => {
  return (options?.client ?? client).post<
    PostGroupsMembershipResponse,
    PostGroupsMembershipError
  >({
    ...options,
    url: "/groups/membership",
  });
};

/**
 * Delete Membership
 * Delete a membership using the user and group ids.
 *
 * **This endpoint is only usable by administrators**
 */
export const deleteGroupsMembership = (
  options: Options<DeleteGroupsMembershipData>,
) => {
  return (options?.client ?? client).delete<
    DeleteGroupsMembershipResponse,
    DeleteGroupsMembershipError
  >({
    ...options,
    url: "/groups/membership",
  });
};

/**
 * Create Batch Membership
 * Add a list of user to a group, using a list of email.
 * If an user does not exist it will be ignored.
 *
 * **This endpoint is only usable by administrators**
 */
export const postGroupsBatchMembership = (
  options: Options<PostGroupsBatchMembershipData>,
) => {
  return (options?.client ?? client).post<
    PostGroupsBatchMembershipResponse,
    PostGroupsBatchMembershipError
  >({
    ...options,
    url: "/groups/batch-membership",
  });
};

/**
 * Delete Batch Membership
 * This endpoint removes all users from a given group.
 *
 * **This endpoint is only usable by administrators**
 */
export const deleteGroupsBatchMembership = (
  options: Options<DeleteGroupsBatchMembershipData>,
) => {
  return (options?.client ?? client).delete<
    DeleteGroupsBatchMembershipResponse,
    DeleteGroupsBatchMembershipError
  >({
    ...options,
    url: "/groups/batch-membership",
  });
};

/**
 * Get Devices
 * Get all devices a user have registered.
 * This endpoint is useful to get firebase tokens for debugging purposes.
 *
 * **Only admins can use this endpoint**
 */
export const getNotificationDevices = (options?: Options) => {
  return (options?.client ?? client).get<
    GetNotificationDevicesResponse,
    GetNotificationDevicesError
  >({
    ...options,
    url: "/notification/devices",
  });
};

/**
 * Register Firebase Device
 * Register a firebase device for the user, if the device already exists, this will update the creation date.
 * This endpoint should be called once a month to ensure that the token is still valide.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const postNotificationDevices = (
  options: Options<PostNotificationDevicesData>,
) => {
  return (options?.client ?? client).post<
    PostNotificationDevicesResponse,
    PostNotificationDevicesError
  >({
    ...options,
    url: "/notification/devices",
  });
};

/**
 * Unregister Firebase Device
 * Unregister a new firebase device for the user
 *
 * **The user must be authenticated to use this endpoint**
 */
export const deleteNotificationDevicesFirebaseToken = (
  options: Options<DeleteNotificationDevicesFirebaseTokenData>,
) => {
  return (options?.client ?? client).delete<
    DeleteNotificationDevicesFirebaseTokenResponse,
    DeleteNotificationDevicesFirebaseTokenError
  >({
    ...options,
    url: "/notification/devices/{firebase_token}",
  });
};

/**
 * Get Messages
 * Get all messages for a specific device from the user
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getNotificationMessagesFirebaseToken = (
  options: Options<GetNotificationMessagesFirebaseTokenData>,
) => {
  return (options?.client ?? client).get<
    GetNotificationMessagesFirebaseTokenResponse,
    GetNotificationMessagesFirebaseTokenError
  >({
    ...options,
    url: "/notification/messages/{firebase_token}",
  });
};

/**
 * Subscribe To Topic
 * Subscribe to a topic
 *
 * **The user must be authenticated to use this endpoint**
 */
export const postNotificationTopicsTopicStrSubscribe = (
  options: Options<PostNotificationTopicsTopicStrSubscribeData>,
) => {
  return (options?.client ?? client).post<
    PostNotificationTopicsTopicStrSubscribeResponse,
    PostNotificationTopicsTopicStrSubscribeError
  >({
    ...options,
    url: "/notification/topics/{topic_str}/subscribe",
  });
};

/**
 * Unsubscribe To Topic
 * Unsubscribe to a topic
 *
 * **The user must be authenticated to use this endpoint**
 */
export const postNotificationTopicsTopicStrUnsubscribe = (
  options: Options<PostNotificationTopicsTopicStrUnsubscribeData>,
) => {
  return (options?.client ?? client).post<
    PostNotificationTopicsTopicStrUnsubscribeResponse,
    PostNotificationTopicsTopicStrUnsubscribeError
  >({
    ...options,
    url: "/notification/topics/{topic_str}/unsubscribe",
  });
};

/**
 * Get Topic
 * Get topics the user is subscribed to
 * Does not return session topics (those with a topic_identifier)
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getNotificationTopics = (options?: Options) => {
  return (options?.client ?? client).get<
    GetNotificationTopicsResponse,
    GetNotificationTopicsError
  >({
    ...options,
    url: "/notification/topics",
  });
};

/**
 * Get Topic Identifier
 * Get custom topic (with identifiers) the user is subscribed to
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getNotificationTopicsTopic = (
  options: Options<GetNotificationTopicsTopicData>,
) => {
  return (options?.client ?? client).get<
    GetNotificationTopicsTopicResponse,
    GetNotificationTopicsTopicError
  >({
    ...options,
    url: "/notification/topics/{topic}",
  });
};

/**
 * Send Notification
 * Send ourself a test notification.
 *
 * **Only admins can use this endpoint**
 */
export const postNotificationSend = (options?: Options) => {
  return (options?.client ?? client).post<
    PostNotificationSendResponse,
    PostNotificationSendError
  >({
    ...options,
    url: "/notification/send",
  });
};

/**
 * Send Future Notification
 * Send ourself a test notification.
 *
 * **Only admins can use this endpoint**
 */
export const postNotificationSendFuture = (options?: Options) => {
  return (options?.client ?? client).post<
    PostNotificationSendFutureResponse,
    PostNotificationSendFutureError
  >({
    ...options,
    url: "/notification/send/future",
  });
};

/**
 * Read Users
 * Return all users from database as a list of `CoreUserSimple`
 *
 * **This endpoint is only usable by administrators**
 */
export const getUsers = (options?: Options) => {
  return (options?.client ?? client).get<GetUsersResponse, GetUsersError>({
    ...options,
    url: "/users/",
  });
};

/**
 * Count Users
 * Return all users from database as a list of `CoreUserSimple`
 *
 * **This endpoint is only usable by administrators**
 */
export const getUsersCount = (options?: Options) => {
  return (options?.client ?? client).get<
    GetUsersCountResponse,
    GetUsersCountError
  >({
    ...options,
    url: "/users/count",
  });
};

/**
 * Search Users
 * Search for a user using Fuzzy String Matching
 *
 * `query` will be compared against users name, firstname and nickname
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getUsersSearch = (options: Options<GetUsersSearchData>) => {
  return (options?.client ?? client).get<
    GetUsersSearchResponse,
    GetUsersSearchError
  >({
    ...options,
    url: "/users/search",
  });
};

/**
 * Read Current User
 * Return `CoreUser` representation of current user
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getUsersMe = (options?: Options) => {
  return (options?.client ?? client).get<GetUsersMeResponse, GetUsersMeError>({
    ...options,
    url: "/users/me",
  });
};

/**
 * Update Current User
 * Update the current user, the request should contain a JSON with the fields to change (not necessarily all fields) and their new value
 *
 * **The user must be authenticated to use this endpoint**
 */
export const patchUsersMe = (options: Options<PatchUsersMeData>) => {
  return (options?.client ?? client).patch<
    PatchUsersMeResponse,
    PatchUsersMeError
  >({
    ...options,
    url: "/users/me",
  });
};

/**
 * Create User By User
 * Start the user account creation process. The user will be sent an email with a link to activate his account.
 * > The received token needs to be sent to the `/users/activate` endpoint to activate the account.
 *
 * If the **password** is not provided, it will be required during the activation process. Don't submit a password if you are creating an account for someone else.
 *
 * When creating **student** or **staff** account a valid ECL email is required.
 * Only admin users can create other **account types**, contact ÉCLAIR for more information.
 */
export const postUsersCreate = (options: Options<PostUsersCreateData>) => {
  return (options?.client ?? client).post<
    PostUsersCreateResponse,
    PostUsersCreateError
  >({
    ...options,
    url: "/users/create",
  });
};

/**
 * Batch Create Users
 * Batch user account creation process. All users will be sent an email with a link to activate their account.
 * > The received token needs to be send to `/users/activate` endpoint to activate the account.
 *
 * Even for creating **student** or **staff** account a valid ECL email is not required but should preferably be used.
 *
 * The endpoint return a dictionary of unsuccessful user creation: `{email: error message}`.
 *
 * **This endpoint is only usable by administrators**
 */
export const postUsersBatchCreation = (
  options: Options<PostUsersBatchCreationData>,
) => {
  return (options?.client ?? client).post<
    PostUsersBatchCreationResponse,
    PostUsersBatchCreationError
  >({
    ...options,
    url: "/users/batch-creation",
  });
};

/**
 * Get User Activation Page
 * Return a HTML page to activate an account. The activation token is passed as a query string.
 *
 * **This endpoint is an UI endpoint which send and html page response.
 */
export const getUsersActivate = (options: Options<GetUsersActivateData>) => {
  return (options?.client ?? client).get<
    GetUsersActivateResponse,
    GetUsersActivateError
  >({
    ...options,
    url: "/users/activate",
  });
};

/**
 * Activate User
 * Activate the previously created account.
 *
 * **token**: the activation token sent by email to the user
 *
 * **password**: user password, required if it was not provided previously
 */
export const postUsersActivate = (options: Options<PostUsersActivateData>) => {
  return (options?.client ?? client).post<
    PostUsersActivateResponse,
    PostUsersActivateError
  >({
    ...options,
    url: "/users/activate",
  });
};

/**
 * Make Admin
 * This endpoint is only usable if the database contains exactly one user.
 * It will add this user to the `admin` group.
 */
export const postUsersMakeAdmin = (options?: Options) => {
  return (options?.client ?? client).post<
    PostUsersMakeAdminResponse,
    PostUsersMakeAdminError
  >({
    ...options,
    url: "/users/make-admin",
  });
};

/**
 * Recover User
 * Allow a user to start a password reset process.
 *
 * If the provided **email** corresponds to an existing account, a password reset token will be sent.
 * Using this token, the password can be changed with `/users/reset-password` endpoint
 */
export const postUsersRecover = (options: Options<PostUsersRecoverData>) => {
  return (options?.client ?? client).post<
    PostUsersRecoverResponse,
    PostUsersRecoverError
  >({
    ...options,
    url: "/users/recover",
  });
};

/**
 * Reset Password
 * Reset the user password, using a **reset_token** provided by `/users/recover` endpoint.
 */
export const postUsersResetPassword = (
  options: Options<PostUsersResetPasswordData>,
) => {
  return (options?.client ?? client).post<
    PostUsersResetPasswordResponse,
    PostUsersResetPasswordError
  >({
    ...options,
    url: "/users/reset-password",
  });
};

/**
 * Migrate Mail
 * Due to a change in the email format, all student users need to migrate their email address.
 * This endpoint will send a confirmation code to the user's new email address. He will need to use this code to confirm the change with `/users/confirm-mail-migration` endpoint.
 */
export const postUsersMigrateMail = (
  options: Options<PostUsersMigrateMailData>,
) => {
  return (options?.client ?? client).post<
    PostUsersMigrateMailResponse,
    PostUsersMigrateMailError
  >({
    ...options,
    url: "/users/migrate-mail",
  });
};

/**
 * Migrate Mail Confirm
 * Due to a change in the email format, all student users need to migrate their email address.
 * This endpoint will updates the user new email address.
 */
export const getUsersMigrateMailConfirm = (
  options: Options<GetUsersMigrateMailConfirmData>,
) => {
  return (options?.client ?? client).get<
    GetUsersMigrateMailConfirmResponse,
    GetUsersMigrateMailConfirmError
  >({
    ...options,
    url: "/users/migrate-mail-confirm",
  });
};

/**
 * Change Password
 * Change a user password.
 *
 * This endpoint will check the **old_password**, see also the `/users/reset-password` endpoint if the user forgot their password.
 */
export const postUsersChangePassword = (
  options: Options<PostUsersChangePasswordData>,
) => {
  return (options?.client ?? client).post<
    PostUsersChangePasswordResponse,
    PostUsersChangePasswordError
  >({
    ...options,
    url: "/users/change-password",
  });
};

/**
 * Read User
 * Return `CoreUserSimple` representation of user with id `user_id`
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getUsersUserId = (options: Options<GetUsersUserIdData>) => {
  return (options?.client ?? client).get<
    GetUsersUserIdResponse,
    GetUsersUserIdError
  >({
    ...options,
    url: "/users/{user_id}",
  });
};

/**
 * Update User
 * Update an user, the request should contain a JSON with the fields to change (not necessarily all fields) and their new value
 *
 * **This endpoint is only usable by administrators**
 */
export const patchUsersUserId = (options: Options<PatchUsersUserIdData>) => {
  return (options?.client ?? client).patch<
    PatchUsersUserIdResponse,
    PatchUsersUserIdError
  >({
    ...options,
    url: "/users/{user_id}",
  });
};

/**
 * Delete User
 * This endpoint will ask administrators to process to the user deletion.
 * This manual verification is needed to prevent data from being deleting for other users
 */
export const postUsersMeAskDeletion = (options?: Options) => {
  return (options?.client ?? client).post<
    PostUsersMeAskDeletionResponse,
    PostUsersMeAskDeletionError
  >({
    ...options,
    url: "/users/me/ask-deletion",
  });
};

/**
 * Read Own Profile Picture
 * Get the profile picture of the authenticated user.
 */
export const getUsersMeProfilePicture = (options?: Options) => {
  return (options?.client ?? client).get<
    GetUsersMeProfilePictureResponse,
    GetUsersMeProfilePictureError
  >({
    ...options,
    url: "/users/me/profile-picture",
  });
};

/**
 * Create Current User Profile Picture
 * Upload a profile picture for the current user.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const postUsersMeProfilePicture = (
  options: Options<PostUsersMeProfilePictureData>,
) => {
  return (options?.client ?? client).post<
    PostUsersMeProfilePictureResponse,
    PostUsersMeProfilePictureError
  >({
    ...options,
    ...formDataBodySerializer,
    url: "/users/me/profile-picture",
  });
};

/**
 * Read User Profile Picture
 * Get the profile picture of an user.
 *
 * Unauthenticated users can use this endpoint (needed for some OIDC services)
 */
export const getUsersUserIdProfilePicture = (
  options: Options<GetUsersUserIdProfilePictureData>,
) => {
  return (options?.client ?? client).get<
    GetUsersUserIdProfilePictureResponse,
    GetUsersUserIdProfilePictureError
  >({
    ...options,
    url: "/users/{user_id}/profile-picture",
  });
};

/**
 * Get All Associations
 * Return all associations from database as a list of AssociationComplete schemas
 */
export const getPhonebookAssociations = (options?: Options) => {
  return (options?.client ?? client).get<
    GetPhonebookAssociationsResponse,
    GetPhonebookAssociationsError
  >({
    ...options,
    url: "/phonebook/associations/",
  });
};

/**
 * Create Association
 * Create a new Association by giving an AssociationBase scheme
 *
 * **This endpoint is only usable by CAA, BDE**
 */
export const postPhonebookAssociations = (
  options: Options<PostPhonebookAssociationsData>,
) => {
  return (options?.client ?? client).post<
    PostPhonebookAssociationsResponse,
    PostPhonebookAssociationsError
  >({
    ...options,
    url: "/phonebook/associations/",
  });
};

/**
 * Get All Role Tags
 * Return all available role tags from RoleTags enum.
 */
export const getPhonebookRoletags = (options?: Options) => {
  return (options?.client ?? client).get<
    GetPhonebookRoletagsResponse,
    GetPhonebookRoletagsError
  >({
    ...options,
    url: "/phonebook/roletags",
  });
};

/**
 * Get All Kinds
 * Return all available kinds of from Kinds enum.
 */
export const getPhonebookAssociationsKinds = (options?: Options) => {
  return (options?.client ?? client).get<
    GetPhonebookAssociationsKindsResponse,
    GetPhonebookAssociationsKindsError
  >({
    ...options,
    url: "/phonebook/associations/kinds",
  });
};

/**
 * Update Association
 * Update an Association
 *
 * **This endpoint is only usable by CAA, BDE and association's president**
 */
export const patchPhonebookAssociationsAssociationId = (
  options: Options<PatchPhonebookAssociationsAssociationIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchPhonebookAssociationsAssociationIdResponse,
    PatchPhonebookAssociationsAssociationIdError
  >({
    ...options,
    url: "/phonebook/associations/{association_id}",
  });
};

/**
 * Delete Association
 * Delete an Association
 *
 * [!] Memberships linked to association_id will be deleted too
 *
 * **This endpoint is only usable by CAA and BDE**
 */
export const deletePhonebookAssociationsAssociationId = (
  options: Options<DeletePhonebookAssociationsAssociationIdData>,
) => {
  return (options?.client ?? client).delete<
    DeletePhonebookAssociationsAssociationIdResponse,
    DeletePhonebookAssociationsAssociationIdError
  >({
    ...options,
    url: "/phonebook/associations/{association_id}",
  });
};

/**
 * Get Association Members
 * Return the list of MemberComplete of an Association.
 */
export const getPhonebookAssociationsAssociationIdMembers = (
  options: Options<GetPhonebookAssociationsAssociationIdMembersData>,
) => {
  return (options?.client ?? client).get<
    GetPhonebookAssociationsAssociationIdMembersResponse,
    GetPhonebookAssociationsAssociationIdMembersError
  >({
    ...options,
    url: "/phonebook/associations/{association_id}/members/",
  });
};

/**
 * Get Association Members By Mandate Year
 * Return the list of MemberComplete of an Association with given mandate_year.
 */
export const getPhonebookAssociationsAssociationIdMembersMandateYear = (
  options: Options<GetPhonebookAssociationsAssociationIdMembersMandateYearData>,
) => {
  return (options?.client ?? client).get<
    GetPhonebookAssociationsAssociationIdMembersMandateYearResponse,
    GetPhonebookAssociationsAssociationIdMembersMandateYearError
  >({
    ...options,
    url: "/phonebook/associations/{association_id}/members/{mandate_year}",
  });
};

/**
 * Get Member Details
 * Return MemberComplete for given user_id.
 */
export const getPhonebookMemberUserId = (
  options: Options<GetPhonebookMemberUserIdData>,
) => {
  return (options?.client ?? client).get<
    GetPhonebookMemberUserIdResponse,
    GetPhonebookMemberUserIdError
  >({
    ...options,
    url: "/phonebook/member/{user_id}",
  });
};

/**
 * Create Membership
 * Create a new Membership.
 * 'role_tags' are used to indicate if the members has a main role in the association (president, secretary ...) and 'role_name' is the display name for this membership
 *
 * **This endpoint is only usable by CAA, BDE and association's president**
 */
export const postPhonebookAssociationsMemberships = (
  options: Options<PostPhonebookAssociationsMembershipsData>,
) => {
  return (options?.client ?? client).post<
    PostPhonebookAssociationsMembershipsResponse,
    PostPhonebookAssociationsMembershipsError
  >({
    ...options,
    url: "/phonebook/associations/memberships",
  });
};

/**
 * Update Membership
 * Update a Membership.
 *
 * **This endpoint is only usable by CAA, BDE and association's president**
 */
export const patchPhonebookAssociationsMembershipsMembershipId = (
  options: Options<PatchPhonebookAssociationsMembershipsMembershipIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchPhonebookAssociationsMembershipsMembershipIdResponse,
    PatchPhonebookAssociationsMembershipsMembershipIdError
  >({
    ...options,
    url: "/phonebook/associations/memberships/{membership_id}",
  });
};

/**
 * Delete Membership
 * Delete a membership.
 *
 * **This endpoint is only usable by CAA, BDE and association's president**
 */
export const deletePhonebookAssociationsMembershipsMembershipId = (
  options: Options<DeletePhonebookAssociationsMembershipsMembershipIdData>,
) => {
  return (options?.client ?? client).delete<
    DeletePhonebookAssociationsMembershipsMembershipIdResponse,
    DeletePhonebookAssociationsMembershipsMembershipIdError
  >({
    ...options,
    url: "/phonebook/associations/memberships/{membership_id}",
  });
};

/**
 * Create Association Logo
 * Upload a logo for an Association.
 * **The user must be a member of the group CAA or BDE to use this endpoint**
 */
export const postPhonebookAssociationsAssociationIdPicture = (
  options: Options<PostPhonebookAssociationsAssociationIdPictureData>,
) => {
  return (options?.client ?? client).post<
    PostPhonebookAssociationsAssociationIdPictureResponse,
    PostPhonebookAssociationsAssociationIdPictureError
  >({
    ...options,
    ...formDataBodySerializer,
    url: "/phonebook/associations/{association_id}/picture",
  });
};

/**
 * Read Association Logo
 * Get the logo of an Association.
 */
export const getPhonebookAssociationsAssociationIdPicture = (
  options: Options<GetPhonebookAssociationsAssociationIdPictureData>,
) => {
  return (options?.client ?? client).get<
    GetPhonebookAssociationsAssociationIdPictureResponse,
    GetPhonebookAssociationsAssociationIdPictureError
  >({
    ...options,
    url: "/phonebook/associations/{association_id}/picture",
  });
};

/**
 * Get Paper Pdf
 */
export const getPhPaperIdPdf = (options: Options<GetPhPaperIdPdfData>) => {
  return (options?.client ?? client).get<
    GetPhPaperIdPdfResponse,
    GetPhPaperIdPdfError
  >({
    ...options,
    url: "/ph/{paper_id}/pdf",
  });
};

/**
 * Create Paper Pdf And Cover
 */
export const postPhPaperIdPdf = (options: Options<PostPhPaperIdPdfData>) => {
  return (options?.client ?? client).post<
    PostPhPaperIdPdfResponse,
    PostPhPaperIdPdfError
  >({
    ...options,
    ...formDataBodySerializer,
    url: "/ph/{paper_id}/pdf",
  });
};

/**
 * Get Papers
 * Return all editions until now, sorted from the latest to the oldest
 */
export const getPh = (options?: Options) => {
  return (options?.client ?? client).get<GetPhResponse, GetPhError>({
    ...options,
    url: "/ph/",
  });
};

/**
 * Create Paper
 * Create a new paper.
 */
export const postPh = (options: Options<PostPhData>) => {
  return (options?.client ?? client).post<PostPhResponse, PostPhError>({
    ...options,
    url: "/ph/",
  });
};

/**
 * Get Papers Admin
 * Return all editions, sorted from the latest to the oldest
 */
export const getPhAdmin = (options?: Options) => {
  return (options?.client ?? client).get<GetPhAdminResponse, GetPhAdminError>({
    ...options,
    url: "/ph/admin",
  });
};

/**
 * Get Cover
 */
export const getPhPaperIdCover = (options: Options<GetPhPaperIdCoverData>) => {
  return (options?.client ?? client).get<
    GetPhPaperIdCoverResponse,
    GetPhPaperIdCoverError
  >({
    ...options,
    url: "/ph/{paper_id}/cover",
  });
};

/**
 * Update Paper
 */
export const patchPhPaperId = (options: Options<PatchPhPaperIdData>) => {
  return (options?.client ?? client).patch<
    PatchPhPaperIdResponse,
    PatchPhPaperIdError
  >({
    ...options,
    url: "/ph/{paper_id}",
  });
};

/**
 * Delete Paper
 */
export const deletePhPaperId = (options: Options<DeletePhPaperIdData>) => {
  return (options?.client ?? client).delete<
    DeletePhPaperIdResponse,
    DeletePhPaperIdError
  >({
    ...options,
    url: "/ph/{paper_id}",
  });
};

/**
 * Get Managers
 * Get existing managers.
 *
 * **This endpoint is only usable by administrators**
 */
export const getBookingManagers = (options?: Options) => {
  return (options?.client ?? client).get<
    GetBookingManagersResponse,
    GetBookingManagersError
  >({
    ...options,
    url: "/booking/managers",
  });
};

/**
 * Create Manager
 * Create a manager.
 *
 * **This endpoint is only usable by administrators**
 */
export const postBookingManagers = (
  options: Options<PostBookingManagersData>,
) => {
  return (options?.client ?? client).post<
    PostBookingManagersResponse,
    PostBookingManagersError
  >({
    ...options,
    url: "/booking/managers",
  });
};

/**
 * Update Manager
 * Update a manager, the request should contain a JSON with the fields to change (not necessarily all fields) and their new value.
 *
 * **This endpoint is only usable by administrators**
 */
export const patchBookingManagersManagerId = (
  options: Options<PatchBookingManagersManagerIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchBookingManagersManagerIdResponse,
    PatchBookingManagersManagerIdError
  >({
    ...options,
    url: "/booking/managers/{manager_id}",
  });
};

/**
 * Delete Manager
 * Delete a manager only if the manager is not linked to any room
 *
 * **This endpoint is only usable by administrators**
 */
export const deleteBookingManagersManagerId = (
  options: Options<DeleteBookingManagersManagerIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteBookingManagersManagerIdResponse,
    DeleteBookingManagersManagerIdError
  >({
    ...options,
    url: "/booking/managers/{manager_id}",
  });
};

/**
 * Get Current User Managers
 * Return all managers the current user is a member.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getBookingManagersUsersMe = (options?: Options) => {
  return (options?.client ?? client).get<
    GetBookingManagersUsersMeResponse,
    GetBookingManagersUsersMeError
  >({
    ...options,
    url: "/booking/managers/users/me",
  });
};

/**
 * Get Bookings For Manager
 * Return all bookings a user can manage.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getBookingBookingsUsersMeManage = (options?: Options) => {
  return (options?.client ?? client).get<
    GetBookingBookingsUsersMeManageResponse,
    GetBookingBookingsUsersMeManageError
  >({
    ...options,
    url: "/booking/bookings/users/me/manage",
  });
};

/**
 * Get Confirmed Bookings For Manager
 * Return all confirmed bookings a user can manage.
 * **The user must be authenticated to use this endpoint**
 */
export const getBookingBookingsConfirmedUsersMeManage = (options?: Options) => {
  return (options?.client ?? client).get<
    GetBookingBookingsConfirmedUsersMeManageResponse,
    GetBookingBookingsConfirmedUsersMeManageError
  >({
    ...options,
    url: "/booking/bookings/confirmed/users/me/manage",
  });
};

/**
 * Get Confirmed Bookings
 * Return all confirmed bookings.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getBookingBookingsConfirmed = (options?: Options) => {
  return (options?.client ?? client).get<
    GetBookingBookingsConfirmedResponse,
    GetBookingBookingsConfirmedError
  >({
    ...options,
    url: "/booking/bookings/confirmed",
  });
};

/**
 * Get Applicant Bookings
 * Get the user bookings.
 *
 * **Only usable by the user**
 */
export const getBookingBookingsUsersMe = (options?: Options) => {
  return (options?.client ?? client).get<
    GetBookingBookingsUsersMeResponse,
    GetBookingBookingsUsersMeError
  >({
    ...options,
    url: "/booking/bookings/users/me",
  });
};

/**
 * Create Booking
 * Create a booking.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const postBookingBookings = (
  options: Options<PostBookingBookingsData>,
) => {
  return (options?.client ?? client).post<
    PostBookingBookingsResponse,
    PostBookingBookingsError
  >({
    ...options,
    url: "/booking/bookings",
  });
};

/**
 * Edit Booking
 * Edit a booking.
 *
 * **Only usable by a user in the manager group of the booking or applicant before decision**
 */
export const patchBookingBookingsBookingId = (
  options: Options<PatchBookingBookingsBookingIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchBookingBookingsBookingIdResponse,
    PatchBookingBookingsBookingIdError
  >({
    ...options,
    url: "/booking/bookings/{booking_id}",
  });
};

/**
 * Delete Booking
 * Remove a booking.
 *
 * **Only usable by the applicant before decision**
 */
export const deleteBookingBookingsBookingId = (
  options: Options<DeleteBookingBookingsBookingIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteBookingBookingsBookingIdResponse,
    DeleteBookingBookingsBookingIdError
  >({
    ...options,
    url: "/booking/bookings/{booking_id}",
  });
};

/**
 * Confirm Booking
 * Give a decision to a booking.
 *
 * **Only usable by a user in the manager group of the booking**
 */
export const patchBookingBookingsBookingIdReplyDecision = (
  options: Options<PatchBookingBookingsBookingIdReplyDecisionData>,
) => {
  return (options?.client ?? client).patch<
    PatchBookingBookingsBookingIdReplyDecisionResponse,
    PatchBookingBookingsBookingIdReplyDecisionError
  >({
    ...options,
    url: "/booking/bookings/{booking_id}/reply/{decision}",
  });
};

/**
 * Get Rooms
 * Get all rooms.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getBookingRooms = (options?: Options) => {
  return (options?.client ?? client).get<
    GetBookingRoomsResponse,
    GetBookingRoomsError
  >({
    ...options,
    url: "/booking/rooms",
  });
};

/**
 * Create Room
 * Create a new room in database.
 *
 * **This endpoint is only usable by admins**
 */
export const postBookingRooms = (options: Options<PostBookingRoomsData>) => {
  return (options?.client ?? client).post<
    PostBookingRoomsResponse,
    PostBookingRoomsError
  >({
    ...options,
    url: "/booking/rooms",
  });
};

/**
 * Edit Room
 * Edit a room.
 *
 * **This endpoint is only usable by admins**
 */
export const patchBookingRoomsRoomId = (
  options: Options<PatchBookingRoomsRoomIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchBookingRoomsRoomIdResponse,
    PatchBookingRoomsRoomIdError
  >({
    ...options,
    url: "/booking/rooms/{room_id}",
  });
};

/**
 * Delete Room
 * Delete a room only if there are not future or ongoing bookings of this room
 *
 * **This endpoint is only usable by admins**
 */
export const deleteBookingRoomsRoomId = (
  options: Options<DeleteBookingRoomsRoomIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteBookingRoomsRoomIdResponse,
    DeleteBookingRoomsRoomIdError
  >({
    ...options,
    url: "/booking/rooms/{room_id}",
  });
};

/**
 * Get Sections
 * Return sections in the database as a list of `schemas_campaign.SectionBase`
 *
 * **The user must be a member of a group authorized to vote (voters) or a member of the group CAA to use this endpoint**
 */
export const getCampaignSections = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCampaignSectionsResponse,
    GetCampaignSectionsError
  >({
    ...options,
    url: "/campaign/sections",
  });
};

/**
 * Add Section
 * Add a section.
 *
 * This endpoint can only be used in 'waiting' status.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const postCampaignSections = (
  options: Options<PostCampaignSectionsData>,
) => {
  return (options?.client ?? client).post<
    PostCampaignSectionsResponse,
    PostCampaignSectionsError
  >({
    ...options,
    url: "/campaign/sections",
  });
};

/**
 * Delete Section
 * Delete a section.
 *
 * This endpoint can only be used in 'waiting' status.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const deleteCampaignSectionsSectionId = (
  options: Options<DeleteCampaignSectionsSectionIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCampaignSectionsSectionIdResponse,
    DeleteCampaignSectionsSectionIdError
  >({
    ...options,
    url: "/campaign/sections/{section_id}",
  });
};

/**
 * Get Lists
 * Return campaign lists registered for the vote.
 *
 * **The user must be a member of a group authorized to vote (voters) or a member of the group CAA to use this endpoint**
 */
export const getCampaignLists = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCampaignListsResponse,
    GetCampaignListsError
  >({
    ...options,
    url: "/campaign/lists",
  });
};

/**
 * Add List
 * Add a campaign list to a section.
 *
 * This endpoint can only be used in 'waiting' status.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const postCampaignLists = (options: Options<PostCampaignListsData>) => {
  return (options?.client ?? client).post<
    PostCampaignListsResponse,
    PostCampaignListsError
  >({
    ...options,
    url: "/campaign/lists",
  });
};

/**
 * Delete List
 * Delete the campaign list with the given id.
 *
 * This endpoint can only be used in 'waiting' status.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const deleteCampaignListsListId = (
  options: Options<DeleteCampaignListsListIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCampaignListsListIdResponse,
    DeleteCampaignListsListIdError
  >({
    ...options,
    url: "/campaign/lists/{list_id}",
  });
};

/**
 * Update List
 * Update the campaign list with the given id.
 *
 * This endpoint can only be used in 'waiting' status.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const patchCampaignListsListId = (
  options: Options<PatchCampaignListsListIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchCampaignListsListIdResponse,
    PatchCampaignListsListIdError
  >({
    ...options,
    url: "/campaign/lists/{list_id}",
  });
};

/**
 * Delete Lists By Type
 * Delete the all lists by type.
 *
 * This endpoint can only be used in 'waiting' status.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const deleteCampaignLists = (
  options?: Options<DeleteCampaignListsData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCampaignListsResponse,
    DeleteCampaignListsError
  >({
    ...options,
    url: "/campaign/lists/",
  });
};

/**
 * Get Voters
 * Return the voters (groups allowed to vote) for the current campaign.
 */
export const getCampaignVoters = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCampaignVotersResponse,
    GetCampaignVotersError
  >({
    ...options,
    url: "/campaign/voters",
  });
};

/**
 * Add Voter
 * Add voters (groups allowed to vote) for this campaign
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const postCampaignVoters = (
  options: Options<PostCampaignVotersData>,
) => {
  return (options?.client ?? client).post<
    PostCampaignVotersResponse,
    PostCampaignVotersError
  >({
    ...options,
    url: "/campaign/voters",
  });
};

/**
 * Delete Voters
 * Remove voters (groups allowed to vote)
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const deleteCampaignVoters = (options?: Options) => {
  return (options?.client ?? client).delete<
    DeleteCampaignVotersResponse,
    DeleteCampaignVotersError
  >({
    ...options,
    url: "/campaign/voters",
  });
};

/**
 * Delete Voter By Group Id
 * Remove a voter by its group id
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const deleteCampaignVotersGroupId = (
  options: Options<DeleteCampaignVotersGroupIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCampaignVotersGroupIdResponse,
    DeleteCampaignVotersGroupIdError
  >({
    ...options,
    url: "/campaign/voters/{group_id}",
  });
};

/**
 * Open Vote
 * If the status is 'waiting', change it to 'voting' and create the blank lists.
 *
 * > WARNING: this operation can not be reversed.
 * > When the status is 'open', all users can vote and sections and lists can no longer be edited.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const postCampaignStatusOpen = (options?: Options) => {
  return (options?.client ?? client).post<
    PostCampaignStatusOpenResponse,
    PostCampaignStatusOpenError
  >({
    ...options,
    url: "/campaign/status/open",
  });
};

/**
 * Close Vote
 * If the status is 'open', change it to 'closed'.
 *
 * > WARNING: this operation can not be reversed.
 * > When the status is 'closed', users are no longer able to vote.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const postCampaignStatusClose = (options?: Options) => {
  return (options?.client ?? client).post<
    PostCampaignStatusCloseResponse,
    PostCampaignStatusCloseError
  >({
    ...options,
    url: "/campaign/status/close",
  });
};

/**
 * Count Voting
 * If the status is 'closed', change it to 'counting'.
 *
 * > WARNING: this operation can not be reversed.
 * > When the status is 'counting', administrators can see the results of the vote.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const postCampaignStatusCounting = (options?: Options) => {
  return (options?.client ?? client).post<
    PostCampaignStatusCountingResponse,
    PostCampaignStatusCountingError
  >({
    ...options,
    url: "/campaign/status/counting",
  });
};

/**
 * Publish Vote
 * If the status is 'counting', change it to 'published'.
 *
 * > WARNING: this operation can not be reversed.
 * > When the status is 'published', everyone can see the results of the vote.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const postCampaignStatusPublished = (options?: Options) => {
  return (options?.client ?? client).post<
    PostCampaignStatusPublishedResponse,
    PostCampaignStatusPublishedError
  >({
    ...options,
    url: "/campaign/status/published",
  });
};

/**
 * Reset Vote
 * Reset the vote. Can only be used if the current status is counting ou published.
 *
 * > WARNING: This will delete all votes then put the module to Waiting status. This will also delete blank lists.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const postCampaignStatusReset = (options?: Options) => {
  return (options?.client ?? client).post<
    PostCampaignStatusResetResponse,
    PostCampaignStatusResetError
  >({
    ...options,
    url: "/campaign/status/reset",
  });
};

/**
 * Get Sections Already Voted
 * Return the list of id of sections an user has already voted for.
 *
 * **The user must be a member of a group authorized to vote (voters) to use this endpoint**
 */
export const getCampaignVotes = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCampaignVotesResponse,
    GetCampaignVotesError
  >({
    ...options,
    url: "/campaign/votes",
  });
};

/**
 * Vote
 * Add a vote for a given campaign list.
 *
 * An user can only vote for one list per section.
 *
 * **The user must be a member of a group authorized to vote (voters) to use this endpoint**
 */
export const postCampaignVotes = (options: Options<PostCampaignVotesData>) => {
  return (options?.client ?? client).post<
    PostCampaignVotesResponse,
    PostCampaignVotesError
  >({
    ...options,
    url: "/campaign/votes",
  });
};

/**
 * Get Results
 * Return the results of the vote.
 *
 * **The user must be a member of a group authorized to vote (voters) or a member of the group CAA to use this endpoint**
 */
export const getCampaignResults = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCampaignResultsResponse,
    GetCampaignResultsError
  >({
    ...options,
    url: "/campaign/results",
  });
};

/**
 * Get Status Vote
 * Get the current status of the vote.
 *
 * **The user must be a member of a group authorized to vote (voters) or a member of the group CAA to use this endpoint**
 */
export const getCampaignStatus = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCampaignStatusResponse,
    GetCampaignStatusError
  >({
    ...options,
    url: "/campaign/status",
  });
};

/**
 * Get Stats For Section
 * Get stats about a given section.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const getCampaignStatsSectionId = (
  options: Options<GetCampaignStatsSectionIdData>,
) => {
  return (options?.client ?? client).get<
    GetCampaignStatsSectionIdResponse,
    GetCampaignStatsSectionIdError
  >({
    ...options,
    url: "/campaign/stats/{section_id}",
  });
};

/**
 * Create Campaigns Logo
 * Upload a logo for a campaign list.
 *
 * **The user must be a member of the group CAA to use this endpoint**
 */
export const postCampaignListsListIdLogo = (
  options: Options<PostCampaignListsListIdLogoData>,
) => {
  return (options?.client ?? client).post<
    PostCampaignListsListIdLogoResponse,
    PostCampaignListsListIdLogoError
  >({
    ...options,
    ...formDataBodySerializer,
    url: "/campaign/lists/{list_id}/logo",
  });
};

/**
 * Read Campaigns Logo
 * Get the logo of a campaign list.
 * **The user must be a member of a group authorized to vote (voters) or a member of the group CAA to use this endpoint**
 */
export const getCampaignListsListIdLogo = (
  options: Options<GetCampaignListsListIdLogoData>,
) => {
  return (options?.client ?? client).get<
    GetCampaignListsListIdLogoResponse,
    GetCampaignListsListIdLogoError
  >({
    ...options,
    url: "/campaign/lists/{list_id}/logo",
  });
};

/**
 * Read Loaners
 * Get existing loaners.
 *
 * **This endpoint is only usable by administrators**
 */
export const getLoansLoaners = (options?: Options) => {
  return (options?.client ?? client).get<
    GetLoansLoanersResponse,
    GetLoansLoanersError
  >({
    ...options,
    url: "/loans/loaners/",
  });
};

/**
 * Create Loaner
 * Create a new loaner.
 *
 * Each loaner is associated with a `manager_group`. Users belonging to this group are able to manage the loaner items and loans.
 *
 * **This endpoint is only usable by administrators**
 */
export const postLoansLoaners = (options: Options<PostLoansLoanersData>) => {
  return (options?.client ?? client).post<
    PostLoansLoanersResponse,
    PostLoansLoanersError
  >({
    ...options,
    url: "/loans/loaners/",
  });
};

/**
 * Delete Loaner
 * Delete a loaner. All items and loans associated with the loaner will also be deleted from the database.
 *
 * **This endpoint is only usable by administrators**
 */
export const deleteLoansLoanersLoanerId = (
  options: Options<DeleteLoansLoanersLoanerIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteLoansLoanersLoanerIdResponse,
    DeleteLoansLoanersLoanerIdError
  >({
    ...options,
    url: "/loans/loaners/{loaner_id}",
  });
};

/**
 * Update Loaner
 * Update a loaner, the request should contain a JSON with the fields to change (not necessarily all fields) and their new value.
 *
 * **This endpoint is only usable by administrators**
 */
export const patchLoansLoanersLoanerId = (
  options: Options<PatchLoansLoanersLoanerIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchLoansLoanersLoanerIdResponse,
    PatchLoansLoanersLoanerIdError
  >({
    ...options,
    url: "/loans/loaners/{loaner_id}",
  });
};

/**
 * Get Loans By Loaner
 * Return all loans from a given group.
 *
 *
 * The query string `returned` can be used to get only return or non returned loans. By default, all loans are returned.
 *
 *
 * **The user must be a member of the loaner group_manager to use this endpoint**
 */
export const getLoansLoanersLoanerIdLoans = (
  options: Options<GetLoansLoanersLoanerIdLoansData>,
) => {
  return (options?.client ?? client).get<
    GetLoansLoanersLoanerIdLoansResponse,
    GetLoansLoanersLoanerIdLoansError
  >({
    ...options,
    url: "/loans/loaners/{loaner_id}/loans",
  });
};

/**
 * Get Items By Loaner
 * Return all items of a loaner.
 *
 * **The user must be a member of the loaner group_manager to use this endpoint**
 */
export const getLoansLoanersLoanerIdItems = (
  options: Options<GetLoansLoanersLoanerIdItemsData>,
) => {
  return (options?.client ?? client).get<
    GetLoansLoanersLoanerIdItemsResponse,
    GetLoansLoanersLoanerIdItemsError
  >({
    ...options,
    url: "/loans/loaners/{loaner_id}/items",
  });
};

/**
 * Create Items For Loaner
 * Create a new item for a loaner. A given loaner can not have more than one item with the same `name`.
 *
 * **The user must be a member of the loaner group_manager to use this endpoint**
 */
export const postLoansLoanersLoanerIdItems = (
  options: Options<PostLoansLoanersLoanerIdItemsData>,
) => {
  return (options?.client ?? client).post<
    PostLoansLoanersLoanerIdItemsResponse,
    PostLoansLoanersLoanerIdItemsError
  >({
    ...options,
    url: "/loans/loaners/{loaner_id}/items",
  });
};

/**
 * Update Items For Loaner
 * Update a loaner's item.
 *
 * **The user must be a member of the loaner group_manager to use this endpoint**
 */
export const patchLoansLoanersLoanerIdItemsItemId = (
  options: Options<PatchLoansLoanersLoanerIdItemsItemIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchLoansLoanersLoanerIdItemsItemIdResponse,
    PatchLoansLoanersLoanerIdItemsItemIdError
  >({
    ...options,
    url: "/loans/loaners/{loaner_id}/items/{item_id}",
  });
};

/**
 * Delete Loaner Item
 * Delete a loaner's item.
 * This will remove the item from all loans but won't delete any loan.
 *
 * **The user must be a member of the loaner group_manager to use this endpoint**
 */
export const deleteLoansLoanersLoanerIdItemsItemId = (
  options: Options<DeleteLoansLoanersLoanerIdItemsItemIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteLoansLoanersLoanerIdItemsItemIdResponse,
    DeleteLoansLoanersLoanerIdItemsItemIdError
  >({
    ...options,
    url: "/loans/loaners/{loaner_id}/items/{item_id}",
  });
};

/**
 * Get Current User Loans
 * Return all loans from the current user.
 *
 * The query string `returned` can be used to get only returned or non returned loans. By default, all loans are returned.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getLoansUsersMe = (options?: Options<GetLoansUsersMeData>) => {
  return (options?.client ?? client).get<
    GetLoansUsersMeResponse,
    GetLoansUsersMeError
  >({
    ...options,
    url: "/loans/users/me",
  });
};

/**
 * Get Current User Loaners
 * Return all loaners the current user can manage.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getLoansUsersMeLoaners = (options?: Options) => {
  return (options?.client ?? client).get<
    GetLoansUsersMeLoanersResponse,
    GetLoansUsersMeLoanersError
  >({
    ...options,
    url: "/loans/users/me/loaners",
  });
};

/**
 * Create Loan
 * Create a new loan in database and add the requested items
 *
 * **The user must be a member of the loaner group_manager to use this endpoint**
 */
export const postLoans = (options: Options<PostLoansData>) => {
  return (options?.client ?? client).post<PostLoansResponse, PostLoansError>({
    ...options,
    url: "/loans/",
  });
};

/**
 * Update Loan
 * Update a loan and its items.
 *
 * As the endpoint can update the loan items, it will send back
 * the new representation of the loan `Loan` including the new items relationships
 *
 * **The user must be a member of the loaner group_manager to use this endpoint**
 */
export const patchLoansLoanId = (options: Options<PatchLoansLoanIdData>) => {
  return (options?.client ?? client).patch<
    PatchLoansLoanIdResponse,
    PatchLoansLoanIdError
  >({
    ...options,
    url: "/loans/{loan_id}",
  });
};

/**
 * Delete Loan
 * Delete a loan
 * This will remove the loan but won't delete any loaner items.
 *
 * **The user must be a member of the loaner group_manager to use this endpoint**
 */
export const deleteLoansLoanId = (options: Options<DeleteLoansLoanIdData>) => {
  return (options?.client ?? client).delete<
    DeleteLoansLoanIdResponse,
    DeleteLoansLoanIdError
  >({
    ...options,
    url: "/loans/{loan_id}",
  });
};

/**
 * Return Loan
 * Mark a loan as returned. This will update items availability.
 *
 * **The user must be a member of the loaner group_manager to use this endpoint**
 */
export const postLoansLoanIdReturn = (
  options: Options<PostLoansLoanIdReturnData>,
) => {
  return (options?.client ?? client).post<
    PostLoansLoanIdReturnResponse,
    PostLoansLoanIdReturnError
  >({
    ...options,
    url: "/loans/{loan_id}/return",
  });
};

/**
 * Extend Loan
 * A new `end` date or an extended `duration` can be provided. If the two are provided, only `end` will be used.
 *
 * **The user must be a member of the loaner group_manager to use this endpoint**
 */
export const postLoansLoanIdExtend = (
  options: Options<PostLoansLoanIdExtendData>,
) => {
  return (options?.client ?? client).post<
    PostLoansLoanIdExtendResponse,
    PostLoansLoanIdExtendError
  >({
    ...options,
    url: "/loans/{loan_id}/extend",
  });
};

/**
 * Get Events
 * Get all events from the database.
 */
export const getCalendarEvents = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCalendarEventsResponse,
    GetCalendarEventsError
  >({
    ...options,
    url: "/calendar/events/",
  });
};

/**
 * Add Event
 * Add an event to the calendar.
 */
export const postCalendarEvents = (
  options: Options<PostCalendarEventsData>,
) => {
  return (options?.client ?? client).post<
    PostCalendarEventsResponse,
    PostCalendarEventsError
  >({
    ...options,
    url: "/calendar/events/",
  });
};

/**
 * Get Confirmed Events
 * Get all confirmed events.
 *
 * **Usable by every member**
 */
export const getCalendarEventsConfirmed = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCalendarEventsConfirmedResponse,
    GetCalendarEventsConfirmedError
  >({
    ...options,
    url: "/calendar/events/confirmed",
  });
};

/**
 * Get Applicant Bookings
 * Get one user bookings.
 *
 * **Usable by the user or admins**
 */
export const getCalendarEventsUserApplicantId = (
  options: Options<GetCalendarEventsUserApplicantIdData>,
) => {
  return (options?.client ?? client).get<
    GetCalendarEventsUserApplicantIdResponse,
    GetCalendarEventsUserApplicantIdError
  >({
    ...options,
    url: "/calendar/events/user/{applicant_id}",
  });
};

/**
 * Get Event By Id
 * Get an event's information by its id.
 */
export const getCalendarEventsEventId = (
  options: Options<GetCalendarEventsEventIdData>,
) => {
  return (options?.client ?? client).get<
    GetCalendarEventsEventIdResponse,
    GetCalendarEventsEventIdError
  >({
    ...options,
    url: "/calendar/events/{event_id}",
  });
};

/**
 * Edit Bookings Id
 * Edit an event.
 *
 * **Only usable by admins or applicant before decision**
 */
export const patchCalendarEventsEventId = (
  options: Options<PatchCalendarEventsEventIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchCalendarEventsEventIdResponse,
    PatchCalendarEventsEventIdError
  >({
    ...options,
    url: "/calendar/events/{event_id}",
  });
};

/**
 * Delete Bookings Id
 * Remove an event.
 *
 * **Only usable by admins or applicant before decision**
 */
export const deleteCalendarEventsEventId = (
  options: Options<DeleteCalendarEventsEventIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCalendarEventsEventIdResponse,
    DeleteCalendarEventsEventIdError
  >({
    ...options,
    url: "/calendar/events/{event_id}",
  });
};

/**
 * Get Event Applicant
 */
export const getCalendarEventsEventIdApplicant = (
  options: Options<GetCalendarEventsEventIdApplicantData>,
) => {
  return (options?.client ?? client).get<
    GetCalendarEventsEventIdApplicantResponse,
    GetCalendarEventsEventIdApplicantError
  >({
    ...options,
    url: "/calendar/events/{event_id}/applicant",
  });
};

/**
 * Confirm Booking
 * Give a decision to an event.
 *
 * **Only usable by admins**
 */
export const patchCalendarEventsEventIdReplyDecision = (
  options: Options<PatchCalendarEventsEventIdReplyDecisionData>,
) => {
  return (options?.client ?? client).patch<
    PatchCalendarEventsEventIdReplyDecisionResponse,
    PatchCalendarEventsEventIdReplyDecisionError
  >({
    ...options,
    url: "/calendar/events/{event_id}/reply/{decision}",
  });
};

/**
 * Recreate Ical File
 * Create manually the icalendar file
 *
 * **Only usable by global admins**
 */
export const postCalendarIcalCreate = (options?: Options) => {
  return (options?.client ?? client).post<
    PostCalendarIcalCreateResponse,
    PostCalendarIcalCreateError
  >({
    ...options,
    url: "/calendar/ical/create",
  });
};

/**
 * Get Icalendar File
 * Get the icalendar file corresponding to the event in the database.
 */
export const getCalendarIcal = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCalendarIcalResponse,
    GetCalendarIcalError
  >({
    ...options,
    url: "/calendar/ical",
  });
};

/**
 * Get Recommendation
 * Get recommendations.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getRecommendationRecommendations = (options?: Options) => {
  return (options?.client ?? client).get<
    GetRecommendationRecommendationsResponse,
    GetRecommendationRecommendationsError
  >({
    ...options,
    url: "/recommendation/recommendations",
  });
};

/**
 * Create Recommendation
 * Create a recommendation.
 *
 * **This endpoint is only usable by members of the group BDE**
 */
export const postRecommendationRecommendations = (
  options: Options<PostRecommendationRecommendationsData>,
) => {
  return (options?.client ?? client).post<
    PostRecommendationRecommendationsResponse,
    PostRecommendationRecommendationsError
  >({
    ...options,
    url: "/recommendation/recommendations",
  });
};

/**
 * Edit Recommendation
 * Edit a recommendation.
 *
 * **This endpoint is only usable by members of the group BDE**
 */
export const patchRecommendationRecommendationsRecommendationId = (
  options: Options<PatchRecommendationRecommendationsRecommendationIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchRecommendationRecommendationsRecommendationIdResponse,
    PatchRecommendationRecommendationsRecommendationIdError
  >({
    ...options,
    url: "/recommendation/recommendations/{recommendation_id}",
  });
};

/**
 * Delete Recommendation
 * Delete a recommendation.
 *
 * **This endpoint is only usable by members of the group BDE**
 */
export const deleteRecommendationRecommendationsRecommendationId = (
  options: Options<DeleteRecommendationRecommendationsRecommendationIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteRecommendationRecommendationsRecommendationIdResponse,
    DeleteRecommendationRecommendationsRecommendationIdError
  >({
    ...options,
    url: "/recommendation/recommendations/{recommendation_id}",
  });
};

/**
 * Read Recommendation Image
 * Get the image of a recommendation.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getRecommendationRecommendationsRecommendationIdPicture = (
  options: Options<GetRecommendationRecommendationsRecommendationIdPictureData>,
) => {
  return (options?.client ?? client).get<
    GetRecommendationRecommendationsRecommendationIdPictureResponse,
    GetRecommendationRecommendationsRecommendationIdPictureError
  >({
    ...options,
    url: "/recommendation/recommendations/{recommendation_id}/picture",
  });
};

/**
 * Create Recommendation Image
 * Add an image to a recommendation.
 *
 * **This endpoint is only usable by members of the group BDE**
 */
export const postRecommendationRecommendationsRecommendationIdPicture = (
  options: Options<PostRecommendationRecommendationsRecommendationIdPictureData>,
) => {
  return (options?.client ?? client).post<
    PostRecommendationRecommendationsRecommendationIdPictureResponse,
    PostRecommendationRecommendationsRecommendationIdPictureError
  >({
    ...options,
    ...formDataBodySerializer,
    url: "/recommendation/recommendations/{recommendation_id}/picture",
  });
};

/**
 * Read Advertisers
 * Get existing advertisers.
 */
export const getAdvertAdvertisers = (options?: Options) => {
  return (options?.client ?? client).get<
    GetAdvertAdvertisersResponse,
    GetAdvertAdvertisersError
  >({
    ...options,
    url: "/advert/advertisers",
  });
};

/**
 * Create Advertiser
 * Create a new advertiser.
 *
 * Each advertiser is associated with a `manager_group`. Users belonging to this group are able to manage the adverts related to the advertiser.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const postAdvertAdvertisers = (
  options: Options<PostAdvertAdvertisersData>,
) => {
  return (options?.client ?? client).post<
    PostAdvertAdvertisersResponse,
    PostAdvertAdvertisersError
  >({
    ...options,
    url: "/advert/advertisers",
  });
};

/**
 * Delete Advertiser
 * Delete an advertiser. All adverts associated with the advertiser will also be deleted from the database.
 *
 * **This endpoint is only usable by administrators**
 */
export const deleteAdvertAdvertisersAdvertiserId = (
  options: Options<DeleteAdvertAdvertisersAdvertiserIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteAdvertAdvertisersAdvertiserIdResponse,
    DeleteAdvertAdvertisersAdvertiserIdError
  >({
    ...options,
    url: "/advert/advertisers/{advertiser_id}",
  });
};

/**
 * Update Advertiser
 * Update an advertiser
 *
 * **This endpoint is only usable by administrators**
 */
export const patchAdvertAdvertisersAdvertiserId = (
  options: Options<PatchAdvertAdvertisersAdvertiserIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchAdvertAdvertisersAdvertiserIdResponse,
    PatchAdvertAdvertisersAdvertiserIdError
  >({
    ...options,
    url: "/advert/advertisers/{advertiser_id}",
  });
};

/**
 * Get Current User Advertisers
 * Return all advertisers the current user can manage.
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getAdvertMeAdvertisers = (options?: Options) => {
  return (options?.client ?? client).get<
    GetAdvertMeAdvertisersResponse,
    GetAdvertMeAdvertisersError
  >({
    ...options,
    url: "/advert/me/advertisers",
  });
};

/**
 * Read Adverts
 * Get existing adverts. If advertisers optional parameter is used, search adverts by advertisers
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getAdvertAdverts = (options?: Options<GetAdvertAdvertsData>) => {
  return (options?.client ?? client).get<
    GetAdvertAdvertsResponse,
    GetAdvertAdvertsError
  >({
    ...options,
    url: "/advert/adverts",
  });
};

/**
 * Create Advert
 * Create a new advert
 *
 * **The user must be a member of the advertiser group_manager to use this endpoint**
 */
export const postAdvertAdverts = (options: Options<PostAdvertAdvertsData>) => {
  return (options?.client ?? client).post<
    PostAdvertAdvertsResponse,
    PostAdvertAdvertsError
  >({
    ...options,
    url: "/advert/adverts",
  });
};

/**
 * Read Advert
 * Get an advert
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getAdvertAdvertsAdvertId = (
  options: Options<GetAdvertAdvertsAdvertIdData>,
) => {
  return (options?.client ?? client).get<
    GetAdvertAdvertsAdvertIdResponse,
    GetAdvertAdvertsAdvertIdError
  >({
    ...options,
    url: "/advert/adverts/{advert_id}",
  });
};

/**
 * Update Advert
 * Edit an advert
 *
 * **The user must be a member of the advertiser group_manager to use this endpoint**
 */
export const patchAdvertAdvertsAdvertId = (
  options: Options<PatchAdvertAdvertsAdvertIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchAdvertAdvertsAdvertIdResponse,
    PatchAdvertAdvertsAdvertIdError
  >({
    ...options,
    url: "/advert/adverts/{advert_id}",
  });
};

/**
 * Delete Advert
 * Delete an advert
 *
 * **The user must be admin or a member of the advertiser group_manager to use this endpoint**
 */
export const deleteAdvertAdvertsAdvertId = (
  options: Options<DeleteAdvertAdvertsAdvertIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteAdvertAdvertsAdvertIdResponse,
    DeleteAdvertAdvertsAdvertIdError
  >({
    ...options,
    url: "/advert/adverts/{advert_id}",
  });
};

/**
 * Read Advert Image
 * Get the image of an advert
 *
 * **The user must be authenticated to use this endpoint**
 */
export const getAdvertAdvertsAdvertIdPicture = (
  options: Options<GetAdvertAdvertsAdvertIdPictureData>,
) => {
  return (options?.client ?? client).get<
    GetAdvertAdvertsAdvertIdPictureResponse,
    GetAdvertAdvertsAdvertIdPictureError
  >({
    ...options,
    url: "/advert/adverts/{advert_id}/picture",
  });
};

/**
 * Create Advert Image
 * Add an image to an advert
 *
 * **The user must be authenticated to use this endpoint**
 */
export const postAdvertAdvertsAdvertIdPicture = (
  options: Options<PostAdvertAdvertsAdvertIdPictureData>,
) => {
  return (options?.client ?? client).post<
    PostAdvertAdvertsAdvertIdPictureResponse,
    PostAdvertAdvertsAdvertIdPictureError
  >({
    ...options,
    ...formDataBodySerializer,
    url: "/advert/adverts/{advert_id}/picture",
  });
};

/**
 * Get Movie
 * Makes a HTTP request to The Movie Database (TMDB)
 * using an API key and returns a TheMovieDB object
 * * https://developer.themoviedb.org/reference/movie-details
 * * https://developer.themoviedb.org/docs/errors
 */
export const getCinemaThemoviedbThemoviedbId = (
  options: Options<GetCinemaThemoviedbThemoviedbIdData>,
) => {
  return (options?.client ?? client).get<
    GetCinemaThemoviedbThemoviedbIdResponse,
    GetCinemaThemoviedbThemoviedbIdError
  >({
    ...options,
    url: "/cinema/themoviedb/{themoviedb_id}",
  });
};

/**
 * Get Sessions
 */
export const getCinemaSessions = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCinemaSessionsResponse,
    GetCinemaSessionsError
  >({
    ...options,
    url: "/cinema/sessions",
  });
};

/**
 * Create Session
 */
export const postCinemaSessions = (
  options: Options<PostCinemaSessionsData>,
) => {
  return (options?.client ?? client).post<
    PostCinemaSessionsResponse,
    PostCinemaSessionsError
  >({
    ...options,
    url: "/cinema/sessions",
  });
};

/**
 * Update Session
 */
export const patchCinemaSessionsSessionId = (
  options: Options<PatchCinemaSessionsSessionIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchCinemaSessionsSessionIdResponse,
    PatchCinemaSessionsSessionIdError
  >({
    ...options,
    url: "/cinema/sessions/{session_id}",
  });
};

/**
 * Delete Session
 */
export const deleteCinemaSessionsSessionId = (
  options: Options<DeleteCinemaSessionsSessionIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCinemaSessionsSessionIdResponse,
    DeleteCinemaSessionsSessionIdError
  >({
    ...options,
    url: "/cinema/sessions/{session_id}",
  });
};

/**
 * Create Campaigns Logo
 */
export const postCinemaSessionsSessionIdPoster = (
  options: Options<PostCinemaSessionsSessionIdPosterData>,
) => {
  return (options?.client ?? client).post<
    PostCinemaSessionsSessionIdPosterResponse,
    PostCinemaSessionsSessionIdPosterError
  >({
    ...options,
    ...formDataBodySerializer,
    url: "/cinema/sessions/{session_id}/poster",
  });
};

/**
 * Read Session Poster
 */
export const getCinemaSessionsSessionIdPoster = (
  options: Options<GetCinemaSessionsSessionIdPosterData>,
) => {
  return (options?.client ?? client).get<
    GetCinemaSessionsSessionIdPosterResponse,
    GetCinemaSessionsSessionIdPosterError
  >({
    ...options,
    url: "/cinema/sessions/{session_id}/poster",
  });
};

/**
 * Get Sellers
 * Get all sellers.
 *
 * **User must be CDR Admin to use this endpoint**
 */
export const getCdrSellers = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCdrSellersResponse,
    GetCdrSellersError
  >({
    ...options,
    url: "/cdr/sellers/",
  });
};

/**
 * Create Seller
 * Create a seller.
 *
 * **User must be CDR Admin to use this endpoint**
 */
export const postCdrSellers = (options: Options<PostCdrSellersData>) => {
  return (options?.client ?? client).post<
    PostCdrSellersResponse,
    PostCdrSellersError
  >({
    ...options,
    url: "/cdr/sellers/",
  });
};

/**
 * Get Sellers By User Id
 * Get sellers user is part of the group.
 *
 * **User must be authenticated to use this endpoint**
 */
export const getCdrUsersMeSellers = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCdrUsersMeSellersResponse,
    GetCdrUsersMeSellersError
  >({
    ...options,
    url: "/cdr/users/me/sellers/",
  });
};

/**
 * Get Online Sellers
 * Get all sellers that has online available products.
 *
 * **User must be authenticated to use this endpoint**
 */
export const getCdrOnlineSellers = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCdrOnlineSellersResponse,
    GetCdrOnlineSellersError
  >({
    ...options,
    url: "/cdr/online/sellers/",
  });
};

/**
 * Update Seller
 * Update a seller.
 *
 * **User must be CDR Admin to use this endpoint**
 */
export const patchCdrSellersSellerId = (
  options: Options<PatchCdrSellersSellerIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchCdrSellersSellerIdResponse,
    PatchCdrSellersSellerIdError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/",
  });
};

/**
 * Delete Seller
 * Delete a seller.
 *
 * **User must be CDR Admin to use this endpoint**
 */
export const deleteCdrSellersSellerId = (
  options: Options<DeleteCdrSellersSellerIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCdrSellersSellerIdResponse,
    DeleteCdrSellersSellerIdError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/",
  });
};

/**
 * Get Products By Seller Id
 * Get a seller's products.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const getCdrSellersSellerIdProducts = (
  options: Options<GetCdrSellersSellerIdProductsData>,
) => {
  return (options?.client ?? client).get<
    GetCdrSellersSellerIdProductsResponse,
    GetCdrSellersSellerIdProductsError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/products/",
  });
};

/**
 * Create Product
 * Create a product.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const postCdrSellersSellerIdProducts = (
  options: Options<PostCdrSellersSellerIdProductsData>,
) => {
  return (options?.client ?? client).post<
    PostCdrSellersSellerIdProductsResponse,
    PostCdrSellersSellerIdProductsError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/products/",
  });
};

/**
 * Get Available Online Products
 * Get a seller's online available products.
 *
 * **User must be authenticated to use this endpoint**
 */
export const getCdrOnlineSellersSellerIdProducts = (
  options: Options<GetCdrOnlineSellersSellerIdProductsData>,
) => {
  return (options?.client ?? client).get<
    GetCdrOnlineSellersSellerIdProductsResponse,
    GetCdrOnlineSellersSellerIdProductsError
  >({
    ...options,
    url: "/cdr/online/sellers/{seller_id}/products/",
  });
};

/**
 * Create Document Constraint
 * Add a document in a product's document constraints.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const postCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentId =
  (
    options: Options<PostCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentIdData>,
  ) => {
    return (options?.client ?? client).post<
      PostCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentIdResponse,
      PostCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentIdError
    >({
      ...options,
      url: "/cdr/sellers/{seller_id}/products/{product_id}/document_constraints/{document_id}/",
    });
  };

/**
 * Delete Document Constraint
 * Remove a document from a product's document constraints.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const deleteCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentId =
  (
    options: Options<DeleteCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentIdData>,
  ) => {
    return (options?.client ?? client).delete<
      DeleteCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentIdResponse,
      DeleteCdrSellersSellerIdProductsProductIdDocumentConstraintsDocumentIdError
    >({
      ...options,
      url: "/cdr/sellers/{seller_id}/products/{product_id}/document_constraints/{document_id}/",
    });
  };

/**
 * Create Product Constraint
 * Add a product in a product's product constraints.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const postCdrSellersSellerIdProductsProductIdProductConstraintsConstraintId =
  (
    options: Options<PostCdrSellersSellerIdProductsProductIdProductConstraintsConstraintIdData>,
  ) => {
    return (options?.client ?? client).post<
      PostCdrSellersSellerIdProductsProductIdProductConstraintsConstraintIdResponse,
      PostCdrSellersSellerIdProductsProductIdProductConstraintsConstraintIdError
    >({
      ...options,
      url: "/cdr/sellers/{seller_id}/products/{product_id}/product_constraints/{constraint_id}/",
    });
  };

/**
 * Delete Product Constraint
 * Remove a product from a product's document constraints.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const deleteCdrSellersSellerIdProductsProductIdProductConstraintsConstraintId =
  (
    options: Options<DeleteCdrSellersSellerIdProductsProductIdProductConstraintsConstraintIdData>,
  ) => {
    return (options?.client ?? client).delete<
      DeleteCdrSellersSellerIdProductsProductIdProductConstraintsConstraintIdResponse,
      DeleteCdrSellersSellerIdProductsProductIdProductConstraintsConstraintIdError
    >({
      ...options,
      url: "/cdr/sellers/{seller_id}/products/{product_id}/product_constraints/{constraint_id}/",
    });
  };

/**
 * Update Product
 * Edit a product.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const patchCdrSellersSellerIdProductsProductId = (
  options: Options<PatchCdrSellersSellerIdProductsProductIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchCdrSellersSellerIdProductsProductIdResponse,
    PatchCdrSellersSellerIdProductsProductIdError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/products/{product_id}/",
  });
};

/**
 * Delete Product
 * Delete a product.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const deleteCdrSellersSellerIdProductsProductId = (
  options: Options<DeleteCdrSellersSellerIdProductsProductIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCdrSellersSellerIdProductsProductIdResponse,
    DeleteCdrSellersSellerIdProductsProductIdError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/products/{product_id}/",
  });
};

/**
 * Create Product Variant
 * Create a product variant.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const postCdrSellersSellerIdProductsProductIdVariants = (
  options: Options<PostCdrSellersSellerIdProductsProductIdVariantsData>,
) => {
  return (options?.client ?? client).post<
    PostCdrSellersSellerIdProductsProductIdVariantsResponse,
    PostCdrSellersSellerIdProductsProductIdVariantsError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/products/{product_id}/variants/",
  });
};

/**
 * Update Product Variant
 * Edit a product variant.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const patchCdrSellersSellerIdProductsProductIdVariantsVariantId = (
  options: Options<PatchCdrSellersSellerIdProductsProductIdVariantsVariantIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchCdrSellersSellerIdProductsProductIdVariantsVariantIdResponse,
    PatchCdrSellersSellerIdProductsProductIdVariantsVariantIdError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/",
  });
};

/**
 * Delete Product Variant
 * Delete a product variant.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const deleteCdrSellersSellerIdProductsProductIdVariantsVariantId = (
  options: Options<DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdResponse,
    DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/",
  });
};

/**
 * Create Allowed Curriculum
 * Add a curriculum in a product variant's allowed curriculums.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const postCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumId =
  (
    options: Options<PostCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumIdData>,
  ) => {
    return (options?.client ?? client).post<
      PostCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumIdResponse,
      PostCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumIdError
    >({
      ...options,
      url: "/cdr/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/curriculums/{curriculum_id}/",
    });
  };

/**
 * Delete Allowed Curriculum
 * Remove a curriculum from a product variant's allowed curriculums.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const deleteCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumId =
  (
    options: Options<DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumIdData>,
  ) => {
    return (options?.client ?? client).delete<
      DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumIdResponse,
      DeleteCdrSellersSellerIdProductsProductIdVariantsVariantIdCurriculumsCurriculumIdError
    >({
      ...options,
      url: "/cdr/sellers/{seller_id}/products/{product_id}/variants/{variant_id}/curriculums/{curriculum_id}/",
    });
  };

/**
 * Get Documents
 * Get a seller's documents.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const getCdrSellersSellerIdDocuments = (
  options: Options<GetCdrSellersSellerIdDocumentsData>,
) => {
  return (options?.client ?? client).get<
    GetCdrSellersSellerIdDocumentsResponse,
    GetCdrSellersSellerIdDocumentsError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/documents/",
  });
};

/**
 * Create Document
 * Create a document.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const postCdrSellersSellerIdDocuments = (
  options: Options<PostCdrSellersSellerIdDocumentsData>,
) => {
  return (options?.client ?? client).post<
    PostCdrSellersSellerIdDocumentsResponse,
    PostCdrSellersSellerIdDocumentsError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/documents/",
  });
};

/**
 * Delete Document
 * Delete a document.
 *
 * **User must be part of the seller's group to use this endpoint**
 */
export const deleteCdrSellersSellerIdDocumentsDocumentId = (
  options: Options<DeleteCdrSellersSellerIdDocumentsDocumentIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCdrSellersSellerIdDocumentsDocumentIdResponse,
    DeleteCdrSellersSellerIdDocumentsDocumentIdError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/documents/{document_id}/",
  });
};

/**
 * Get Purchases By User Id
 * Get a user's purchases.
 *
 * **User must get his own purchases or be CDR Admin to use this endpoint**
 */
export const getCdrUsersUserIdPurchases = (
  options: Options<GetCdrUsersUserIdPurchasesData>,
) => {
  return (options?.client ?? client).get<
    GetCdrUsersUserIdPurchasesResponse,
    GetCdrUsersUserIdPurchasesError
  >({
    ...options,
    url: "/cdr/users/{user_id}/purchases/",
  });
};

/**
 * Get Purchases By User Id By Seller Id
 * Get a user's purchases.
 *
 * **User must get his own purchases or be part of the seller's group to use this endpoint**
 */
export const getCdrSellersSellerIdUsersUserIdPurchases = (
  options: Options<GetCdrSellersSellerIdUsersUserIdPurchasesData>,
) => {
  return (options?.client ?? client).get<
    GetCdrSellersSellerIdUsersUserIdPurchasesResponse,
    GetCdrSellersSellerIdUsersUserIdPurchasesError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/users/{user_id}/purchases/",
  });
};

/**
 * Create Purchase
 * Create a purchase.
 *
 * **User must create a purchase for themself and for an online available product or be part of the seller's group to use this endpoint**
 */
export const postCdrUsersUserIdPurchasesProductVariantId = (
  options: Options<PostCdrUsersUserIdPurchasesProductVariantIdData>,
) => {
  return (options?.client ?? client).post<
    PostCdrUsersUserIdPurchasesProductVariantIdResponse,
    PostCdrUsersUserIdPurchasesProductVariantIdError
  >({
    ...options,
    url: "/cdr/users/{user_id}/purchases/{product_variant_id}/",
  });
};

/**
 * Update Purchase
 * Edit a purchase.
 *
 * **User must create a purchase for themself and for an online available product or be part of the seller's group to use this endpoint**
 */
export const patchCdrUsersUserIdPurchasesProductVariantId = (
  options: Options<PatchCdrUsersUserIdPurchasesProductVariantIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchCdrUsersUserIdPurchasesProductVariantIdResponse,
    PatchCdrUsersUserIdPurchasesProductVariantIdError
  >({
    ...options,
    url: "/cdr/users/{user_id}/purchases/{product_variant_id}/",
  });
};

/**
 * Delete Purchase
 * Delete a purchase.
 *
 * **User must create a purchase for themself and for an online available product or be part of the seller's group to use this endpoint**
 */
export const deleteCdrUsersUserIdPurchasesProductVariantId = (
  options: Options<DeleteCdrUsersUserIdPurchasesProductVariantIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCdrUsersUserIdPurchasesProductVariantIdResponse,
    DeleteCdrUsersUserIdPurchasesProductVariantIdError
  >({
    ...options,
    url: "/cdr/users/{user_id}/purchases/{product_variant_id}/",
  });
};

/**
 * Mark Purchase As Validated
 * Validate a purchase.
 *
 * **User must be CDR Admin to use this endpoint**
 */
export const patchCdrUsersUserIdPurchasesProductVariantIdValidated = (
  options: Options<PatchCdrUsersUserIdPurchasesProductVariantIdValidatedData>,
) => {
  return (options?.client ?? client).patch<
    PatchCdrUsersUserIdPurchasesProductVariantIdValidatedResponse,
    PatchCdrUsersUserIdPurchasesProductVariantIdValidatedError
  >({
    ...options,
    url: "/cdr/users/{user_id}/purchases/{product_variant_id}/validated/",
  });
};

/**
 * Get Signatures By User Id
 * Get a user's signatures.
 *
 * **User must get his own signatures or be CDR Admin to use this endpoint**
 */
export const getCdrUsersUserIdSignatures = (
  options: Options<GetCdrUsersUserIdSignaturesData>,
) => {
  return (options?.client ?? client).get<
    GetCdrUsersUserIdSignaturesResponse,
    GetCdrUsersUserIdSignaturesError
  >({
    ...options,
    url: "/cdr/users/{user_id}/signatures/",
  });
};

/**
 * Get Signatures By User Id By Seller Id
 * Get a user's signatures for a single seller.
 *
 * **User must get his own signatures or be part of the seller's group to use this endpoint**
 */
export const getCdrSellersSellerIdUsersUserIdSignatures = (
  options: Options<GetCdrSellersSellerIdUsersUserIdSignaturesData>,
) => {
  return (options?.client ?? client).get<
    GetCdrSellersSellerIdUsersUserIdSignaturesResponse,
    GetCdrSellersSellerIdUsersUserIdSignaturesError
  >({
    ...options,
    url: "/cdr/sellers/{seller_id}/users/{user_id}/signatures/",
  });
};

/**
 * Create Signature
 * Create a signature.
 *
 * **User must sign numerically or be part of the seller's group to use this endpoint**
 */
export const postCdrUsersUserIdSignaturesDocumentId = (
  options: Options<PostCdrUsersUserIdSignaturesDocumentIdData>,
) => {
  return (options?.client ?? client).post<
    PostCdrUsersUserIdSignaturesDocumentIdResponse,
    PostCdrUsersUserIdSignaturesDocumentIdError
  >({
    ...options,
    url: "/cdr/users/{user_id}/signatures/{document_id}/",
  });
};

/**
 * Delete Signature
 * Delete a signature.
 *
 * **User must be CDR Admin to use this endpoint**
 */
export const deleteCdrUsersUserIdSignaturesDocumentId = (
  options: Options<DeleteCdrUsersUserIdSignaturesDocumentIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCdrUsersUserIdSignaturesDocumentIdResponse,
    DeleteCdrUsersUserIdSignaturesDocumentIdError
  >({
    ...options,
    url: "/cdr/users/{user_id}/signatures/{document_id}/",
  });
};

/**
 * Get Curriculums
 * Get all curriculums.
 *
 * **User be authenticated to use this endpoint**
 */
export const getCdrCurriculums = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCdrCurriculumsResponse,
    GetCdrCurriculumsError
  >({
    ...options,
    url: "/cdr/curriculums/",
  });
};

/**
 * Create Curriculum
 * Create a curriculum.
 *
 * **User must be CDR Admin to use this endpoint**
 */
export const postCdrCurriculums = (
  options: Options<PostCdrCurriculumsData>,
) => {
  return (options?.client ?? client).post<
    PostCdrCurriculumsResponse,
    PostCdrCurriculumsError
  >({
    ...options,
    url: "/cdr/curriculums/",
  });
};

/**
 * Delete Curriculum
 * Delete a curriculum.
 *
 * **User must be CDR Admin to use this endpoint**
 */
export const deleteCdrCurriculumsCurriculumId = (
  options: Options<DeleteCdrCurriculumsCurriculumIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCdrCurriculumsCurriculumIdResponse,
    DeleteCdrCurriculumsCurriculumIdError
  >({
    ...options,
    url: "/cdr/curriculums/{curriculum_id}/",
  });
};

/**
 * Create Curriculum Membership
 * Add a curriculum to a user.
 *
 * **User must add a curriculum to themself or be CDR Admin to use this endpoint**
 */
export const postCdrUsersUserIdCurriculumsCurriculumId = (
  options: Options<PostCdrUsersUserIdCurriculumsCurriculumIdData>,
) => {
  return (options?.client ?? client).post<
    PostCdrUsersUserIdCurriculumsCurriculumIdResponse,
    PostCdrUsersUserIdCurriculumsCurriculumIdError
  >({
    ...options,
    url: "/cdr/users/{user_id}/curriculums/{curriculum_id}/",
  });
};

/**
 * Delete Curriculum Membership
 * Remove a curriculum from a user.
 *
 * **User must add a curriculum to themself or be CDR Admin to use this endpoint**
 */
export const deleteCdrUsersUserIdCurriculumsCurriculumId = (
  options: Options<DeleteCdrUsersUserIdCurriculumsCurriculumIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCdrUsersUserIdCurriculumsCurriculumIdResponse,
    DeleteCdrUsersUserIdCurriculumsCurriculumIdError
  >({
    ...options,
    url: "/cdr/users/{user_id}/curriculums/{curriculum_id}/",
  });
};

/**
 * Get Payments By User Id
 * Get a user's payments.
 *
 * **User must get his own payments or be CDR Admin to use this endpoint**
 */
export const getCdrUsersUserIdPayments = (
  options: Options<GetCdrUsersUserIdPaymentsData>,
) => {
  return (options?.client ?? client).get<
    GetCdrUsersUserIdPaymentsResponse,
    GetCdrUsersUserIdPaymentsError
  >({
    ...options,
    url: "/cdr/users/{user_id}/payments/",
  });
};

/**
 * Create Payment
 * Create a payment.
 *
 * **User must be CDR Admin to use this endpoint**
 */
export const postCdrUsersUserIdPayments = (
  options: Options<PostCdrUsersUserIdPaymentsData>,
) => {
  return (options?.client ?? client).post<
    PostCdrUsersUserIdPaymentsResponse,
    PostCdrUsersUserIdPaymentsError
  >({
    ...options,
    url: "/cdr/users/{user_id}/payments/",
  });
};

/**
 * Delete Payment
 * Remove a payment.
 *
 * **User must be CDR Admin to use this endpoint**
 */
export const deleteCdrUsersUserIdPaymentsPaymentId = (
  options: Options<DeleteCdrUsersUserIdPaymentsPaymentIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCdrUsersUserIdPaymentsPaymentIdResponse,
    DeleteCdrUsersUserIdPaymentsPaymentIdError
  >({
    ...options,
    url: "/cdr/users/{user_id}/payments/{payment_id}/",
  });
};

/**
 * Get Memberships By User Id
 */
export const getCdrUsersUserIdMemberships = (
  options: Options<GetCdrUsersUserIdMembershipsData>,
) => {
  return (options?.client ?? client).get<
    GetCdrUsersUserIdMembershipsResponse,
    GetCdrUsersUserIdMembershipsError
  >({
    ...options,
    url: "/cdr/users/{user_id}/memberships/",
  });
};

/**
 * Create Membership
 */
export const postCdrUsersUserIdMemberships = (
  options: Options<PostCdrUsersUserIdMembershipsData>,
) => {
  return (options?.client ?? client).post<
    PostCdrUsersUserIdMembershipsResponse,
    PostCdrUsersUserIdMembershipsError
  >({
    ...options,
    url: "/cdr/users/{user_id}/memberships/",
  });
};

/**
 * Delete Membership
 */
export const deleteCdrUsersUserIdMembershipsMembershipId = (
  options: Options<DeleteCdrUsersUserIdMembershipsMembershipIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteCdrUsersUserIdMembershipsMembershipIdResponse,
    DeleteCdrUsersUserIdMembershipsMembershipIdError
  >({
    ...options,
    url: "/cdr/users/{user_id}/memberships/{membership_id}/",
  });
};

/**
 * Get Status
 */
export const getCdrStatus = (options?: Options) => {
  return (options?.client ?? client).get<
    GetCdrStatusResponse,
    GetCdrStatusError
  >({
    ...options,
    url: "/cdr/status/",
  });
};

/**
 * Update Status
 */
export const patchCdrStatus = (options: Options<PatchCdrStatusData>) => {
  return (options?.client ?? client).patch<
    PatchCdrStatusResponse,
    PatchCdrStatusError
  >({
    ...options,
    url: "/cdr/status/",
  });
};

/**
 * Get Products
 * Return all products
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const getAmapProducts = (options?: Options) => {
  return (options?.client ?? client).get<
    GetAmapProductsResponse,
    GetAmapProductsError
  >({
    ...options,
    url: "/amap/products",
  });
};

/**
 * Create Product
 * Create a new product
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const postAmapProducts = (options: Options<PostAmapProductsData>) => {
  return (options?.client ?? client).post<
    PostAmapProductsResponse,
    PostAmapProductsError
  >({
    ...options,
    url: "/amap/products",
  });
};

/**
 * Get Product By Id
 * Get a specific product
 */
export const getAmapProductsProductId = (
  options: Options<GetAmapProductsProductIdData>,
) => {
  return (options?.client ?? client).get<
    GetAmapProductsProductIdResponse,
    GetAmapProductsProductIdError
  >({
    ...options,
    url: "/amap/products/{product_id}",
  });
};

/**
 * Edit Product
 * Edit a product
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const patchAmapProductsProductId = (
  options: Options<PatchAmapProductsProductIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchAmapProductsProductIdResponse,
    PatchAmapProductsProductIdError
  >({
    ...options,
    url: "/amap/products/{product_id}",
  });
};

/**
 * Delete Product
 * Delete a product. A product can not be deleted if it is already used in a delivery.
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const deleteAmapProductsProductId = (
  options: Options<DeleteAmapProductsProductIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteAmapProductsProductIdResponse,
    DeleteAmapProductsProductIdError
  >({
    ...options,
    url: "/amap/products/{product_id}",
  });
};

/**
 * Get Deliveries
 * Get all deliveries.
 */
export const getAmapDeliveries = (options?: Options) => {
  return (options?.client ?? client).get<
    GetAmapDeliveriesResponse,
    GetAmapDeliveriesError
  >({
    ...options,
    url: "/amap/deliveries",
  });
};

/**
 * Create Delivery
 * Create a new delivery.
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const postAmapDeliveries = (
  options: Options<PostAmapDeliveriesData>,
) => {
  return (options?.client ?? client).post<
    PostAmapDeliveriesResponse,
    PostAmapDeliveriesError
  >({
    ...options,
    url: "/amap/deliveries",
  });
};

/**
 * Delete Delivery
 * Delete a delivery.
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const deleteAmapDeliveriesDeliveryId = (
  options: Options<DeleteAmapDeliveriesDeliveryIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteAmapDeliveriesDeliveryIdResponse,
    DeleteAmapDeliveriesDeliveryIdError
  >({
    ...options,
    url: "/amap/deliveries/{delivery_id}",
  });
};

/**
 * Edit Delivery
 * Edit a delivery.
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const patchAmapDeliveriesDeliveryId = (
  options: Options<PatchAmapDeliveriesDeliveryIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchAmapDeliveriesDeliveryIdResponse,
    PatchAmapDeliveriesDeliveryIdError
  >({
    ...options,
    url: "/amap/deliveries/{delivery_id}",
  });
};

/**
 * Add Product To Delivery
 * Add `product_id` product to `delivery_id` delivery. This endpoint will only add a membership between the two objects.
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const postAmapDeliveriesDeliveryIdProducts = (
  options: Options<PostAmapDeliveriesDeliveryIdProductsData>,
) => {
  return (options?.client ?? client).post<
    PostAmapDeliveriesDeliveryIdProductsResponse,
    PostAmapDeliveriesDeliveryIdProductsError
  >({
    ...options,
    url: "/amap/deliveries/{delivery_id}/products",
  });
};

/**
 * Remove Product From Delivery
 * Remove a given product from a delivery. This won't delete the product nor the delivery.
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const deleteAmapDeliveriesDeliveryIdProducts = (
  options: Options<DeleteAmapDeliveriesDeliveryIdProductsData>,
) => {
  return (options?.client ?? client).delete<
    DeleteAmapDeliveriesDeliveryIdProductsResponse,
    DeleteAmapDeliveriesDeliveryIdProductsError
  >({
    ...options,
    url: "/amap/deliveries/{delivery_id}/products",
  });
};

/**
 * Get Orders From Delivery
 * Get orders from a delivery.
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const getAmapDeliveriesDeliveryIdOrders = (
  options: Options<GetAmapDeliveriesDeliveryIdOrdersData>,
) => {
  return (options?.client ?? client).get<
    GetAmapDeliveriesDeliveryIdOrdersResponse,
    GetAmapDeliveriesDeliveryIdOrdersError
  >({
    ...options,
    url: "/amap/deliveries/{delivery_id}/orders",
  });
};

/**
 * Get Order By Id
 * Get content of an order.
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const getAmapOrdersOrderId = (
  options: Options<GetAmapOrdersOrderIdData>,
) => {
  return (options?.client ?? client).get<
    GetAmapOrdersOrderIdResponse,
    GetAmapOrdersOrderIdError
  >({
    ...options,
    url: "/amap/orders/{order_id}",
  });
};

/**
 * Edit Order From Delivery
 * Edit an order.
 *
 * **A member of the group AMAP can edit orders of other users**
 */
export const patchAmapOrdersOrderId = (
  options: Options<PatchAmapOrdersOrderIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchAmapOrdersOrderIdResponse,
    PatchAmapOrdersOrderIdError
  >({
    ...options,
    url: "/amap/orders/{order_id}",
  });
};

/**
 * Remove Order
 * Delete an order.
 *
 * **A member of the group AMAP can delete orders of other users**
 */
export const deleteAmapOrdersOrderId = (
  options: Options<DeleteAmapOrdersOrderIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteAmapOrdersOrderIdResponse,
    DeleteAmapOrdersOrderIdError
  >({
    ...options,
    url: "/amap/orders/{order_id}",
  });
};

/**
 * Add Order To Delievery
 * Add an order to a delivery.
 *
 * **A member of the group AMAP can create an order for every user**
 */
export const postAmapOrders = (options: Options<PostAmapOrdersData>) => {
  return (options?.client ?? client).post<
    PostAmapOrdersResponse,
    PostAmapOrdersError
  >({
    ...options,
    url: "/amap/orders",
  });
};

/**
 * Open Ordering Of Delivery
 */
export const postAmapDeliveriesDeliveryIdOpenordering = (
  options: Options<PostAmapDeliveriesDeliveryIdOpenorderingData>,
) => {
  return (options?.client ?? client).post<
    PostAmapDeliveriesDeliveryIdOpenorderingResponse,
    PostAmapDeliveriesDeliveryIdOpenorderingError
  >({
    ...options,
    url: "/amap/deliveries/{delivery_id}/openordering",
  });
};

/**
 * Lock Delivery
 */
export const postAmapDeliveriesDeliveryIdLock = (
  options: Options<PostAmapDeliveriesDeliveryIdLockData>,
) => {
  return (options?.client ?? client).post<
    PostAmapDeliveriesDeliveryIdLockResponse,
    PostAmapDeliveriesDeliveryIdLockError
  >({
    ...options,
    url: "/amap/deliveries/{delivery_id}/lock",
  });
};

/**
 * Mark Delivery As Delivered
 */
export const postAmapDeliveriesDeliveryIdDelivered = (
  options: Options<PostAmapDeliveriesDeliveryIdDeliveredData>,
) => {
  return (options?.client ?? client).post<
    PostAmapDeliveriesDeliveryIdDeliveredResponse,
    PostAmapDeliveriesDeliveryIdDeliveredError
  >({
    ...options,
    url: "/amap/deliveries/{delivery_id}/delivered",
  });
};

/**
 * Archive Of Delivery
 */
export const postAmapDeliveriesDeliveryIdArchive = (
  options: Options<PostAmapDeliveriesDeliveryIdArchiveData>,
) => {
  return (options?.client ?? client).post<
    PostAmapDeliveriesDeliveryIdArchiveResponse,
    PostAmapDeliveriesDeliveryIdArchiveError
  >({
    ...options,
    url: "/amap/deliveries/{delivery_id}/archive",
  });
};

/**
 * Get Users Cash
 * Get cash from all users.
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const getAmapUsersCash = (options?: Options) => {
  return (options?.client ?? client).get<
    GetAmapUsersCashResponse,
    GetAmapUsersCashError
  >({
    ...options,
    url: "/amap/users/cash",
  });
};

/**
 * Get Cash By Id
 * Get cash from a specific user.
 *
 * **The user must be a member of the group AMAP to use this endpoint or can only access the endpoint for its own user_id**
 */
export const getAmapUsersUserIdCash = (
  options: Options<GetAmapUsersUserIdCashData>,
) => {
  return (options?.client ?? client).get<
    GetAmapUsersUserIdCashResponse,
    GetAmapUsersUserIdCashError
  >({
    ...options,
    url: "/amap/users/{user_id}/cash",
  });
};

/**
 * Create Cash Of User
 * Create cash for an user.
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const postAmapUsersUserIdCash = (
  options: Options<PostAmapUsersUserIdCashData>,
) => {
  return (options?.client ?? client).post<
    PostAmapUsersUserIdCashResponse,
    PostAmapUsersUserIdCashError
  >({
    ...options,
    url: "/amap/users/{user_id}/cash",
  });
};

/**
 * Edit Cash By Id
 * Edit cash for an user. This will add the balance to the current balance.
 * A negative value can be provided to remove money from the user.
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const patchAmapUsersUserIdCash = (
  options: Options<PatchAmapUsersUserIdCashData>,
) => {
  return (options?.client ?? client).patch<
    PatchAmapUsersUserIdCashResponse,
    PatchAmapUsersUserIdCashError
  >({
    ...options,
    url: "/amap/users/{user_id}/cash",
  });
};

/**
 * Get Orders Of User
 * Get orders from an user.
 *
 * **The user must be a member of the group AMAP to use this endpoint or can only access the endpoint for its own user_id**
 */
export const getAmapUsersUserIdOrders = (
  options: Options<GetAmapUsersUserIdOrdersData>,
) => {
  return (options?.client ?? client).get<
    GetAmapUsersUserIdOrdersResponse,
    GetAmapUsersUserIdOrdersError
  >({
    ...options,
    url: "/amap/users/{user_id}/orders",
  });
};

/**
 * Get Information
 * Return all information
 */
export const getAmapInformation = (options?: Options) => {
  return (options?.client ?? client).get<
    GetAmapInformationResponse,
    GetAmapInformationError
  >({
    ...options,
    url: "/amap/information",
  });
};

/**
 * Edit Information
 * Update information
 *
 * **The user must be a member of the group AMAP to use this endpoint**
 */
export const patchAmapInformation = (
  options: Options<PatchAmapInformationData>,
) => {
  return (options?.client ?? client).patch<
    PatchAmapInformationResponse,
    PatchAmapInformationError
  >({
    ...options,
    url: "/amap/information",
  });
};

/**
 * Get Flappybird Score
 * Return the leaderboard score of the skip...limit
 */
export const getFlappybirdScores = (
  options?: Options<GetFlappybirdScoresData>,
) => {
  return (options?.client ?? client).get<
    GetFlappybirdScoresResponse,
    GetFlappybirdScoresError
  >({
    ...options,
    url: "/flappybird/scores",
  });
};

/**
 * Create Flappybird Score
 */
export const postFlappybirdScores = (
  options: Options<PostFlappybirdScoresData>,
) => {
  return (options?.client ?? client).post<
    PostFlappybirdScoresResponse,
    PostFlappybirdScoresError
  >({
    ...options,
    url: "/flappybird/scores",
  });
};

/**
 * Get Current User Flappybird Personal Best
 */
export const getFlappybirdScoresMe = (options?: Options) => {
  return (options?.client ?? client).get<
    GetFlappybirdScoresMeResponse,
    GetFlappybirdScoresMeError
  >({
    ...options,
    url: "/flappybird/scores/me",
  });
};

/**
 * Get Raffle
 * Return all raffles
 */
export const getTombolaRaffles = (options?: Options) => {
  return (options?.client ?? client).get<
    GetTombolaRafflesResponse,
    GetTombolaRafflesError
  >({
    ...options,
    url: "/tombola/raffles",
  });
};

/**
 * Create Raffle
 * Create a new raffle
 *
 * **The user must be a member of the group admin to use this endpoint**
 */
export const postTombolaRaffles = (
  options: Options<PostTombolaRafflesData>,
) => {
  return (options?.client ?? client).post<
    PostTombolaRafflesResponse,
    PostTombolaRafflesError
  >({
    ...options,
    url: "/tombola/raffles",
  });
};

/**
 * Edit Raffle
 * Edit a raffle
 *
 * **The user must be a member of the raffle's group to use this endpoint**
 */
export const patchTombolaRafflesRaffleId = (
  options: Options<PatchTombolaRafflesRaffleIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchTombolaRafflesRaffleIdResponse,
    PatchTombolaRafflesRaffleIdError
  >({
    ...options,
    url: "/tombola/raffles/{raffle_id}",
  });
};

/**
 * Delete Raffle
 * Delete a raffle.
 *
 * **The user must be a member of the raffle's group to use this endpoint**
 */
export const deleteTombolaRafflesRaffleId = (
  options: Options<DeleteTombolaRafflesRaffleIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteTombolaRafflesRaffleIdResponse,
    DeleteTombolaRafflesRaffleIdError
  >({
    ...options,
    url: "/tombola/raffles/{raffle_id}",
  });
};

/**
 * Get Raffles By Group Id
 * Return all raffles from a group
 */
export const getTombolaGroupGroupIdRaffles = (
  options: Options<GetTombolaGroupGroupIdRafflesData>,
) => {
  return (options?.client ?? client).get<
    GetTombolaGroupGroupIdRafflesResponse,
    GetTombolaGroupGroupIdRafflesError
  >({
    ...options,
    url: "/tombola/group/{group_id}/raffles",
  });
};

/**
 * Get Raffle Stats
 * Return the number of ticket sold and the total amount recollected for a raffle
 */
export const getTombolaRafflesRaffleIdStats = (
  options: Options<GetTombolaRafflesRaffleIdStatsData>,
) => {
  return (options?.client ?? client).get<
    GetTombolaRafflesRaffleIdStatsResponse,
    GetTombolaRafflesRaffleIdStatsError
  >({
    ...options,
    url: "/tombola/raffles/{raffle_id}/stats",
  });
};

/**
 * Create Current Raffle Logo
 * Upload a logo for a specific raffle.
 *
 * **The user must be a member of the raffle's group to use this endpoint**
 */
export const postTombolaRafflesRaffleIdLogo = (
  options: Options<PostTombolaRafflesRaffleIdLogoData>,
) => {
  return (options?.client ?? client).post<
    PostTombolaRafflesRaffleIdLogoResponse,
    PostTombolaRafflesRaffleIdLogoError
  >({
    ...options,
    ...formDataBodySerializer,
    url: "/tombola/raffles/{raffle_id}/logo",
  });
};

/**
 * Read Raffle Logo
 * Get the logo of a specific raffle.
 */
export const getTombolaRafflesRaffleIdLogo = (
  options: Options<GetTombolaRafflesRaffleIdLogoData>,
) => {
  return (options?.client ?? client).get<
    GetTombolaRafflesRaffleIdLogoResponse,
    GetTombolaRafflesRaffleIdLogoError
  >({
    ...options,
    url: "/tombola/raffles/{raffle_id}/logo",
  });
};

/**
 * Get Pack Tickets
 * Return all tickets
 */
export const getTombolaPackTickets = (options?: Options) => {
  return (options?.client ?? client).get<
    GetTombolaPackTicketsResponse,
    GetTombolaPackTicketsError
  >({
    ...options,
    url: "/tombola/pack_tickets",
  });
};

/**
 * Create Packticket
 * Create a new packticket
 *
 * **The user must be a member of the raffle's group to use this endpoint**
 */
export const postTombolaPackTickets = (
  options: Options<PostTombolaPackTicketsData>,
) => {
  return (options?.client ?? client).post<
    PostTombolaPackTicketsResponse,
    PostTombolaPackTicketsError
  >({
    ...options,
    url: "/tombola/pack_tickets",
  });
};

/**
 * Edit Packticket
 * Edit a packticket
 *
 * **The user must be a member of the raffle's group to use this endpoint**
 */
export const patchTombolaPackTicketsPackticketId = (
  options: Options<PatchTombolaPackTicketsPackticketIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchTombolaPackTicketsPackticketIdResponse,
    PatchTombolaPackTicketsPackticketIdError
  >({
    ...options,
    url: "/tombola/pack_tickets/{packticket_id}",
  });
};

/**
 * Delete Packticket
 * Delete a packticket.
 *
 * **The user must be a member of the raffle's group to use this endpoint**
 */
export const deleteTombolaPackTicketsPackticketId = (
  options: Options<DeleteTombolaPackTicketsPackticketIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteTombolaPackTicketsPackticketIdResponse,
    DeleteTombolaPackTicketsPackticketIdError
  >({
    ...options,
    url: "/tombola/pack_tickets/{packticket_id}",
  });
};

/**
 * Get Pack Tickets By Raffle Id
 * Return all pack_tickets associated to a raffle
 */
export const getTombolaRafflesRaffleIdPackTickets = (
  options: Options<GetTombolaRafflesRaffleIdPackTicketsData>,
) => {
  return (options?.client ?? client).get<
    GetTombolaRafflesRaffleIdPackTicketsResponse,
    GetTombolaRafflesRaffleIdPackTicketsError
  >({
    ...options,
    url: "/tombola/raffles/{raffle_id}/pack_tickets",
  });
};

/**
 * Get Tickets
 * Return all tickets
 *
 * **The user must be a member of the group admin to use this endpoint**
 */
export const getTombolaTickets = (options?: Options) => {
  return (options?.client ?? client).get<
    GetTombolaTicketsResponse,
    GetTombolaTicketsError
  >({
    ...options,
    url: "/tombola/tickets",
  });
};

/**
 * Buy Ticket
 * Buy a ticket
 */
export const postTombolaTicketsBuyPackId = (
  options: Options<PostTombolaTicketsBuyPackIdData>,
) => {
  return (options?.client ?? client).post<
    PostTombolaTicketsBuyPackIdResponse,
    PostTombolaTicketsBuyPackIdError
  >({
    ...options,
    url: "/tombola/tickets/buy/{pack_id}",
  });
};

/**
 * Get Tickets By Userid
 * Get tickets of a specific user.
 *
 * **Only admin users can get tickets of another user**
 */
export const getTombolaUsersUserIdTickets = (
  options: Options<GetTombolaUsersUserIdTicketsData>,
) => {
  return (options?.client ?? client).get<
    GetTombolaUsersUserIdTicketsResponse,
    GetTombolaUsersUserIdTicketsError
  >({
    ...options,
    url: "/tombola/users/{user_id}/tickets",
  });
};

/**
 * Get Tickets By Raffleid
 * Get tickets from a specific raffle.
 *
 * **The user must be a member of the raffle's group to use this endpoint
 */
export const getTombolaRafflesRaffleIdTickets = (
  options: Options<GetTombolaRafflesRaffleIdTicketsData>,
) => {
  return (options?.client ?? client).get<
    GetTombolaRafflesRaffleIdTicketsResponse,
    GetTombolaRafflesRaffleIdTicketsError
  >({
    ...options,
    url: "/tombola/raffles/{raffle_id}/tickets",
  });
};

/**
 * Get Prizes
 * Return all prizes
 */
export const getTombolaPrizes = (options?: Options) => {
  return (options?.client ?? client).get<
    GetTombolaPrizesResponse,
    GetTombolaPrizesError
  >({
    ...options,
    url: "/tombola/prizes",
  });
};

/**
 * Create Prize
 * Create a new prize
 *
 * **The user must be a member of the raffle's group to use this endpoint
 */
export const postTombolaPrizes = (options: Options<PostTombolaPrizesData>) => {
  return (options?.client ?? client).post<
    PostTombolaPrizesResponse,
    PostTombolaPrizesError
  >({
    ...options,
    url: "/tombola/prizes",
  });
};

/**
 * Edit Prize
 * Edit a prize
 *
 * **The user must be a member of the group raffle's to use this endpoint
 */
export const patchTombolaPrizesPrizeId = (
  options: Options<PatchTombolaPrizesPrizeIdData>,
) => {
  return (options?.client ?? client).patch<
    PatchTombolaPrizesPrizeIdResponse,
    PatchTombolaPrizesPrizeIdError
  >({
    ...options,
    url: "/tombola/prizes/{prize_id}",
  });
};

/**
 * Delete Prize
 * Delete a prize.
 *
 * **The user must be a member of the group raffle's to use this endpoint
 */
export const deleteTombolaPrizesPrizeId = (
  options: Options<DeleteTombolaPrizesPrizeIdData>,
) => {
  return (options?.client ?? client).delete<
    DeleteTombolaPrizesPrizeIdResponse,
    DeleteTombolaPrizesPrizeIdError
  >({
    ...options,
    url: "/tombola/prizes/{prize_id}",
  });
};

/**
 * Get Prizes By Raffleid
 * Get prizes from a specific raffle.
 */
export const getTombolaRafflesRaffleIdPrizes = (
  options: Options<GetTombolaRafflesRaffleIdPrizesData>,
) => {
  return (options?.client ?? client).get<
    GetTombolaRafflesRaffleIdPrizesResponse,
    GetTombolaRafflesRaffleIdPrizesError
  >({
    ...options,
    url: "/tombola/raffles/{raffle_id}/prizes",
  });
};

/**
 * Create Prize Picture
 * Upload a logo for a specific prize.
 *
 * **The user must be a member of the raffle's group to use this endpoint**
 */
export const postTombolaPrizesPrizeIdPicture = (
  options: Options<PostTombolaPrizesPrizeIdPictureData>,
) => {
  return (options?.client ?? client).post<
    PostTombolaPrizesPrizeIdPictureResponse,
    PostTombolaPrizesPrizeIdPictureError
  >({
    ...options,
    ...formDataBodySerializer,
    url: "/tombola/prizes/{prize_id}/picture",
  });
};

/**
 * Read Prize Logo
 * Get the logo of a specific prize.
 */
export const getTombolaPrizesPrizeIdPicture = (
  options: Options<GetTombolaPrizesPrizeIdPictureData>,
) => {
  return (options?.client ?? client).get<
    GetTombolaPrizesPrizeIdPictureResponse,
    GetTombolaPrizesPrizeIdPictureError
  >({
    ...options,
    url: "/tombola/prizes/{prize_id}/picture",
  });
};

/**
 * Get Users Cash
 * Get cash from all users.
 *
 * **The user must be a member of the group admin to use this endpoint
 */
export const getTombolaUsersCash = (options?: Options) => {
  return (options?.client ?? client).get<
    GetTombolaUsersCashResponse,
    GetTombolaUsersCashError
  >({
    ...options,
    url: "/tombola/users/cash",
  });
};

/**
 * Get Cash By Id
 * Get cash from a specific user.
 *
 * **The user must be a member of the group admin to use this endpoint or can only access the endpoint for its own user_id**
 */
export const getTombolaUsersUserIdCash = (
  options: Options<GetTombolaUsersUserIdCashData>,
) => {
  return (options?.client ?? client).get<
    GetTombolaUsersUserIdCashResponse,
    GetTombolaUsersUserIdCashError
  >({
    ...options,
    url: "/tombola/users/{user_id}/cash",
  });
};

/**
 * Create Cash Of User
 * Create cash for a user.
 *
 * **The user must be a member of the group admin to use this endpoint**
 */
export const postTombolaUsersUserIdCash = (
  options: Options<PostTombolaUsersUserIdCashData>,
) => {
  return (options?.client ?? client).post<
    PostTombolaUsersUserIdCashResponse,
    PostTombolaUsersUserIdCashError
  >({
    ...options,
    url: "/tombola/users/{user_id}/cash",
  });
};

/**
 * Edit Cash By Id
 * Edit cash for an user. This will add the balance to the current balance.
 * A negative value can be provided to remove money from the user.
 *
 * **The user must be a member of the group admin to use this endpoint**
 */
export const patchTombolaUsersUserIdCash = (
  options: Options<PatchTombolaUsersUserIdCashData>,
) => {
  return (options?.client ?? client).patch<
    PatchTombolaUsersUserIdCashResponse,
    PatchTombolaUsersUserIdCashError
  >({
    ...options,
    url: "/tombola/users/{user_id}/cash",
  });
};

/**
 * Draw Winner
 */
export const postTombolaPrizesPrizeIdDraw = (
  options: Options<PostTombolaPrizesPrizeIdDrawData>,
) => {
  return (options?.client ?? client).post<
    PostTombolaPrizesPrizeIdDrawResponse,
    PostTombolaPrizesPrizeIdDrawError
  >({
    ...options,
    url: "/tombola/prizes/{prize_id}/draw",
  });
};

/**
 * Open Raffle
 * Open a raffle
 *
 * **The user must be a member of the raffle's group to use this endpoint**
 */
export const patchTombolaRafflesRaffleIdOpen = (
  options: Options<PatchTombolaRafflesRaffleIdOpenData>,
) => {
  return (options?.client ?? client).patch<
    PatchTombolaRafflesRaffleIdOpenResponse,
    PatchTombolaRafflesRaffleIdOpenError
  >({
    ...options,
    url: "/tombola/raffles/{raffle_id}/open",
  });
};

/**
 * Lock Raffle
 * Lock a raffle
 *
 * **The user must be a member of the raffle's group to use this endpoint**
 */
export const patchTombolaRafflesRaffleIdLock = (
  options: Options<PatchTombolaRafflesRaffleIdLockData>,
) => {
  return (options?.client ?? client).patch<
    PatchTombolaRafflesRaffleIdLockResponse,
    PatchTombolaRafflesRaffleIdLockError
  >({
    ...options,
    url: "/tombola/raffles/{raffle_id}/lock",
  });
};
